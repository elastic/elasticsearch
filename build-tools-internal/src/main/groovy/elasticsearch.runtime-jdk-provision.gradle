/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import org.elasticsearch.gradle.Architecture
import org.elasticsearch.gradle.OS
import org.elasticsearch.gradle.VersionProperties
import org.elasticsearch.gradle.internal.info.BuildParams
import org.elasticsearch.gradle.internal.precommit.ThirdPartyAuditPrecommitPlugin
import org.elasticsearch.gradle.internal.precommit.ThirdPartyAuditTask
import org.elasticsearch.gradle.internal.test.rest.RestTestBasePlugin
import org.elasticsearch.gradle.testclusters.StandaloneRestIntegTestTask

// gradle has an open issue of failing applying plugins in
// precompiled script plugins (see https://github.com/gradle/gradle/issues/17004)
// apply plugin: 'elasticsearch.jdk-download'

configure(allprojects) {
  apply plugin: 'elasticsearch.jdk-download'

  jdks {
    provisioned_runtime {
      vendor = VersionProperties.bundledJdkVendor
      version = VersionProperties.bundledJdkVersion
      platform = OS.current().name().toLowerCase()
      architecture = Architecture.current().name().toLowerCase()
    }
  }
  project.tasks.withType(Test).configureEach { Test test ->
    if (BuildParams.getIsRuntimeJavaHomeSet()) {
      test.executable = "${BuildParams.runtimeJavaHome}/bin/java" +
          (OS.current() == OS.WINDOWS ? '.exe' : '')
    } else {
      test.dependsOn(project.jdks.provisioned_runtime)
      test.executable = project.jdks.provisioned_runtime.getBinJavaPath()
    }
  }
  project.plugins.withType(RestTestBasePlugin) {
    // Use later JDK for new REST test plugins since :test:test-clusters requires Java 17+
    // The clusters under test still use the configured runtime java home
    project.tasks.withType(StandaloneRestIntegTestTask).configureEach { StandaloneRestIntegTestTask test ->
      test.dependsOn(project.jdks.provisioned_runtime)
      test.executable = project.jdks.provisioned_runtime.getBinJavaPath()
      // Pass actual runtime java version used for clusters under test
      test.systemProperty("tests.runtime.java.version", BuildParams.runtimeJavaVersion)
    }
  }
  project.plugins.withType(RestTestBasePlugin) {
    tasks.withType(StandaloneRestIntegTestTask).configureEach {
      if (BuildParams.getIsRuntimeJavaHomeSet() == false) {
        dependsOn(project.jdks.provisioned_runtime)
        nonInputProperties.systemProperty("tests.runtime.java", "${-> project.jdks.provisioned_runtime.javaHomePath}")
      }
    }
  }
  project.plugins.withType(ThirdPartyAuditPrecommitPlugin) {
    project.getTasks().withType(ThirdPartyAuditTask.class).configureEach {
      if (BuildParams.getIsRuntimeJavaHomeSet() == false) {
        javaHome.set(providers.provider(() -> "${project.jdks.provisioned_runtime.javaHomePath}"))
        targetCompatibility.set(providers.provider(() -> JavaVersion.toVersion(project.jdks.provisioned_runtime.major)))
      }
    }
  }
}

// if neither condition above is executed, tests will use the gradle jvm

[[migrating-${majorDotMinor}]]
== Migrating to ${majorDotMinor}
++++
<titleabbrev>${majorDotMinor}</titleabbrev>
++++

This section discusses the changes that you need to be aware of when migrating
your application to {es} ${majorDotMinor}.

See also <<release-highlights>> and <<es-release-notes>>.
<% if (isElasticsearchSnapshot) { %>
coming::[${majorDotMinorDotRevision}]
<% } %>

[discrete]
[[breaking-changes-${majorDotMinor}]]
=== Breaking changes
<% if (breakingByNotabilityByArea.isEmpty()) { %>
There are no breaking changes in {es} ${majorDotMinor}.
<% } else { %>
The following changes in {es} ${majorDotMinor} might affect your applications
and prevent them from operating normally.
Before upgrading to ${majorDotMinor}, review these changes and take the described steps
to mitigate the impact.
<%
    if (breakingByNotabilityByArea.getOrDefault(true, []).isEmpty()) { %>

There are no notable breaking changes in {es} ${majorDotMinor}.
But there are some less critical breaking changes.
<%  }
    [true, false].each { isNotable ->
        def breakingByArea = breakingByNotabilityByArea.getOrDefault(isNotable, [])
        if (breakingByArea.isEmpty() == false) {
            breakingByArea.eachWithIndex { area, breakingChanges, i ->
                print "\n[discrete]\n"
                print "[[breaking_${majorMinor}_${ area.toLowerCase().replaceAll("[^a-z0-9]+", "_") }_changes]]\n"
                print "==== ${area} changes\n"

                for (breaking in breakingChanges) { %>
[[${ breaking.anchor }]]
.${breaking.title}
[%collapsible]
====
*Details* +
${breaking.details.trim()}

*Impact* +
${breaking.impact.trim()}
====
<%
                }
            }

        }
    }
}

if (deprecationsByNotabilityByArea.isEmpty() == false) { %>

[discrete]
[[deprecated-${majorDotMinor}]]
=== Deprecations

The following functionality has been deprecated in {es} ${majorDotMinor}
and will be removed in a future version.
While this won't have an immediate impact on your applications,
we strongly encourage you to take the described steps to update your code
after upgrading to ${majorDotMinor}.

To find out if you are using any deprecated functionality,
enable <<deprecation-logging, deprecation logging>>.
<%
    [true, false].each { isNotable ->
        def deprecationsByArea = deprecationsByNotabilityByArea.getOrDefault(isNotable, [])
        if (deprecationsByArea.isEmpty() == false) {
            deprecationsByArea.eachWithIndex { area, deprecations, i ->
                print "\n[discrete]\n"
                print "[[deprecations_${majorMinor}_${ area.toLowerCase().replaceAll("[^a-z0-9]+", "_") }]]\n"
                print "==== ${area} deprecations\n"

                for (deprecation in deprecations) { %>
[[${ deprecation.anchor }]]
.${deprecation.title}
[%collapsible]
====
*Details* +
${deprecation.details.trim()}

*Impact* +
${deprecation.impact.trim()}
====
<%
                }
            }

        }
    }
} %>

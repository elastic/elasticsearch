<%
def unqualifiedVersion = version.withoutQualifier()
%>[[release-notes-$unqualifiedVersion]]
== {es} version ${unqualifiedVersion}
<% if (version.isSnapshot()) { %>
coming[$unqualifiedVersion]
<% } %>
Also see <<breaking-changes-${ version.major }.${ version.minor },Breaking changes in ${ version.major }.${ version.minor }>>.
<% if (changelogsByTypeByArea["security"] != null) { %>
[discrete]
[[security-updates-${unqualifiedVersion}]]
=== Security updates

<% for (change in changelogsByTypeByArea.remove("security").remove("_all_")) {
    print "* ${change.summary}\n"
}
}
if (changelogsByTypeByArea["known-issue"] != null) { %>
[discrete]
[[known-issues-${unqualifiedVersion}]]
=== Known issues

<% for (change in changelogsByTypeByArea.remove("known-issue").remove("_all_")) {
    print "* ${change.summary}\n"
}
}
for (changeType in changelogsByTypeByArea.keySet()) { %>
[[${ changeType }-${ unqualifiedVersion }]]
[float]
=== ${ TYPE_LABELS.getOrDefault(changeType, 'No mapping for TYPE_LABELS[' + changeType + ']') }
<% for (team in changelogsByTypeByArea[changeType].keySet()) {
    print "\n${team}::\n";

    for (change in changelogsByTypeByArea[changeType][team]) {
        print "* ${change.summary} {es-pull}${change.pr}[#${change.pr}]"
        if (change.issues != null && change.issues.empty == false) {
            print change.issues.size() == 1 ? " (issue: " : " (issues: "
            print change.issues.collect { "{es-issue}${it}[#${it}]" }.join(", ")
            print ")"
        }
        print "\n"
    }
}
}
print "\n\n"

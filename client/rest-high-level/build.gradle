import org.elasticsearch.gradle.internal.test.RestIntegTestTask
import org.elasticsearch.gradle.internal.info.BuildParams

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.legacy-java-rest-test'
apply plugin: 'elasticsearch.publish'
apply plugin: 'elasticsearch.rest-resources'

group = 'org.elasticsearch.client'

base {
  archivesName = 'elasticsearch-rest-high-level-client'
}

// HLRC is published under the Elastic License
projectLicenses.set(['Elastic License 2.0': ext.elasticLicenseUrl.get()])

restResources {
  //we need to copy the yaml spec so we can check naming (see RestHighlevelClientTests#testApiNamingConventions)
  restApi {
    include '*'
  }
}

configurations {
    javaRestTestImplementation {
      extendsFrom testImplementation
    }
}

sourceSets {
  javaRestTest {
    java {
      srcDir 'src/test/java'
    }
    resources {
      srcDir 'src/test/resources'
    }
    compileClasspath = main.output + compileClasspath
    runtimeClasspath = main.output + runtimeClasspath
  }
}

dependencies {
  api project(':server')
  api project(':client:rest')
  api project(':modules:mapper-extras')
  api project(':modules:parent-join')
  api project(':modules:aggs-matrix-stats')
  api project(':modules:rank-eval')
  api project(':modules:lang-mustache')

  testImplementation project(':client:test')
  testImplementation project(':test:framework')
  testImplementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  testImplementation "junit:junit:${versions.junit}"
  //this is needed to make RestHighLevelClientTests#testApiNamingConventions work from IDEs
  testImplementation project(":rest-api-spec")
  // Needed for serialization tests:
  // (In order to serialize a server side class to a client side class or the other way around)
  testImplementation(project(':x-pack:plugin:core')) {
    exclude group: 'org.elasticsearch', module: 'elasticsearch-rest-high-level-client'
  }
  testImplementation(project(':modules:ingest-geoip')) {
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
  }
  testImplementation(project(':x-pack:plugin:eql'))
  testImplementation(project(':x-pack:plugin:ql:test-fixtures'))
}

tasks.named('forbiddenApisMain').configure {
  // core does not depend on the httpclient for compile so we add the signatures here. We don't add them for test as they are already
  // specified
  addSignatureFiles 'http-signatures'
  signaturesFiles += files('src/main/resources/forbidden/rest-high-level-signatures.txt')
}

File nodeCert = file("./testnode.crt")
File nodeTrustStore = file("./testnode.jks")
File pkiTrustCert = file("./src/test/resources/org/elasticsearch/client/security/delegate_pki/testRootCA.crt")

def clusterUserNameProvider = providers.systemProperty('tests.rest.cluster.username')
        .orElse('test_user')

def clusterPasswordProvider = providers.systemProperty('tests.rest.cluster.password')
        .orElse('test-user-password')

tasks.named("javaRestTest").configure {
  systemProperty 'tests.rest.async', 'false'
  systemProperty 'tests.rest.cluster.username', clusterUserNameProvider.get()
  systemProperty 'tests.rest.cluster.password', clusterPasswordProvider.get()
}

TaskProvider<RestIntegTestTask> asyncJavaRestTest = tasks.register("asyncJavaRestTest", RestIntegTestTask) {
    systemProperty 'tests.rest.async', 'true'
    systemProperty 'tests.rest.cluster.username', clusterUserNameProvider.get()
    systemProperty 'tests.rest.cluster.password', clusterPasswordProvider.get()
    testClassesDirs = sourceSets.javaRestTest.output.classesDirs
    classpath = sourceSets.javaRestTest.runtimeClasspath
}

tasks.named("check").configure {
  dependsOn(asyncJavaRestTest)
}

testClusters.configureEach {
  testDistribution = 'DEFAULT'
  systemProperty 'es.scripting.update.ctx_in_params', 'false'
  setting 'reindex.remote.whitelist', '[ "[::1]:*", "127.0.0.1:*" ]'
  setting 'xpack.license.self_generated.type', 'trial'
  setting 'xpack.security.enabled', 'true'
  setting 'xpack.security.authc.token.enabled', 'true'
  setting 'xpack.security.authc.api_key.enabled', 'true'
  setting 'xpack.security.http.ssl.enabled', 'false'
  setting 'xpack.security.transport.ssl.enabled', 'false'
  // Truststore settings are not used since TLS is not enabled. Included for testing the get certificates API
  setting 'xpack.security.http.ssl.certificate_authorities', 'testnode.crt'
  setting 'xpack.security.transport.ssl.truststore.path', 'testnode.jks'
  setting 'xpack.security.authc.realms.file.default_file.order', '0'
  setting 'xpack.security.authc.realms.native.default_native.order', '1'
  setting 'xpack.security.authc.realms.pki.pki1.order', '2'
  setting 'xpack.security.authc.realms.pki.pki1.certificate_authorities', '[ "testRootCA.crt" ]'
  setting 'xpack.security.authc.realms.pki.pki1.delegation.enabled', 'true'

  setting 'indices.lifecycle.poll_interval', '1000ms'
  setting 'indices.lifecycle.history_index_enabled', 'false'
  keystore 'xpack.security.transport.ssl.truststore.secure_password', 'testnode'
  extraConfigFile 'roles.yml', file('roles.yml')
  user username: clusterUserNameProvider.get(),
    password: clusterPasswordProvider.get(),
    role: providers.systemProperty('tests.rest.cluster.role').orElse('admin').get()
  user username: 'admin_user', password: 'admin-password'

  extraConfigFile nodeCert.name, nodeCert
  extraConfigFile nodeTrustStore.name, nodeTrustStore
  extraConfigFile pkiTrustCert.name, pkiTrustCert

  setting 'xpack.searchable.snapshot.shared_cache.size', '1mb'
  setting 'xpack.searchable.snapshot.shared_cache.region_size', '16kb'

  setting 'cluster.routing.allocation.disk.watermark.enable_for_single_data_node', 'true'
}

tasks.named('splitPackagesAudit').configure {
  // the client package should be owned by the client, but server has some classes there too
  ignoreClasses 'org.elasticsearch.client.*'
}

tasks.named('checkstyleJavaRestTest').configure {
  enabled = false
}

// this check is incompatible with the internal-java-rest-test setup we did here
// to not need to change the docs repo too. fine for 7.17
tasks.named('testingConventions').configure {
  enabled = false
}

tasks.named('javaRestTestTestingConventions').configure {
  enabled = false
}

tasks.named('testTestingConventions').configure {
  baseClass 'org.elasticsearch.test.ESTestCase'
  suffix 'IT'
  suffix 'Tests'
}

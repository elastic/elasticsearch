[#es-connectors-gmail]
=== Elastic Gmail connector reference
++++
<titleabbrev>Gmail</titleabbrev>
++++
// Attributes used in this file
:service-name: Gmail
:service-name-stub: gmail

The _Elastic GMail connector_ is a <<es-connectors,connector>> for GMail.


// //////// //// //// //// //// //// //// ////////
// //////// NATIVE CONNECTOR REFERENCE (MANAGED SERVICE) ///////
// //////// //// //// //// //// //// //// ////////

[discrete#es-connectors-gmail-native-connector-reference]
==== *Elastic managed connector reference*

.View *Elastic managed connector* reference
[%collapsible]
===============

[discrete#es-connectors-gmail-availability]
===== Availability and prerequisites

This connector is available as a *managed connector* (managed service) in Elastic Cloud.

This connector is compatible with Elastic versions *8.13.0+*.

To use this connector, satisfy all <<es-native-connectors,managed connector requirements>>.

[discrete#es-connectors-gmail-create-native-connector]
==== Create a {service-name} connector
include::_connectors-create-native.asciidoc[]

[discrete#es-connectors-gmail-usage]
===== Usage

To use this connector as a managed connector in Elastic Cloud, use the *Connectors* workflow in the Kibana UI.

To create a new {service-name} connector:

. Navigate to *Search -> Connectors* page in the Kibana UI.
. Select the *New Native Connector* button.
. Select the *{service-name}* connector.

For additional operations, see <<es-connectors-usage>>.

[discrete#es-connectors-gmail-connector-authentication-prerequisites]
===== Connector authentication prerequisites

Before syncing any data from GMail, you need to create a https://cloud.google.com/iam/docs/service-account-overview[service account^] with appropriate access to the GMail and the Google Directory API, which is part of the Google Admin SDK API.
You also need to enable domain-wide delegation to impersonate the users you're fetching messages from.

To get started, log into https://cloud.google.com[Google Cloud Platform^] and go to the `Console`.

. *Create a Google Cloud Project.* Give your project a name, change the project ID and click the Create button.
. *Enable Google APIs.* Choose APIs & Services from the left menu and click on `Enable APIs and Services`. You need to enable *GMail API* and the *Google Admin SDK API*.
. *Create a Service Account.* In the `APIs & Services` section, click on `Credentials` and click on `Create credentials` to create a service account. Give your service account a name and a service account ID. This is like an email address and will be used to identify your service account in the future. Click `Done` to finish creating the service account.
+
Your service account needs to have access to at least the following scope:
+
* `https://www.googleapis.com/auth/gmail.readonly`
. *Create a Key File*.
  * In the Cloud Console, go to `IAM and Admin` > `Service accounts` page.
  * Click the email address of the service account that you want to create a key for.
  * Click the `Keys` tab. Click the `Add key` drop-down menu, then select `Create new key`.
  * Select JSON as the Key type and then click `Create`. This will download a JSON file that will contain the service account credentials.

. *Google Workspace domain-wide delegation of authority*.
+
To access user data like messages on a Google Workspace domain, the service account that you created needs to be granted access by a super administrator for the domain. You can follow https://developers.google.com/cloud-search/docs/guides/delegation[the official documentation^] to perform Google Workspace domain-wide delegation of authority.
+
You need to grant the following *OAuth Scopes* to your service account:
+
--
* `https://www.googleapis.com/auth/admin.directory.user.readonly`
--
+
This step allows the connector to access user data and their group memberships in your Google Workspace organization.

[discrete#es-connectors-gmail-configuration]
===== Configuration

The following configuration fields are required:

GMail service account JSON::
The service account credentials generated from Google Cloud Platform (JSON string).
Refer to the https://developers.google.com/workspace/guides/create-credentials#create_credentials_for_a_service_account[Google Cloud documentation^] for more information.

Google Workspace admin email::
Google Workspace admin email.
Required to enable document level security (DLS).
A service account with delegated authority can impersonate an admin user with permissions to access Google Workspace user data and their group memberships.
Refer to the https://support.google.com/a/answer/162106?hl=en[Google Cloud documentation^] for more information.

Google customer ID::
Google customer id.
Required to fetch messages and to enable document level security (DLS).
Go to `Google Workspace Admin Console` -> `Account` and copy the value under `Customer Id`.

Include spam and trash emails::
Toggle to fetch spam and trash emails.
Also works with document level security (DLS).

Enable document level security::
Toggle to enable <<es-dls,document level security (DLS>>.
DLS is supported for the GMail connector.
When enabled:
+
* Full syncs will fetch access control lists for each document and store them in the `_allow_access_control` field.
* Access control syncs will fetch users' access control lists and store them in a separate index.

[discrete#es-connectors-gmail-documents-and-syncs]
===== Documents and syncs

The connector will fetch all messages of all users the service account has access to.

[discrete#es-connectors-gmail-sync-types]
====== Sync types

<<es-connectors-sync-types-full,Full syncs>> are supported by default for all connectors.

This connector also supports <<es-connectors-sync-types-incremental,incremental syncs>>.

[discrete#es-connectors-gmail-sync-rules]
===== Sync rules

<<es-sync-rules-basic,Basic sync rules>> are identical for all connectors and are available by default.

Advanced sync rules are available for this connector.
The connector supports the https://support.google.com/mail/answer/7190[GMail advanced search syntax] under the `messages` field.

For example:

[source,js]
----
{
  "messages": [
    "before:2021/10/10",
    "from:amy"
  ]
}
----
// NOTCONSOLE

[discrete#es-connectors-gmail-document-level-security]
===== Document level security

Document level security (DLS) enables you to restrict access to documents based on a userâ€™s permissions.
Refer to <<es-connectors-gmail-configuration,configuration>> on this page for how to enable DLS for this connector.

[NOTE]
====
Refer to <<es-dls-e2e-guide, DLS in Search Applications>> to learn how to ingest data from a connector with DLS enabled, when building a search application.
The example uses SharePoint Online as the data source, but the same steps apply to every connector.
====

[discrete#es-connectors-gmail-known-issues]
===== Known issues

There are currently no known issues for this connector.

[discrete#es-connectors-gmail-troubleshooting]
===== Troubleshooting

See <<es-connectors-troubleshooting>>.

[discrete#es-connectors-gmail-security]
===== Security

See <<es-connectors-security>>.

[discrete#es-connectors-gmail-framework-and-source]
===== Framework and source

This connector is built in Python with the {connectors-python}[Elastic connector framework^].

View the {connectors-python}/connectors/sources/gmail.py[source code for this connector^] (branch _{connectors-branch}_, compatible with Elastic _{minor-version}_).


// Closing the collapsible section 
===============


// //////// //// //// //// //// //// //// ////////
// //////// CONNECTOR CLIENT REFERENCE (SELF-MANAGED) ///////
// //////// //// //// //// //// //// //// ////////

[discrete#es-connectors-gmail-connector-client-reference]
==== *Self-managed connector reference*

.View *self-managed connector* reference
[%collapsible]
===============

[discrete#es-connectors-gmail-client-availability]
===== Availability and prerequisites

This connector is available as a self-managed *self-managed connector* from the *Elastic connector framework*.

This self-managed connector is compatible with Elastic versions *8.10.0+*.

To use this connector, satisfy all <<es-build-connector,self-managed connector requirements>>.

[discrete#es-connectors-gmail-create-connector-client]
===== Create a {service-name} connector
include::_connectors-create-client.asciidoc[]

[discrete#es-connectors-gmail-client-usage]
===== Usage

To use this connector as a **self-managed connector**, use the *Connector* workflow in the Kibana UI.

For additional operations, see <<es-connectors-usage>>.

[discrete#es-connectors-gmail-client-connector-authentication-prerequisites]
===== Connector authentication prerequisites

Before syncing any data from GMail, you need to create a https://cloud.google.com/iam/docs/service-account-overview[service account^] with appropriate access to the GMail and the Google Directory API, which is part of the Google Admin SDK API.
You also need to enable domain-wide delegation to impersonate the users you're fetching messages from.

To get started, log into https://cloud.google.com[Google Cloud Platform^] and go to the `Console`.

. *Create a Google Cloud Project.* Give your project a name, change the project ID and click the Create button.
. *Enable Google APIs.* Choose APIs & Services from the left menu and click on `Enable APIs and Services`. You need to enable *GMail API* and the *Google Admin SDK API*.
. *Create a Service Account.* In the `APIs & Services` section, click on `Credentials` and click on `Create credentials` to create a service account. Give your service account a name and a service account ID. This is like an email address and will be used to identify your service account in the future. Click `Done` to finish creating the service account.
+
Your service account needs to have access to at least the following scope:
+
* `https://www.googleapis.com/auth/gmail.readonly`
. *Create a Key File*.
  * In the Cloud Console, go to `IAM and Admin` > `Service accounts` page.
  * Click the email address of the service account that you want to create a key for.
  * Click the `Keys` tab. Click the `Add key` drop-down menu, then select `Create new key`.
  * Select JSON as the Key type and then click `Create`. This will download a JSON file that will contain the service account credentials.

. *Google Workspace domain-wide delegation of authority*.
+
To access user data like messages on a Google Workspace domain, the service account that you created needs to be granted access by a super administrator for the domain. You can follow https://developers.google.com/cloud-search/docs/guides/delegation[the official documentation^] to perform Google Workspace domain-wide delegation of authority.
+
You need to grant the following *OAuth Scopes* to your service account:
+
--
* `https://www.googleapis.com/auth/admin.directory.user.readonly`
--
+
This step allows the connector to access user data and their group memberships in your Google Workspace organization.

[discrete#es-connectors-gmail-client-configuration]
===== Configuration

[TIP]
====
When using the <<es-build-connector, self-managed connector>> workflow, initially these fields will use the default configuration set in the {connectors-python}/connectors/sources/gmail.py[connector source code^].
These are set in the `get_default_configuration` function definition.

These configurable fields will be rendered with their respective *labels* in the Kibana UI.
Once connected, you'll be able to update these values in Kibana.
====

The following configuration fields are required:

`GMail service account JSON`::
The service account credentials generated from Google Cloud Platform (JSON string).
Refer to the https://developers.google.com/workspace/guides/create-credentials#create_credentials_for_a_service_account[Google Cloud documentation^] for more information.

`Google Workspace admin email`::
Google Workspace admin email.
Required to enable document level security (DLS).
A service account with delegated authority can impersonate an admin user with permissions to access Google Workspace user data and their group memberships.
Refer to the https://support.google.com/a/answer/162106?hl=en[Google Cloud documentation^] for more information.

`Google customer id`::
Google customer id.
Required to fetch messages and to enable document level security (DLS).
Go to `Google Workspace Admin Console` -> `Account` and copy the value under `Customer Id`.

`Include spam and trash emails`::
Toggle to fetch spam and trash emails.
Also works with DLS.

`Enable document level security`::
Toggle to enable <<es-dls,document level security (DLS>>.
DLS is supported for the GMail connector.
When enabled:
+
* Full syncs will fetch access control lists for each document and store them in the `_allow_access_control` field.
* Access control syncs will fetch users' access control lists and store them in a separate index.

[discrete#es-connectors-gmail-client-deployment-using-docker]
===== Deployment using Docker

include::_connectors-docker-instructions.asciidoc[]

[discrete#es-connectors-gmail-client-documents-and-syncs]
===== Documents and syncs

The connector will fetch all messages of all users the service account has access to.

[discrete#es-connectors-gmail-client-sync-types]
====== Sync types

<<es-connectors-sync-types-full,Full syncs>> are supported by default for all connectors.

This connector also supports <<es-connectors-sync-types-incremental,incremental syncs>>.

[discrete#es-connectors-gmail-client-sync-rules]
===== Sync rules

<<es-sync-rules-basic,Basic sync rules>> are identical for all connectors and are available by default.

Advanced sync rules are available for this connector.
The connector supports the https://support.google.com/mail/answer/7190[GMail advanced search syntax] under the `messages` field.

For example:

[source,js]
----
{
  "messages": [
    "before:2021/10/10",
    "from:amy"
  ]
}
----
// NOTCONSOLE

[discrete#es-connectors-gmail-client-document-level-security]
===== Document level security

Document level security (DLS) enables you to restrict access to documents based on a userâ€™s permissions.
Refer to <<es-connectors-gmail-client-configuration,configuration>> on this page for how to enable DLS for this connector.

[NOTE]
====
Refer to <<es-dls-e2e-guide, DLS in Search Applications>> to learn how to ingest data from a connector with DLS enabled, when building a search application.
The example uses SharePoint Online as the data source, but the same steps apply to every connector.
====

[discrete#es-connectors-gmail-client-known-issues]
===== Known issues

There are currently no known issues for this connector.

[discrete#es-connectors-gmail-client-troubleshooting]
===== Troubleshooting

See <<es-connectors-troubleshooting>>.

[discrete#es-connectors-gmail-client-security]
===== Security

See <<es-connectors-security>>.

[discrete#es-connectors-gmail-client-framework-and-source]
===== Framework and source

This connector is built in Python with the {connectors-python}[Elastic connector framework^].

View the {connectors-python}/connectors/sources/gmail.py[source code for this connector^] (branch _{connectors-branch}_, compatible with Elastic _{minor-version}_).


// Closing the collapsible section 
===============

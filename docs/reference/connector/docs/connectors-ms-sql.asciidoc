[#es-connectors-ms-sql]
=== Elastic Microsoft SQL connector reference
++++
<titleabbrev>Microsoft SQL</titleabbrev>
++++
// Attributes used in this file:
:service-name: Microsoft SQL
:service-name-stub: mssql

The _Elastic Microsoft SQL connector_ is a <<es-connectors,connector>> for https://learn.microsoft.com/en-us/sql/[Microsoft SQL^] databases.
This connector is written in Python using the {connectors-python}[Elastic connector framework^]. 

View the {connectors-python}/connectors/sources/{service-name-stub}.py[*source code* for this connector^] (branch _{connectors-branch}_, compatible with Elastic _{minor-version}_).

.Choose your connector reference
*******************************
Are you using a managed connector on Elastic Cloud or a self-managed connector? Expand the documentation based on your deployment method.
*******************************

// //////// //// //// //// //// //// //// ////////
// ////////   NATIVE CONNECTOR REFERENCE   ///////
// //////// //// //// //// //// //// //// ////////

[discrete#es-connectors-ms-sql-native-connector-reference]
==== *Elastic managed connector reference*

.View *Elastic managed connector* reference

[%collapsible]
===============

[discrete#es-connectors-ms-sql-availability-prerequisites]
===== Availability and prerequisites

This connector is available as a *managed connector* in Elastic versions *8.8.0 and later*.
To use this connector natively in Elastic Cloud, satisfy all <<es-native-connectors-prerequisites,managed connector requirements>>.

[discrete#es-connectors-{service_type}-create-native-connector]
===== Create a {service-name} connector
include::_connectors-create-native.asciidoc[]

[discrete#es-connectors-ms-sql-usage]
===== Usage

To use this connector as a *managed connector*, use the *Connector* workflow.
See <<es-native-connectors>>.

Users require the `sysadmin` server role.

For additional operations, see <<es-connectors-usage>>.

[discrete#es-connectors-ms-sql-compatability]
===== Compatibility

The following are compatible with Elastic connector frameworks:

* Microsoft SQL Server versions 2017, 2019
* Azure SQL
* Amazon RDS for SQL Server

[discrete#es-connectors-ms-sql-configuration]
===== Configuration

The following configuration fields are required to set up the connector:

Host::
The server host address where the Microsoft SQL Server is hosted.
Default value is `127.0.0.1`.
Examples:
+
* `192.158.1.38`
* `demo.instance.demo-region.demo.service.com`

Port::
The port where the Microsoft SQL Server is hosted. Default value is `1433`.

Username::
The username of the account for Microsoft SQL Server.

Password::
The password of the account to be used for the Microsoft SQL Server.

Database::
Name of the Microsoft SQL Server database.
Examples:
+
* `employee_database`
* `customer_database`

Comma-separated list of tables::
List of tables, separated by commas.
The Microsoft SQL connector will fetch data from all tables present in the configured database, if the value is `*` .
Default value is `*`.
Examples:
+
* `table_1, table_2`
*  `*`
+
[WARNING]
====
This field can be bypassed by advanced sync rules.
====

Schema::
Name of the Microsoft SQL Server schema.
Default value is `dbo`.
+
Examples:
+
* `dbo`
* `custom_schema`

Enable SSL::
Toggle to enable SSL verification.
Default value is `False`.

SSL certificate::
Content of SSL certificate.
If SSL is disabled, the `ssl_ca` value will be ignored.
+
.*Expand* to see an example certificate
[%collapsible]
====
```
-----BEGIN CERTIFICATE-----
MIID+jCCAuKgAwIBAgIGAJJMzlxLMA0GCSqGSIb3DQEBCwUAMHoxCzAJBgNVBAYT
...
7RhLQyWn2u00L7/9Omw=
-----END CERTIFICATE-----
```
====

Validate host::
Toggle to enable host validation.
Default value is `False`.

[discrete#es-connectors-ms-sql-documents-syncs]
===== Documents and syncs

* Tables with no primary key defined are skipped.
* If the `last_user_update` of `sys.dm_db_index_usage_stats` table is not available for a specific table and database then all data in that table will be synced.

[NOTE]
====
* Files bigger than 10 MB won't be extracted.
* Permissions are not synced.
**All documents** indexed to an Elastic deployment will be visible to **all users with access** to that Elastic Deployment.
====

[discrete#es-connectors-ms-sql-sync-rules]
===== Sync rules

<<es-sync-rules-basic,Basic sync rules>> are identical for all connectors and are available by default.
For more information read <<es-sync-rules-types,sync rules>>.

[discrete#es-connectors-ms-sql-sync-rules-advanced]
====== Advanced sync rules

This connector supports <<es-sync-rules-advanced,advanced sync rules>> for remote filtering.
These rules cover complex query-and-filter scenarios that cannot be expressed with basic sync rules.
Advanced sync rules are defined through a source-specific DSL JSON snippet.

[NOTE]
====
A <<es-connectors-sync-types-full, full sync>> is required for advanced sync rules to take effect.
====

Here are a few examples of advanced sync rules for this connector.

.*Expand* to see example data
[%collapsible]
====

*`employee` table*

[cols="3*", options="header"]
|===
| emp_id | name | age
| 3 | John | 28
| 10 | Jane | 35
| 14 | Alex | 22
|===

*
*`customer` table*

[cols="3*", options="header"]
|===
| c_id | name | age
| 2 | Elm | 24
| 6 | Pine | 30
| 9 | Oak | 34
|===
====

[discrete#es-connectors-ms-sql-sync-rules-advanced-queries]
======= Example: Two queries

These rules fetch all records from both the `employee` and `customer` tables. The data from these tables will be synced separately to Elasticsearch.

[source,js]
----
[
  {
    "tables": [
      "employee"
    ],
    "query": "SELECT * FROM employee"
  },
  {
    "tables": [
      "customer"
    ],
    "query": "SELECT * FROM customer"
  }
]
----
// NOTCONSOLE

[discrete#es-connectors-ms-sql-sync-rules-example-one-where]
======= Example: One WHERE query

This rule fetches only the records from the `employee` table where the `emp_id` is greater than 5. Only these filtered records will be synced to Elasticsearch.

[source,js]
----
[
  {
    "tables": ["employee"],
    "query": "SELECT * FROM employee WHERE emp_id > 5"
  }
]
----
// NOTCONSOLE

[discrete#es-connectors-ms-sql-sync-rules-example-one-join]
======= Example: One JOIN query

This rule fetches records by performing an INNER JOIN between the `employee` and `customer` tables on the condition that the `emp_id` in `employee` matches the `c_id` in `customer`. The result of this combined data will be synced to Elasticsearch.

[source,js]
----
[
  {
    "tables": ["employee", "customer"],
    "query": "SELECT * FROM employee INNER JOIN customer ON employee.emp_id = customer.c_id"
  }
]
----
// NOTCONSOLE

[WARNING]
====
When using advanced rules, a query can bypass the configuration field `tables`.
This will happen if the query specifies a table that doesn't appear in the configuration.
This can also happen if the configuration specifies `*` to fetch all tables while the advanced sync rule requests for only a subset of tables.
====

[discrete#es-connectors-ms-sql-known-issues]
===== Known issues

There are no known issues for this connector.
See <<es-connectors-known-issues>> for any issues affecting all connectors.

[discrete#es-connectors-ms-sql-troubleshooting]
===== Troubleshooting

See <<es-connectors-troubleshooting>>.

[discrete#es-connectors-ms-sql-security]
===== Security

See <<es-connectors-security>>.




This connector uses the https://github.com/elastic/connectors/blob/{branch}/connectors/sources/generic_database.py[generic database connector source code^] (branch _{connectors-branch}_, compatible with Elastic _{minor-version}_).

View {connectors-python}/connectors/sources/mssql.py[additional code specific to this data source^] (branch _{connectors-branch}_, compatible with Elastic _{minor-version}_).


// Closing the collapsible section 
===============


// //////// //// //// //// //// //// //// ////////
// //////// CONNECTOR CLIENT REFERENCE     ///////
// //////// //// //// //// //// //// //// ////////

[discrete#es-connectors-ms-sql-connector-client-reference]
==== *Self-managed connector*

.View *self-managed connector* reference

[%collapsible]
===============

[discrete#es-connectors-ms-sql-client-availability-prerequisites]
===== Availability and prerequisites

This connector is available as a self-managed *self-managed connector*.
To use this connector, satisfy all <<es-build-connector,self-managed connector requirements>>.

[discrete#es-connectors-{service_type}-create-connector-client]
===== Create a {service-name} connector
include::_connectors-create-client.asciidoc[]

[discrete#es-connectors-ms-sql-client-usage]
===== Usage

Users require the `sysadmin` server role.

To use this connector as a *self-managed connector*, see <<es-build-connector>>
For additional usage operations, see <<es-connectors-usage>>.

[discrete#es-connectors-ms-sql-client-compatability]
===== Compatibility

The following are compatible with Elastic connector frameworks:

* Microsoft SQL Server versions 2017, 2019
* Azure SQL
* Amazon RDS for SQL Server

[discrete#es-connectors-ms-sql-client-configuration]
===== Configuration

[TIP]
====
When using the <<es-build-connector, self-managed connector>> workflow, initially these fields will use the default configuration set in the {connectors-python}/connectors/sources/generic_database.py[connector source code^].
Note that this data source uses the `generic_database.py` connector source code.

Refer to {connectors-python}/connectors/sources/mssql.py[`mssql.py`^] for additional code, specific to this data source.
These configurable fields will be rendered with their respective *labels* in the Kibana UI.
Once connected, users will be able to update these values in Kibana.
====

The following configuration fields are required to set up the connector:

`host`::
The server host address where the Microsoft SQL Server is hosted.
Default value is `127.0.0.1`.
Examples:
+
* `192.158.1.38`
* `demo.instance.demo-region.demo.service.com`

`port`::
The port where the Microsoft SQL Server is hosted. Default value is `9090`.

`username`::
The username of the account for Microsoft SQL Server.

`password`::
The password of the account to be used for the Microsoft SQL Server.

`database`::
Name of the Microsoft SQL Server database.
Examples:
+
* `employee_database`
* `customer_database`

`tables`::
Comma-separated list of tables.
The Microsoft SQL connector will fetch data from all tables present in the configured database, if the value is `*` .
Default value is `*`.
Examples:
+
* `table_1, table_2`
*  `*`
+
[WARNING]
====
This field can be bypassed by advanced sync rules.
====

`fetch_size`::
Rows fetched per request.

`retry_count`::
The number of retry attempts per failed request.

`schema`::
Name of the Microsoft SQL Server schema.
Default value is `dbo`.
+
Examples:
+
* `dbo`
* `custom_schema`

`ssl_enabled`::
SSL verification enablement.
Default value is `False`.

`ssl_ca`::
Content of SSL certificate.
If SSL is disabled, the `ssl_ca` value will be ignored.
+
.*Expand* to see an example certificate
[%collapsible]
====
```
-----BEGIN CERTIFICATE-----
MIID+jCCAuKgAwIBAgIGAJJMzlxLMA0GCSqGSIb3DQEBCwUAMHoxCzAJBgNVBAYT
...
7RhLQyWn2u00L7/9Omw=
-----END CERTIFICATE-----
```
====

`validate_host`::
Host validation enablement.
Default value is `False`.

[discrete#es-connectors-ms-sql-client-docker]
===== Deployment using Docker

include::_connectors-docker-instructions.asciidoc[]

[discrete#es-connectors-ms-sql-client-documents-syncs]
===== Documents and syncs

* Tables with no primary key defined are skipped.
* If the `last_user_update` of `sys.dm_db_index_usage_stats` table is not available for a specific table and database then all data in that table will be synced.

[NOTE]
====
* Files bigger than 10 MB won't be extracted.
* Permissions are not synced.
**All documents** indexed to an Elastic deployment will be visible to **all users with access** to that Elastic Deployment.
====

[discrete#es-connectors-ms-sql-client-sync-rules]
===== Sync rules

<<es-sync-rules-basic,Basic sync rules>> are identical for all connectors and are available by default.
For more information read <<es-sync-rules-types,sync rules>>.

[discrete#es-connectors-ms-sql-client-sync-rules-advanced]
====== Advanced sync rules

This connector supports <<es-sync-rules-advanced,advanced sync rules>> for remote filtering.
These rules cover complex query-and-filter scenarios that cannot be expressed with basic sync rules.
Advanced sync rules are defined through a source-specific DSL JSON snippet.

[NOTE]
====
A <<es-connectors-sync-types-full, full sync>> is required for advanced sync rules to take effect.
====

Here are a few examples of advanced sync rules for this connector.

.*Expand* to see example data
[%collapsible]
====

*`employee` table*

[cols="3*", options="header"]
|===
| emp_id | name | age
| 3 | John | 28
| 10 | Jane | 35
| 14 | Alex | 22
|===

*
*`customer` table*

[cols="3*", options="header"]
|===
| c_id | name | age
| 2 | Elm | 24
| 6 | Pine | 30
| 9 | Oak | 34
|===
====

[discrete#es-connectors-ms-sql-client-sync-rules-advanced-queries]
======= Example: Two queries

These rules fetch all records from both the `employee` and `customer` tables. The data from these tables will be synced separately to Elasticsearch.

[source,js]
----
[
  {
    "tables": [
      "employee"
    ],
    "query": "SELECT * FROM employee"
  },
  {
    "tables": [
      "customer"
    ],
    "query": "SELECT * FROM customer"
  }
]
----
// NOTCONSOLE

[discrete#es-connectors-ms-sql-client-sync-rules-example-one-where]
======= Example: One WHERE query

This rule fetches only the records from the `employee` table where the `emp_id` is greater than 5. Only these filtered records will be synced to Elasticsearch.

[source,js]
----
[
  {
    "tables": ["employee"],
    "query": "SELECT * FROM employee WHERE emp_id > 5"
  }
]
----
// NOTCONSOLE

[discrete#es-connectors-ms-sql-client-sync-rules-example-one-join]
======= Example: One JOIN query

This rule fetches records by performing an INNER JOIN between the `employee` and `customer` tables on the condition that the `emp_id` in `employee` matches the `c_id` in `customer`. The result of this combined data will be synced to Elasticsearch.

[source,js]
----
[
  {
    "tables": ["employee", "customer"],
    "query": "SELECT * FROM employee INNER JOIN customer ON employee.emp_id = customer.c_id"
  }
]
----
// NOTCONSOLE

[WARNING]
====
When using advanced rules, a query can bypass the configuration field `tables`.
This will happen if the query specifies a table that doesn't appear in the configuration.
This can also happen if the configuration specifies `*` to fetch all tables while the advanced sync rule requests for only a subset of tables.
====

[discrete#es-connectors-ms-sql-client-client-operations-testing]
===== End-to-end testing

The connector framework enables operators to run functional tests against a real data source.
Refer to <<es-build-connector-testing>> for more details.

To perform E2E testing for the Microsoft SQL connector, run the following command:

[source,shell]
----
make ftest NAME=mssql
----

For faster tests, add the `DATA_SIZE=small` flag:

[source,shell]
----
make ftest NAME=mssql DATA_SIZE=small
----

[discrete#es-connectors-ms-sql-client-known-issues]
===== Known issues

There are no known issues for this connector.
See <<es-connectors-known-issues>> for any issues affecting all connectors.

[discrete#es-connectors-ms-sql-client-troubleshooting]
===== Troubleshooting

See <<es-connectors-troubleshooting>>.

[discrete#es-connectors-ms-sql-client-security]
===== Security

See <<es-connectors-security>>.




This connector uses the https://github.com/elastic/connectors-python/blob/{branch}/connectors/sources/generic_database.py[generic database connector source code^] (branch _{connectors-branch}_, compatible with Elastic _{minor-version}_).

View {connectors-python}/connectors/sources/mssql.py[additional code specific to this data source^] (branch _{connectors-branch}_, compatible with Elastic _{minor-version}_).


// Closing the collapsible section 
===============

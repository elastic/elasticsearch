[#es-connectors-outlook]
=== Elastic Outlook connector reference
++++
<titleabbrev>Outlook</titleabbrev>
++++
// Attributes used in this file
:service-name: Outlook
:service-name-stub: outlook

The Elastic Outlook connector is built with the Elastic connector framework and is available as a self-managed <<es-build-connector, self-managed connector>>.


// //////// //// //// //// //// //// //// ////////
// //////// NATIVE CONNECTOR REFERENCE (MANAGED SERVICE) ///////
// //////// //// //// //// //// //// //// ////////

[discrete#es-connectors-outlook-native-connector-reference]
==== *Elastic managed connector reference*

.View *Elastic managed connector* reference
[%collapsible]
===============

[discrete#es-connectors-outlook-availability-and-prerequisites]
===== Availability and prerequisites

This connector is available as a *managed connector* (managed service) in Elastic Cloud.

This connector is compatible with Elastic versions *8.13.0+*.

To use this connector, satisfy all <<es-native-connectors,managed connector requirements>>.

[discrete#es-connectors-outlook-create-native-connector]
===== Create a {service-name} connector
include::_connectors-create-native.asciidoc[]

[discrete#es-connectors-outlook-usage]
===== Usage

To use this connector as a managed connector in Elastic Cloud, use the *Connectors* workflow in the Kibana UI.

To create a new {service-name} connector:

. Navigate to *Search -> Connectors* page in the Kibana UI.
. Select the *New Native Connector* button.
. Select the *{service-name}* connector.

For additional operations, see <<es-connectors-usage>>.

[discrete#es-connectors-outlook-connecting-to-outlook]
===== Connecting to Outlook

Outlook connector supports both cloud (Office365 Outlook) and on-premises (Exchange Server) platforms.

[discrete#es-connectors-outlook-connect-to-exchange-server]
====== Connect to Exchange Server

In order to connect to Exchange server, the connector fetches Active Directory users with the help of `ldap3` python library.

[discrete#es-connectors-outlook-connect-to-office365-outlook-outlook-cloud]
====== Connect to Office365 Outlook (Outlook Cloud)

To integrate with the Outlook connector using Azure, follow these steps to create and configure an Azure application:

1. Navigate to the https://portal.azure.com/[Azure Portal] and log in using your credentials.
2. Click on *App registrations* to register a new application.
3. Navigate to the *Overview* tab. Make a note of the `Client ID` and `Tenant ID`.
4. Click on the *Certificates & secrets* tab and create a new client secret. Keep this secret handy.
5. Go to the *API permissions* tab.
   * Click on "Add permissions."
   * Choose "APIs my organization uses."
   * Search for and select "Office 365 Exchange Online."
   * Add the `full_access_as_app` application permission.

You can now use the Client ID, Tenant ID, and Client Secret you've noted to configure the Outlook connector.

[discrete#es-connectors-outlook-configuration]
===== Configuration

Outlook data source (required)::
Dropdown to determine Outlook platform type: `outlook_cloud` or `outlook_server`. Default value is `outlook_cloud`.

Tenant ID::
Required if data source is `outlook_cloud`.
The Tenant ID for the Azure account hosting the Outlook instance.

Client ID::
Required if data source is `outlook_cloud`.
The Client ID to authenticate with Outlook instance.

Client Secret Value::
Required if data source is `outlook_cloud`.
The Client Secret value to authenticate with Outlook instance.

Exchange Server::
Required if data source is `outlook_server`.
IP address to connect with Exchange server. Example: `127.0.0.1`

Active Directory Server::
Required if data source is `outlook_server`.
IP address to fetch users from Exchange Active Directory to fetch data. Example: `127.0.0.1`

Exchange server username::
Required if data source is `outlook_server`.
Username to authenticate with Exchange server.

Exchange server password::
Required if data source is `outlook_server`.
Password to authenticate with Exchange server.

Exchange server domain name::
Required if data source is `outlook_server`.
Domain name for Exchange server users such as `gmail.com` or `exchange.local`.

Enable SSL::
Whether SSL verification will be enabled. Default value is `False`.
*Note:* This configuration is applicable for `Outlook Server` only.

SSL certificate::
Required if ssl is enabled.
Content of SSL certificate. Example certificate:
+
[text]
[source, txt]
----
-----BEGIN CERTIFICATE-----
MIID+jCCAuKgAwIBAgIGAJJMzlxLMA0GCSqGSIb3DQEBCwUAMHoxCzAJBgNVBAYT
...
7RhLQyWn2u00L7/9Omw=
-----END CERTIFICATE-----
----
+
*Note:* This configuration is applicable for `Outlook Server` only.

Document level security::
Toggle to enable <<es-dls, Document level security (DLS)>>.
When enabled:
+
* Full syncs will fetch access control lists for each document and store them in the `_allow_access_control` field.
* Access control syncs fetch users' access control lists and store them in a separate index.

[discrete#es-connectors-outlook-content-extraction]
===== Content Extraction

Refer to <<es-connectors-content-extraction>>.

[discrete#es-connectors-outlook-documents-and-syncs]
===== Documents and syncs

The connector syncs the following objects and entities:

* *Mails*
** *Inbox Mails*
** *Sent Mails*
** *Archive Mails*
** *Junk Mails*
* *Contacts*
* *Calendar Events*
* *Tasks*
* *Attachments*
** *Mail Attachments*
** *Task Attachments*
** *Calendar Attachments*

[NOTE]
====
* Content from files bigger than 10 MB won't be extracted. (Self-managed connectors can use the <<es-connectors-content-extraction-local, self-managed local extraction service>> to handle larger binary files.)
* Permissions are not synced. *All documents* indexed to an Elastic deployment will be visible to *all users with access* to that Elastic Deployment.
====

[discrete#es-connectors-outlook-sync-types]
====== Sync types

<<es-connectors-sync-types-full,Full syncs>> are supported by default for all connectors.

This connector also supports <<es-connectors-sync-types-incremental,incremental syncs>>.

[discrete#es-connectors-outlook-document-level-security]
===== Document level security

Document level security (DLS) enables you to restrict access to documents based on a userâ€™s permissions.
Refer to <<es-connectors-outlook-configuration,configuration>> on this page for how to enable DLS for this connector.

[NOTE]
====
Refer to <<es-dls-e2e-guide, DLS in Search Applications>> to learn how to ingest data from a connector with DLS enabled, when building a search application.
The example uses SharePoint Online as the data source, but the same steps apply to every connector.
====

[discrete#es-connectors-outlook-sync-rules]
===== Sync rules

<<es-sync-rules-basic>> are identical for all connectors and are available by default.

[discrete#es-connectors-outlook-advanced-sync-rules]
===== Advanced Sync Rules

Advanced sync rules are not available for this connector in the present version.

[discrete#es-connectors-outlook-connector-client-operations]
===== Connector Client operations

[discrete#es-connectors-outlook-end-to-end-testing]
====== End-to-end Testing

*Note:* End-to-end testing is not available in the current version of the connector.

[discrete#es-connectors-outlook-known-issues]
====== Known issues

There are currently no known issues for this connector.
Refer to <<es-connectors-known-issues>> for a list of known issues for all connectors.

[discrete#es-connectors-outlook-troubleshooting]
===== Troubleshooting

See <<es-connectors-troubleshooting>>.

[discrete#es-connectors-outlook-security]
===== Security

See <<es-connectors-security>>.

[discrete#es-connectors-outlook-source]
===== Framework and source

This connector is written in Python using the {connectors-python}[Elastic connector framework^].

View the {connectors-python}/connectors/sources/outlook.py[source code for this connector^] (branch _{connectors-branch}_, compatible with Elastic _{minor-version}_).


// Closing the collapsible section 
===============


// //////// //// //// //// //// //// //// ////////
// //////// CONNECTOR CLIENT REFERENCE (SELF-MANAGED) ///////
// //////// //// //// //// //// //// //// ////////

[discrete#es-connectors-outlook-connector-client-reference]
==== *Self-managed connector reference*

.View *self-managed connector* reference
[%collapsible]
===============

[discrete#es-connectors-outlook-client-availability-and-prerequisites]
===== Availability and prerequisites

This connector is available as a self-managed *self-managed connector*. To use this connector, satisfy all <<es-build-connector, self-managed connector prerequisites>>.

[discrete#es-connectors-outlook-create-connector-client]
===== Create a {service-name} connector
include::_connectors-create-client.asciidoc[]

[discrete#es-connectors-outlook-client-usage]
===== Usage

To use this connector as a *self-managed connector*, use the *Outlook* tile from the connectors list OR *Customized connector* workflow.

For additional operations, see <<es-connectors-usage>>.

[discrete#es-connectors-outlook-client-connecting-to-outlook]
===== Connecting to Outlook

Outlook connector supports both cloud (Office365 Outlook) and on-premises (Exchange Server) platforms.

[discrete#es-connectors-outlook-client-connect-to-exchange-server]
====== Connect to Exchange Server

In order to connect to Exchange server, the connector fetches Active Directory users with the help of `ldap3` python library.

[discrete#es-connectors-outlook-client-connect-to-office365-outlook-outlook-cloud]
====== Connect to Office365 Outlook (Outlook Cloud)

To integrate with the Outlook connector using Azure, follow these steps to create and configure an Azure application:

1. Navigate to the https://portal.azure.com/[Azure Portal] and log in using your credentials.
2. Click on *App registrations* to register a new application.
3. Navigate to the *Overview* tab. Make a note of the `Client ID` and `Tenant ID`.
4. Click on the *Certificates & secrets* tab and create a new client secret. Keep this secret handy.
5. Go to the *API permissions* tab.
   * Click on "Add permissions."
   * Choose "APIs my organization uses."
   * Search for and select "Office 365 Exchange Online."
   * Add the `full_access_as_app` application permission.

You can now use the Client ID, Tenant ID, and Client Secret you've noted to configure the Outlook connector.

[discrete#es-connectors-outlook-client-configuration]
===== Configuration

`data_source`::  (required)
Dropdown to determine Outlook platform type: `outlook_cloud` or `outlook_server`. Default value is `outlook_cloud`.

`tenant_id`::  (required if data source is outlook_cloud)
The Tenant ID for the Azure account hosting the Outlook instance.

`client_id`::  (required if data source is outlook_cloud)
The Client ID to authenticate with Outlook instance.

`client_secret`::  (required if data source is outlook_cloud)
The Client Secret value to authenticate with Outlook instance.

`exchange_server`:: (required if data source is outlook_server)
IP address to connect with Exchange server. Example: `127.0.0.1`

`active_directory_server`:: (required if data source is outlook_server)
IP address to fetch users from Exchange Active Directory to fetch data. Example: `127.0.0.1`

`username`:: (required if data source is outlook_server)
Username to authenticate with Exchange server.

`password`:: (required if data source is outlook_server)
Password to authenticate with Exchange server.

`domain`:: (required if data source is outlook_server)
Domain name for Exchange server users such as `gmail.com` or `exchange.local`.

`ssl_enabled`::
Whether SSL verification will be enabled. Default value is `False`.
*Note:* This configuration is applicable for `Outlook Server` only.

`ssl_ca`:: (required if ssl is enabled)
Content of SSL certificate. Example certificate:
+
[text]
[source, txt]
----
-----BEGIN CERTIFICATE-----
MIID+jCCAuKgAwIBAgIGAJJMzlxLMA0GCSqGSIb3DQEBCwUAMHoxCzAJBgNVBAYT
...
7RhLQyWn2u00L7/9Omw=
-----END CERTIFICATE-----
----

`use_text_extraction_service`::
Use <<es-connectors-content-extraction-data-extraction-service,self-hosted content extraction service>>.
Default value is `False`.

`document_level_security`::
Toggle to enable <<es-dls, Document level security (DLS)>>.
When enabled:
+
* Full syncs will fetch access control lists for each document and store them in the `_allow_access_control` field.
* Access control syncs fetch users' access control lists and store them in a separate index.

*Note:* This configuration is applicable for `Outlook Server` only.

[discrete#es-connectors-outlook-client-client-docker]
===== Deployment using Docker

include::_connectors-docker-instructions.asciidoc[]

[discrete#es-connectors-outlook-client-content-extraction]
===== Content Extraction

Refer to <<es-connectors-content-extraction>>.

[discrete#es-connectors-outlook-client-documents-and-syncs]
===== Documents and syncs

The connector syncs the following objects and entities:

* *Mails*
** *Inbox Mails*
** *Sent Mails*
** *Archive Mails*
** *Junk Mails*
* *Contacts*
* *Calendar Events*
* *Tasks*
* *Attachments*
** *Mail Attachments*
** *Task Attachments*
** *Calendar Attachments*

[NOTE]
====
* Content from files bigger than 10 MB won't be extracted by default. You can use the <<es-connectors-content-extraction-local, self-managed local extraction service>> to handle larger binary files.
* Permissions are not synced. *All documents* indexed to an Elastic deployment will be visible to *all users with access* to that Elastic Deployment.
====

[discrete#es-connectors-outlook-client-sync-types]
====== Sync types

<<es-connectors-sync-types-full,Full syncs>> are supported by default for all connectors.

This connector also supports <<es-connectors-sync-types-incremental,incremental syncs>>.

[discrete#es-connectors-outlook-client-document-level-security]
===== Document level security

Document level security (DLS) enables you to restrict access to documents based on a userâ€™s permissions.
Refer to <<es-connectors-outlook-client-configuration,configuration>> on this page for how to enable DLS for this connector.

[NOTE]
====
Refer to <<es-dls-e2e-guide, DLS in Search Applications>> to learn how to ingest data from a connector with DLS enabled, when building a search application.
The example uses SharePoint Online as the data source, but the same steps apply to every connector.
====

[discrete#es-connectors-outlook-client-sync-rules]
===== Sync rules

<<es-sync-rules-basic>> are identical for all connectors and are available by default.

[discrete#es-connectors-outlook-client-advanced-sync-rules]
===== Advanced Sync Rules

Advanced sync rules are not available for this connector in the present version.

[discrete#es-connectors-outlook-client-connector-client-operations]
===== Connector Client operations

[discrete#es-connectors-outlook-client-end-to-end-testing]
====== End-to-end Testing

*Note:* End-to-end testing is not available in the current version of the connector.

[discrete#es-connectors-outlook-client-known-issues]
====== Known issues

There are currently no known issues for this connector.
Refer to <<es-connectors-known-issues>> for a list of known issues for all connectors.

[discrete#es-connectors-outlook-client-troubleshooting]
===== Troubleshooting

See <<es-connectors-troubleshooting>>.

[discrete#es-connectors-outlook-client-security]
===== Security

See <<es-connectors-security>>.

[discrete#es-connectors-outlook-client-source]
===== Framework and source

This connector is included in the {connectors-python}[Elastic connector framework^].

View the {connectors-python}/connectors/sources/outlook.py[source code for this connector^] (branch _{connectors-branch}_, compatible with Elastic _{minor-version}_).


// Closing the collapsible section 
===============

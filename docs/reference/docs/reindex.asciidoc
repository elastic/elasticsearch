[[docs-reindex]]
=== Reindex API
++++
<titleabbrev>Reindex</titleabbrev>
++++

Copies documents from a source to a destination.

The source can be any existing index, alias, or data stream. The destination
must differ from the source. For example, you cannot reindex a data stream into
itself.

[IMPORTANT]
=================================================
Reindex requires <<mapping-source-field,`_source`>> to be enabled for
all documents in the source.

The destination should be configured as wanted before calling `_reindex`.
Reindex does not copy the settings from the source or its associated template.

Mappings, shard counts, replicas, and so on must be configured ahead of time.
=================================================

[source,console]
--------------------------------------------------
POST _reindex
{
  "source": {
    "index": "my-index-000001"
  },
  "dest": {
    "index": "my-new-index-000001"
  }
}
--------------------------------------------------
// TEST[setup:my_index_big]

////

[source,console-result]
--------------------------------------------------
{
  "took" : 147,
  "timed_out": false,
  "created": 120,
  "updated": 0,
  "deleted": 0,
  "batches": 1,
  "version_conflicts": 0,
  "noops": 0,
  "retries": {
    "bulk": 0,
    "search": 0
  },
  "throttled_millis": 0,
  "requests_per_second": -1.0,
  "throttled_until_millis": 0,
  "total": 120,
  "failures" : [ ]
}
--------------------------------------------------
// TESTRESPONSE[s/"took" : 147/"took" : "$body.took"/]

////

[[docs-reindex-api-request]]
==== {api-request-title}

`POST /_reindex`

[[docs-reindex-api-prereqs]]
==== {api-prereq-title}

* If the {es} {security-features} are enabled, you must have the following
security privileges:

** The `read` <<privileges-list-indices,index privilege>> for the source data
stream, index, or alias.

** The `write` index privilege for the destination data stream, index, or index
alias.

** To automatically create a data stream or index with an reindex API request,
you must have the `auto_configure`, `create_index`, or `manage` index
privilege for the destination data stream, index, or alias.

** If reindexing from a remote cluster, the `source.remote.user` must have the
`monitor` <<privileges-list-cluster,cluster privilege>> and the `read` index
privilege for the source data stream, index, or alias.

* If reindexing from a remote cluster, you must explicitly allow the remote host
in the `reindex.remote.whitelist` setting of `elasticsearch.yml`. See
<<reindex-from-remote>>.

* Automatic data stream creation requires a matching index template with data
stream enabled. See <<set-up-a-data-stream>>.

[[docs-reindex-api-desc]]
==== {api-description-title}

// tag::docs-reindex-api-desc-tag[]
Extracts the <<mapping-source-field,document source>> from the source index and indexes the documents into the destination index.
You can copy all documents to the destination index, or reindex a subset of the documents.
// end::docs-reindex-api-desc-tag[]


Just like <<docs-update-by-query,`_update_by_query`>>, `_reindex` gets a
snapshot of the source but its destination must be **different** so
version conflicts are unlikely. The `dest` element can be configured like the
index API to control optimistic concurrency control. Omitting
`version_type` or setting it to `internal` causes Elasticsearch
to blindly dump documents into the destination, overwriting any that happen to have
the same ID.

Setting `version_type` to `external` causes Elasticsearch to preserve the
`version` from the source, create any documents that are missing, and update
any documents that have an older version in the destination than they do
in the source.

Setting `op_type` to `create` causes `_reindex` to only create missing
documents in the destination. All existing documents will cause a version
conflict.

IMPORTANT: Because data streams are <<data-streams-append-only,append-only>>,
any reindex request to a destination data stream must have an `op_type`
of `create`. A reindex can only add new documents to a destination data stream.
It cannot update existing documents in a destination data stream.

By default, version conflicts abort the `_reindex` process.
To continue reindexing if there are conflicts, set the `"conflicts"` request body parameter to `proceed`.
In this case, the response includes a count of the version conflicts that were encountered.
Note that the handling of other error types is unaffected by the `"conflicts"` parameter.
Additionally, if you opt to count version conflicts the operation could attempt to reindex more documents
from the source than `max_docs` until it has successfully indexed `max_docs` documents into the target, or it has gone
through every document in the source query.

[[docs-reindex-task-api]]
===== Running reindex asynchronously

If the request contains `wait_for_completion=false`, {es}
performs some preflight checks, launches the request, and returns a
<<tasks,`task`>> you can use to cancel or get the status of the task.
{es} creates a record of this task as a document at `_tasks/<task_id>`.

[[docs-reindex-from-multiple-sources]]
===== Reindex from multiple sources
If you have many sources to reindex it is generally better to reindex them
one at a time rather than using a glob pattern to pick up multiple sources. That
way you can resume the process if there are any errors by removing the
partially completed source and starting over. It also makes
parallelizing the process fairly simple: split the list of sources to reindex
and run each list in parallel.

One-off bash scripts seem to work nicely for this:

[source,bash]
----------------------------------------------------------------
for index in i1 i2 i3 i4 i5; do
  curl -HContent-Type:application/json -XPOST localhost:9200/_reindex?pretty -d'{
    "source": {
      "index": "'$index'"
    },
    "dest": {
      "index": "'$index'-reindexed"
    }
  }'
done
----------------------------------------------------------------
// NOTCONSOLE

[[docs-reindex-throttle]]
===== Throttling

Set `requests_per_second` to any positive decimal number (`1.4`, `6`,
`1000`, etc.) to throttle the rate at which `_reindex` issues batches of index
operations. Requests are throttled by padding each batch with a wait time.
To disable throttling, set `requests_per_second` to `-1`.

The throttling is done by waiting between batches so that the `scroll` that `_reindex`
uses internally can be given a timeout that takes into account the padding.
The padding time is the difference between the batch size divided by the
`requests_per_second` and the time spent writing. By default the batch size is
`1000`, so if `requests_per_second` is set to `500`:

[source,txt]
--------------------------------------------------
target_time = 1000 / 500 per second = 2 seconds
wait_time = target_time - write_time = 2 seconds - .5 seconds = 1.5 seconds
--------------------------------------------------

Since the batch is issued as a single `_bulk` request, large batch sizes
cause Elasticsearch to create many requests and then wait for a while before
starting the next set. This is "bursty" instead of "smooth".

[[docs-reindex-rethrottle]]
===== Rethrottling

The value of `requests_per_second` can be changed on a running reindex using
the `_rethrottle` API:

[source,console]
--------------------------------------------------
POST _reindex/r1A2WoRbTwKZ516z6NEs5A:36619/_rethrottle?requests_per_second=-1
--------------------------------------------------

The task ID can be found using the <<tasks,tasks API>>.

Just like when setting it on the Reindex API, `requests_per_second`
can be either `-1` to disable throttling or any decimal number
like `1.7` or `12` to throttle to that level. Rethrottling that speeds up the
query takes effect immediately, but rethrottling that slows down the query will
take effect after completing the current batch. This prevents scroll
timeouts.

[[docs-reindex-slice]]
===== Slicing

Reindex supports <<slice-scroll>> to parallelize the reindexing process.
This parallelization can improve efficiency and provide a convenient way to
break the request down into smaller parts.

// tag::remote-reindex-slicing[]
NOTE: Reindexing from remote clusters does not support
<<docs-reindex-manual-slice, manual>> or <<docs-reindex-automatic-slice,
automatic slicing>>.
// end::remote-reindex-slicing[]

[[docs-reindex-manual-slice]]
====== Manual slicing
Slice a reindex request manually by providing a slice id and total number of
slices to each request:

[source,console]
----------------------------------------------------------------
POST _reindex
{
  "source": {
    "index": "my-index-000001",
    "slice": {
      "id": 0,
      "max": 2
    }
  },
  "dest": {
    "index": "my-new-index-000001"
  }
}
POST _reindex
{
  "source": {
    "index": "my-index-000001",
    "slice": {
      "id": 1,
      "max": 2
    }
  },
  "dest": {
    "index": "my-new-index-000001"
  }
}
----------------------------------------------------------------
// TEST[setup:my_index_big]

You can verify this works by:

[source,console]
----------------------------------------------------------------
GET _refresh
POST my-new-index-000001/_search?size=0&filter_path=hits.total
----------------------------------------------------------------
// TEST[continued]

which results in a sensible `total` like this one:

[source,console-result]
----------------------------------------------------------------
{
  "hits": {
    "total" : {
        "value": 120,
        "relation": "eq"
    }
  }
}
----------------------------------------------------------------

[[docs-reindex-automatic-slice]]
====== Automatic slicing

You can also let `_reindex` automatically parallelize using <<slice-scroll>> to
slice on `_id`. Use `slices` to specify the number of slices to use:

[source,console]
----------------------------------------------------------------
POST _reindex?slices=5&refresh
{
  "source": {
    "index": "my-index-000001"
  },
  "dest": {
    "index": "my-new-index-000001"
  }
}
----------------------------------------------------------------
// TEST[setup:my_index_big]

You can also verify this works by:

[source,console]
----------------------------------------------------------------
POST my-new-index-000001/_search?size=0&filter_path=hits.total
----------------------------------------------------------------
// TEST[continued]

which results in a sensible `total` like this one:

[source,console-result]
----------------------------------------------------------------
{
  "hits": {
    "total" : {
        "value": 120,
        "relation": "eq"
    }
  }
}
----------------------------------------------------------------

Setting `slices` to `auto` will let Elasticsearch choose the number of slices to
use. This setting will use one slice per shard, up to a certain limit. If there
are multiple sources, it will choose the number of
slices based on the index or <<data-streams,backing index>> with the smallest
number of shards.

Adding `slices` to `_reindex` just automates the manual process used in the
section above, creating sub-requests which means it has some quirks:

* You can see these requests in the <<docs-reindex-task-api,Tasks APIs>>. These
sub-requests are "child" tasks of the task for the request with `slices`.
* Fetching the status of the task for the request with `slices` only contains
the status of completed slices.
* These sub-requests are individually addressable for things like cancellation
and rethrottling.
* Rethrottling the request with `slices` will rethrottle the unfinished
sub-request proportionally.
* Canceling the request with `slices` will cancel each sub-request.
* Due to the nature of `slices` each sub-request won't get a perfectly even
portion of the documents. All documents will be addressed, but some slices may
be larger than others. Expect larger slices to have a more even distribution.
* Parameters like `requests_per_second` and `max_docs` on a request with
`slices` are distributed proportionally to each sub-request. Combine that with
the point above about distribution being uneven and you should conclude that
using `max_docs` with `slices` might not result in exactly `max_docs` documents
being reindexed.
* Each sub-request gets a slightly different snapshot of the source,
though these are all taken at approximately the same time.

[[docs-reindex-picking-slices]]
====== Picking the number of slices

If slicing automatically, setting `slices` to `auto` will choose a reasonable
number for most indices. If slicing manually or otherwise tuning
automatic slicing, use these guidelines.

Query performance is most efficient when the number of `slices` is equal to the
number of shards in the index. If that number is large (e.g. 500),
choose a lower number as too many `slices` will hurt performance. Setting
`slices` higher than the number of shards generally does not improve efficiency
and adds overhead.

Indexing performance scales linearly across available resources with the
number of slices.

Whether query or indexing performance dominates the runtime depends on the
documents being reindexed and cluster resources.

[[docs-reindex-routing]]
===== Reindex routing

By default if `_reindex` sees a document with routing then the routing is
preserved unless it's changed by the script. You can set `routing` on the
`dest` request to change this:

`keep`::

Sets the routing on the bulk request sent for each match to the routing on
the match. This is the default value.

`discard`::

Sets the routing on the bulk request sent for each match to `null`.

`=<some text>`::

Sets the routing on the bulk request sent for each match to all text after
the `=`.

For example, you can use the following request to copy all documents from
the `source` with the company name `cat` into the `dest`  with
routing set to `cat`.

[source,console]
--------------------------------------------------
POST _reindex
{
  "source": {
    "index": "source",
    "query": {
      "match": {
        "company": "cat"
      }
    }
  },
  "dest": {
    "index": "dest",
    "routing": "=cat"
  }
}
--------------------------------------------------
// TEST[s/^/PUT source\n/]



By default `_reindex` uses scroll batches of 1000. You can change the
batch size with the `size` field in the `source` element:

[source,console]
--------------------------------------------------
POST _reindex
{
  "source": {
    "index": "source",
    "size": 100
  },
  "dest": {
    "index": "dest",
    "routing": "=cat"
  }
}
--------------------------------------------------
// TEST[s/^/PUT source\n/]

[[reindex-with-an-ingest-pipeline]]
===== Reindex with an ingest pipeline

Reindex can also use the <<ingest>> feature by specifying a
`pipeline` like this:

[source,console]
--------------------------------------------------
POST _reindex
{
  "source": {
    "index": "source"
  },
  "dest": {
    "index": "dest",
    "pipeline": "some_ingest_pipeline"
  }
}
--------------------------------------------------
// TEST[s/^/PUT source\n/]

[[docs-reindex-api-query-params]]
==== {api-query-parms-title}

`refresh`::
(Optional, Boolean) If `true`, the request refreshes affected shards to make
this operation visible to search. Defaults to `false`.

`timeout`::
+
--
(Optional, <<time-units, time units>>)
Period each indexing waits for the following operations:

* <<index-creation,Automatic index creation>>
* <<dynamic-mapping,Dynamic mapping>> updates
* <<index-wait-for-active-shards,Waiting for active shards>>

Defaults to `1m` (one minute). This guarantees {es} waits for at least the
timeout before failing. The actual wait time could be longer, particularly when
multiple waits occur.
--

include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=wait_for_active_shards]

`wait_for_completion`::
(Optional, Boolean) If `true`, the request blocks until the operation is complete.
Defaults to `true`.

include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=requests_per_second]

include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=require-alias]

include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=scroll]

include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=slices]

include::{es-repo-dir}/rest-api/common-parms.asciidoc[tag=max_docs]

[[docs-reindex-api-request-body]]
==== {api-request-body-title}

[[conflicts]]
`conflicts`::
(Optional, enum) Set to `proceed` to continue reindexing even if there are conflicts.
Defaults to `abort`.

`max_docs`::
(Optional, integer) The maximum number of documents to reindex. If <<conflicts, conflicts>> is equal to
`proceed`, reindex could attempt to reindex more documents from the source than `max_docs` until it has successfully
indexed `max_docs` documents into the target, or it has gone through every document in the source query.

`source`::
`index`:::
(Required, string) The name of the data stream, index, or alias you are copying
_from_. Also accepts a comma-separated list to reindex from multiple sources.

`query`:::
(Optional, <<query-dsl, query object>>) Specifies the documents to reindex using the Query DSL.

`remote`:::
`host`::::
(Optional, string) The URL for the remote instance of {es} that you want to index _from_.
Required when indexing from remote.
`username`::::
(Optional, string) The username to use for authentication with the remote host.
`password`::::
(Optional, string) The password to use for authentication with the remote host.
`socket_timeout`::::
(Optional, <<time-units, time units>>) The remote socket read timeout. Defaults to 30 seconds.
`connect_timeout`::::
(Optional, <<time-units, time units>>) The remote connection timeout. Defaults to 30 seconds.
`headers`::::
(Optional, object) An object containing the headers of ther request.
`size`:::
{Optional, integer) The number of documents to index per batch.
Use when indexing from remote to ensure that the batches fit within the on-heap buffer,
which defaults to a maximum size of 100 MB.

`slice`:::
`id`::::
(Optional, integer) Slice ID for <<docs-reindex-manual-slice, manual slicing>>.
`max`::::
(Optional, integer) Total number of slices.

`sort`:::
+
--
(Optional, list) A comma-separated list of `<field>:<direction>` pairs to sort by before indexing.
Use in conjunction with `max_docs` to control what documents are reindexed.

deprecated::[7.6, Sort in reindex is deprecated. Sorting in reindex was never guaranteed to index documents in order and prevents further development of reindex such as resilience and performance improvements. If used in combination with `max_docs`&#44; consider using a query filter instead.]
--

`_source`:::
(Optional, string) If `true` reindexes all source fields.
Set to a list to reindex select fields.
Defaults to `true`.

`dest`::
`index`:::
(Required, string) The name of the data stream, index, or index alias you are copying _to_.

`version_type`:::
(Optional, enum) The versioning to use for the indexing operation.
Valid values: `internal`, `external`, `external_gt`, `external_gte`.
See <<index-version-types>> for more information.

`op_type`:::
(Optional, enum) Set to create to only index documents that do not already exist (put if absent).
Valid values: `index`, `create`. Defaults to `index`.
+
IMPORTANT: To reindex to a data stream destination, this argument must be
`create`.

`pipeline`:::
(Optional, string) the name of the <<reindex-with-an-ingest-pipeline,pipeline>> to use.

`script`::
`source`:::
(Optional, string) The script to run to update the document source or metadata when reindexing.
`lang`:::
(Optional, enum) The script language: `painless`, `expression`, `mustache`, `java`.
For more information, see <<modules-scripting>>.


[[docs-reindex-api-response-body]]
==== {api-response-body-title}

`took`::

(integer) The total milliseconds the entire operation took.

`timed_out`::

{Boolean) This flag is set to `true` if any of the requests executed during the
reindex timed out.

`total`::

(integer) The number of documents that were successfully processed.

`updated`::
(integer) The number of documents that were successfully updated,
i.e. a document with same ID already existed prior to reindex updating it.

`created`::

(integer) The number of documents that were successfully created.

`deleted`::

(integer) The number of documents that were successfully deleted.

`batches`::

(integer) The number of scroll responses pulled back by the reindex.

`noops`::

(integer) The number of documents that were ignored because the script used for
the reindex returned a `noop` value for `ctx.op`.

`version_conflicts`::

(integer) The number of version conflicts that reindex hits.

`retries`::

(integer) The number of retries attempted by reindex. `bulk` is the number of bulk
actions retried and `search` is the number of search actions retried.

`throttled_millis`::

(integer) Number of milliseconds the request slept to conform to `requests_per_second`.

`requests_per_second`::

(integer) The number of requests per second effectively executed during the reindex.

`throttled_until_millis`::

(integer) This field should always be equal to zero in a `_reindex` response. It only
has meaning when using the <<docs-reindex-task-api, Task API>>, where it
indicates the next time (in milliseconds since epoch) a throttled request will be
executed again in order to conform to `requests_per_second`.

`failures`::

(array) Array of failures if there were any unrecoverable errors during the process. If
this is non-empty then the request aborted because of those failures. Reindex
is implemented using batches and any failure causes the entire process to abort
but all failures in the current batch are collected into the array. You can use
the `conflicts` option to prevent reindex from aborting on version conflicts.

[[docs-reindex-api-example]]
==== {api-examples-title}

[[docs-reindex-select-query]]
===== Reindex select documents with a query

You can limit the documents by adding a query to the `source`.
For example, the following request only copies documents with a `user.id` of `kimchy` into `my-new-index-000001`:

[source,console]
--------------------------------------------------
POST _reindex
{
  "source": {
    "index": "my-index-000001",
    "query": {
      "term": {
        "user.id": "kimchy"
      }
    }
  },
  "dest": {
    "index": "my-new-index-000001"
  }
}
--------------------------------------------------
// TEST[setup:my_index]

[[docs-reindex-select-max-docs]]
===== Reindex select documents with `max_docs`

You can limit the number of processed documents by setting `max_docs`.
For example, this request copies a single document from `my-index-000001` to
`my-new-index-000001`:

[source,console]
--------------------------------------------------
POST _reindex
{
  "max_docs": 1,
  "source": {
    "index": "my-index-000001"
  },
  "dest": {
    "index": "my-new-index-000001"
  }
}
--------------------------------------------------
// TEST[setup:my_index]

[[docs-reindex-multiple-sources]]
===== Reindex from multiple sources

The `index` attribute in `source` can be a list, allowing you to copy from lots
of sources in one request. This will copy documents from the
`my-index-000001` and `my-index-000002` indices:

[source,console]
--------------------------------------------------
POST _reindex
{
  "source": {
    "index": ["my-index-000001", "my-index-000002"]
  },
  "dest": {
    "index": "my-new-index-000002"
  }
}
--------------------------------------------------
// TEST[setup:my_index]
// TEST[s/^/PUT my-index-000002\/_doc\/post1?refresh\n{"test": "foo"}\n/]

NOTE: The Reindex API makes no effort to handle ID collisions so the last
document written will "win" but the order isn't usually predictable so it is
not a good idea to rely on this behavior. Instead, make sure that IDs are unique
using a script.

[[docs-reindex-filter-source]]
===== Reindex select fields with a source filter

You can use source filtering to reindex a subset of the fields in the original documents.
For example, the following request only reindexes the `user.id` and `_doc` fields of each document:

[source,console]
--------------------------------------------------
POST _reindex
{
  "source": {
    "index": "my-index-000001",
    "_source": ["user.id", "_doc"]
  },
  "dest": {
    "index": "my-new-index-000001"
  }
}
--------------------------------------------------
// TEST[setup:my_index]

[[docs-reindex-change-name]]
===== Reindex to change the name of a field

`_reindex` can be used to build a copy of an index with renamed fields. Say you
create an index containing documents that look like this:

[source,console]
--------------------------------------------------
POST my-index-000001/_doc/1?refresh
{
  "text": "words words",
  "flag": "foo"
}
--------------------------------------------------

but you don't like the name `flag` and want to replace it with `tag`.
`_reindex` can create the other index for you:

[source,console]
--------------------------------------------------
POST _reindex
{
  "source": {
    "index": "my-index-000001"
  },
  "dest": {
    "index": "my-new-index-000001"
  },
  "script": {
    "source": "ctx._source.tag = ctx._source.remove(\"flag\")"
  }
}
--------------------------------------------------
// TEST[continued]

Now you can get the new document:

[source,console]
--------------------------------------------------
GET my-new-index-000001/_doc/1
--------------------------------------------------
// TEST[continued]

which will return:

[source,console-result]
--------------------------------------------------
{
  "found": true,
  "_id": "1",
  "_index": "my-new-index-000001",
  "_version": 1,
  "_seq_no": 44,
  "_primary_term": 1,
  "_source": {
    "text": "words words",
    "tag": "foo"
  }
}
--------------------------------------------------
// TESTRESPONSE[s/"_seq_no": \d+/"_seq_no" : $body._seq_no/ s/"_primary_term": 1/"_primary_term" : $body._primary_term/]

[[docs-reindex-daily-indices]]
===== Reindex daily indices

You can use `_reindex` in combination with <<modules-scripting-painless, Painless>> to reindex
daily indices to apply a new template to the existing documents.

Assuming you have indices that contain documents like:

[source,console]
----------------------------------------------------------------
PUT metricbeat-2016.05.30/_doc/1?refresh
{"system.cpu.idle.pct": 0.908}
PUT metricbeat-2016.05.31/_doc/1?refresh
{"system.cpu.idle.pct": 0.105}
----------------------------------------------------------------

The new template for the `metricbeat-*` indices is already loaded into Elasticsearch,
but it applies only to the newly created indices. Painless can be used to reindex
the existing documents and apply the new template.

The script below extracts the date from the index name and creates a new index
with `-1` appended. All data from `metricbeat-2016.05.31` will be reindexed
into `metricbeat-2016.05.31-1`.

[source,console]
----------------------------------------------------------------
POST _reindex
{
  "source": {
    "index": "metricbeat-*"
  },
  "dest": {
    "index": "metricbeat"
  },
  "script": {
    "lang": "painless",
    "source": "ctx._index = 'metricbeat-' + (ctx._index.substring('metricbeat-'.length(), ctx._index.length())) + '-1'"
  }
}
----------------------------------------------------------------
// TEST[continued]

All documents from the previous metricbeat indices can now be found in the `*-1` indices.

[source,console]
----------------------------------------------------------------
GET metricbeat-2016.05.30-1/_doc/1
GET metricbeat-2016.05.31-1/_doc/1
----------------------------------------------------------------
// TEST[continued]

The previous method can also be used in conjunction with <<docs-reindex-change-name, changing a field name>>
to load only the existing data into the new index and rename any fields if needed.

[[docs-reindex-api-subset]]
===== Extract a random subset of the source

`_reindex` can be used to extract a random subset of the source for testing:

[source,console]
----------------------------------------------------------------
POST _reindex
{
  "max_docs": 10,
  "source": {
    "index": "my-index-000001",
    "query": {
      "function_score" : {
        "random_score" : {},
        "min_score" : 0.9    <1>
      }
    }
  },
  "dest": {
    "index": "my-new-index-000001"
  }
}
----------------------------------------------------------------
// TEST[setup:my_index_big]

<1> You may need to adjust the `min_score` depending on the relative amount of
data extracted from source.

[[reindex-scripts]]
===== Modify documents during reindexing

Like `_update_by_query`, `_reindex` supports a script that modifies the
document. Unlike `_update_by_query`, the script is allowed to modify the
document's metadata. This example bumps the version of the source document:

[source,console]
--------------------------------------------------
POST _reindex
{
  "source": {
    "index": "my-index-000001"
  },
  "dest": {
    "index": "my-new-index-000001",
    "version_type": "external"
  },
  "script": {
    "source": "if (ctx._source.foo == 'bar') {ctx._version++; ctx._source.remove('foo')}",
    "lang": "painless"
  }
}
--------------------------------------------------
// TEST[setup:my_index]

Just as in `_update_by_query`, you can set `ctx.op` to change the
operation that is executed on the destination:

`noop`::

Set `ctx.op = "noop"` if your script decides that the document doesn't have
to be indexed in the destination. This no operation will be reported
in the `noop` counter in the <<docs-reindex-api-response-body, response body>>.

`delete`::

Set `ctx.op = "delete"` if your script decides that the document must be
 deleted from the destination. The deletion will be reported in the
 `deleted` counter in the <<docs-reindex-api-response-body, response body>>.

Setting `ctx.op` to anything else will return an error, as will setting any
other field in `ctx`.

Think of the possibilities! Just be careful; you are able to
change:

 * `_id`
 * `_index`
 * `_version`
 * `_routing`

Setting `_version` to `null` or clearing it from the `ctx` map is just like not
sending the version in an indexing request; it will cause the document to be
overwritten in the destination regardless of the version on the target or the
version type you use in the `_reindex` request.

[[reindex-from-remote]]
==== Reindex from remote

Reindex supports reindexing from a remote Elasticsearch cluster:

[source,console]
--------------------------------------------------
POST _reindex
{
  "source": {
    "remote": {
      "host": "http://otherhost:9200",
      "username": "user",
      "password": "pass"
    },
    "index": "my-index-000001",
    "query": {
      "match": {
        "test": "data"
      }
    }
  },
  "dest": {
    "index": "my-new-index-000001"
  }
}
--------------------------------------------------
// TEST[setup:host]
// TEST[s/^/PUT my-index-000001\n/]
// TEST[s/otherhost:9200",/\${host}",/]
// TEST[s/"username": "user",/"username": "test_admin",/]
// TEST[s/"password": "pass"/"password": "x-pack-test-password"/]

The `host` parameter must contain a scheme, host, port (e.g.
`https://otherhost:9200`), and optional path (e.g. `https://otherhost:9200/proxy`).
The `username` and `password` parameters are optional, and when they are present `_reindex`
will connect to the remote Elasticsearch node using basic auth. Be sure to use `https` when
using basic auth or the password will be sent in plain text.
There are a range of <<reindex-ssl,settings>> available to configure the behaviour of the
 `https` connection.

When using {ecloud}, it is also possible to authenticate against the remote cluster
through the use of a valid API key:

[source,console]
----
POST _reindex
{
  "source": {
    "remote": {
      "host": "http://otherhost:9200",
      "headers": {
        "Authorization": "ApiKey API_KEY_VALUE"
      }
    },
    "index": "my-index-000001",
    "query": {
      "match": {
        "test": "data"
      }
    }
  },
  "dest": {
    "index": "my-new-index-000001"
  }
}
----
// TEST[setup:host]
// TEST[s/^/PUT my-index-000001\n/]
// TEST[s/otherhost:9200",/\${host}",/]
// TEST[s/"headers": \{[^}]*\}/"username": "test_admin", "password": "x-pack-test-password"/]

Remote hosts have to be explicitly allowed in `elasticsearch.yml` using the
`reindex.remote.whitelist` property. It can be set to a comma delimited list
of allowed remote `host` and `port` combinations. Scheme is
ignored, only the host and port are used. For example:


[source,yaml]
--------------------------------------------------
reindex.remote.whitelist: "otherhost:9200, another:9200, 127.0.10.*:9200, localhost:*"
--------------------------------------------------

The list of allowed hosts must be configured on any nodes that will coordinate the reindex.

This feature should work with remote clusters of any version of Elasticsearch
you are likely to find. This should allow you to upgrade from any version of
Elasticsearch to the current version by reindexing from a cluster of the old
version.

WARNING: {es} does not support forward compatibility across major versions. For
example, you cannot reindex from a 7.x cluster into a 6.x cluster.

To enable queries sent to older versions of Elasticsearch the `query` parameter
is sent directly to the remote host without validation or modification.

include::{es-ref-dir}/docs/reindex.asciidoc[tag=remote-reindex-slicing]

Reindexing from a remote server uses an on-heap buffer that defaults to a
maximum size of 100mb. If the remote index includes very large documents you'll
need to use a smaller batch size. The example below sets the batch size to `10`
which is very, very small.

[source,console]
--------------------------------------------------
POST _reindex
{
  "source": {
    "remote": {
      "host": "http://otherhost:9200",
      ...
    },
    "index": "source",
    "size": 10,
    "query": {
      "match": {
        "test": "data"
      }
    }
  },
  "dest": {
    "index": "dest"
  }
}
--------------------------------------------------
// TEST[setup:host]
// TEST[s/^/PUT source\n/]
// TEST[s/otherhost:9200/\${host}/]
// TEST[s/\.\.\./"username": "test_admin", "password": "x-pack-test-password"/]

It is also possible to set the socket read timeout on the remote connection
with the `socket_timeout` field and the connection timeout with the
`connect_timeout` field. Both default to 30 seconds. This example
sets the socket read timeout to one minute and the connection timeout to 10
seconds:

[source,console]
--------------------------------------------------
POST _reindex
{
  "source": {
    "remote": {
      "host": "http://otherhost:9200",
      ...,
      "socket_timeout": "1m",
      "connect_timeout": "10s"
    },
    "index": "source",
    "query": {
      "match": {
        "test": "data"
      }
    }
  },
  "dest": {
    "index": "dest"
  }
}
--------------------------------------------------
// TEST[setup:host]
// TEST[s/^/PUT source\n/]
// TEST[s/otherhost:9200/\${host}/]
// TEST[s/\.\.\.,/"username": "test_admin", "password": "x-pack-test-password",/]

[[reindex-ssl]]
===== Configuring SSL parameters

Reindex from remote supports configurable SSL settings. These must be
specified in the `elasticsearch.yml` file, with the exception of the
secure settings, which you add in the Elasticsearch keystore.
It is not possible to configure SSL in the body of the `_reindex` request.

The following settings are supported:

`reindex.ssl.certificate_authorities`::
List of paths to PEM encoded certificate files that should be trusted.
You cannot specify both `reindex.ssl.certificate_authorities` and
`reindex.ssl.truststore.path`.

`reindex.ssl.truststore.path`::
The path to the Java Keystore file that contains the certificates to trust.
This keystore can be in "JKS" or "PKCS#12" format.
You cannot specify both `reindex.ssl.certificate_authorities` and
`reindex.ssl.truststore.path`.

`reindex.ssl.truststore.password`::
The password to the truststore (`reindex.ssl.truststore.path`).
deprecated:[7.17.0] Prefer `reindex.ssl.truststore.secure_password` instead.
This setting cannot be used with `reindex.ssl.truststore.secure_password`.

`reindex.ssl.truststore.secure_password` (<<secure-settings,Secure>>)::
The password to the truststore (`reindex.ssl.truststore.path`).
This setting cannot be used with `reindex.ssl.truststore.password`.

`reindex.ssl.truststore.type`::
The type of the truststore (`reindex.ssl.truststore.path`).
Must be either `jks` or `PKCS12`. If the truststore path ends in ".p12", ".pfx"
or "pkcs12", this setting defaults to `PKCS12`. Otherwise, it defaults to `jks`.

`reindex.ssl.verification_mode`::
Indicates the type of verification to protect against man in the middle attacks
and certificate forgery.
One of `full` (verify the hostname and the certificate path), `certificate`
(verify the certificate path, but not the hostname) or `none` (perform no
verification - this is strongly discouraged in production environments).
Defaults to `full`.

`reindex.ssl.certificate`::
Specifies the path to the PEM encoded certificate (or certificate chain) to be
used for HTTP client authentication (if required by the remote cluster)
This setting requires that `reindex.ssl.key` also be set.
You cannot specify both `reindex.ssl.certificate` and `reindex.ssl.keystore.path`.

`reindex.ssl.key`::
Specifies the path to the PEM encoded private key associated with the
certificate used for client authentication (`reindex.ssl.certificate`).
You cannot specify both `reindex.ssl.key` and `reindex.ssl.keystore.path`.

`reindex.ssl.key_passphrase`::
Specifies the passphrase to decrypt the PEM encoded private key
(`reindex.ssl.key`) if it is encrypted.
deprecated:[7.17.0] Prefer `reindex.ssl.secure_key_passphrase` instead.
Cannot be used with `reindex.ssl.secure_key_passphrase`.

`reindex.ssl.secure_key_passphrase` (<<secure-settings,Secure>>)::
Specifies the passphrase to decrypt the PEM encoded private key
(`reindex.ssl.key`) if it is encrypted.
Cannot be used with `reindex.ssl.key_passphrase`.

`reindex.ssl.keystore.path`::
Specifies the path to the keystore that contains a private key and certificate
to be used for HTTP client authentication (if required by the remote cluster).
This keystore can be in "JKS" or "PKCS#12" format.
You cannot specify both `reindex.ssl.key` and `reindex.ssl.keystore.path`.

`reindex.ssl.keystore.type`::
The type of the keystore (`reindex.ssl.keystore.path`). Must be either `jks` or `PKCS12`.
If the keystore path ends in ".p12", ".pfx" or "pkcs12", this setting defaults
to `PKCS12`. Otherwise, it defaults to `jks`.

`reindex.ssl.keystore.password`::
The password to the keystore (`reindex.ssl.keystore.path`).
deprecated:[7.17.0] Prefer `reindex.ssl.keystore.secure_password` instead.
This setting cannot be used with `reindex.ssl.keystore.secure_password`.

`reindex.ssl.keystore.secure_password` (<<secure-settings,Secure>>)::
The password to the keystore (`reindex.ssl.keystore.path`).
This setting cannot be used with `reindex.ssl.keystore.password`.

`reindex.ssl.keystore.key_password`::
The password for the key in the keystore (`reindex.ssl.keystore.path`).
Defaults to the keystore password.
deprecated:[7.17.0] Prefer `reindex.ssl.keystore.secure_key_password` instead.
This setting cannot be used with `reindex.ssl.keystore.secure_key_password`.

`reindex.ssl.keystore.secure_key_password` (<<secure-settings,Secure>>)::
The password for the key in the keystore (`reindex.ssl.keystore.path`).
Defaults to the keystore password. This setting cannot be used with
`reindex.ssl.keystore.key_password`.

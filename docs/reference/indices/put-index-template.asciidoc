[[indices-put-template]]
=== Create or update index template API
++++
<titleabbrev>Create or update index template</titleabbrev>
++++

Creates or updates an index template. Index templates define
<<index-modules-settings,settings>>, <<mapping,mappings>>, and <<aliases,aliases>>
that can be applied automatically to new indices.

[source,console]
--------------------------------------------------
PUT /_index_template/template_1
{
  "index_patterns" : ["te*"],
  "priority" : 1,
  "template": {
    "settings" : {
      "number_of_shards" : 2
    }
  }
}
--------------------------------------------------
// TESTSETUP

//////////////////////////

[source,console]
--------------------------------------------------
DELETE _index_template/template_*
--------------------------------------------------
// TEARDOWN

//////////////////////////

[[put-index-template-api-request]]
==== {api-request-title}

`PUT /_index_template/<index-template>`

[[put-index-template-api-prereqs]]
==== {api-prereq-title}

* If the {es} {security-features} are enabled, you must have the
`manage_index_templates` or `manage` <<privileges-list-cluster,cluster
privilege>> to use this API.

[[put-index-template-api-desc]]
==== {api-description-title}

{es} applies templates to new indices based on an
wildcard pattern that matches the index name.

Index templates are applied during data stream or index creation.
For data streams, these settings and mappings are applied when the stream's backing indices are created.

Settings and mappings specified in a <<indices-create-index, create index>>
request override any settings or mappings specified in an index template.

Changes to index templates do not affect
existing indices, including the existing backing indices of a data stream.

===== Comments in index templates
You can use C-style /* */ block comments in index templates. You can include comments anywhere in
the request body, except before the opening curly bracket.

[[put-index-template-api-path-params]]
==== {api-path-parms-title}

`<index-template>`::
(Required, string)
Name of the index template to create.


[[put-index-template-api-query-params]]
==== {api-query-parms-title}

`create`::
(Optional, Boolean)
If `true`, this request cannot replace or update existing index templates. Defaults to `false`.

include::{docdir}/rest-api/common-parms.asciidoc[tag=master-timeout]

[role="child_attributes"]
[[put-index-template-api-request-body]]
==== {api-request-body-title}

`composed_of`::
(Optional, array of strings)
An ordered list of component template names. Component templates are merged in the order
specified, meaning that the last component template specified has the highest precedence. See
<<multiple-component-templates,Composing multiple component templates>> for an example.

// tag::index-template-api-body[]
`data_stream`::
(Optional, object)
If this object is included, the template is used to create data streams and
their backing indices. Supports an empty object.
+
Data streams require a matching index template with a `data_stream` object.
See <<create-index-template,create an index template>>.
+
.Properties of `data_stream`
[%collapsible%open]
====
`allow_custom_routing`::
(Optional, Boolean) If `true`, the data stream supports
<<mapping-routing-field,custom routing>>. Defaults to `false`.

`hidden`::
(Optional, Boolean) If `true`, the data stream is <<multi-hidden,hidden>>. Defaults to
`false`.

`index_mode`::
(Optional, string) Type of data stream to create. Valid values are `null`
(regular data stream) and `time_series` (<<tsds,time series data stream>>).
+
If `time_series`, each backing index has an `index.mode` index setting of
`time_series`.
====

`index_patterns`::
(Required, array of strings)
Array of wildcard (`*`) expressions
used to match the names of data streams and indices during creation.
+
{es} includes several built-in index templates. To avoid naming collisions with
these templates, see <<avoid-index-pattern-collisions>>.

`_meta`::
(Optional, object)
Optional user metadata about the index template. May have any contents.
This map is not automatically generated by {es}.

`priority`::
(Optional, integer)
Priority to determine index template precedence when a new data stream or index is created. The index template with
the highest priority is chosen. If no priority is specified the template is treated as though it is
of priority 0 (lowest priority).
This number is not automatically generated by {es}.

`template`::
(Optional, object)
Template to be applied. It may optionally include an `aliases`, `mappings`, or
`settings` configuration.
+
.Properties of `template`
[%collapsible%open]
====
`aliases`::
(Optional, object of objects) Aliases to add.
+
// tag::template-ds-alias[]
If the index template includes a `data_stream` object, these are data stream
aliases. Otherwise, these are index aliases. Data stream aliases ignore the
`index_routing`, `routing`, and `search_routing` options.
// end::template-ds-alias[]
+
include::{es-repo-dir}/indices/create-index.asciidoc[tag=aliases-props]

include::{docdir}/rest-api/common-parms.asciidoc[tag=mappings]

include::{docdir}/rest-api/common-parms.asciidoc[tag=settings]
====

`version`::
(Optional, integer)
Version number used to manage index templates externally.
This number is not automatically generated by {es}.

`deprecated`::
(Optional, boolean)
Marks this index template as deprecated.
When creating or updating a non-deprecated index template that uses deprecated components,
{es} will emit a deprecation warning.
// end::index-template-api-body[]

[[put-index-template-api-example]]
==== {api-examples-title}

===== Index template with index aliases

You can include <<aliases,index aliases>> in an index template.

[source,console]
--------------------------------------------------
PUT _index_template/template_1
{
  "index_patterns" : ["te*"],
  "template": {
    "settings" : {
        "number_of_shards" : 1
    },
    "aliases" : {
        "alias1" : {},
        "alias2" : {
            "filter" : {
                "term" : {"user.id" : "kimchy" }
            },
            "routing" : "shard-1"
        },
        "{index}-alias" : {} <1>
    }
  }
}
--------------------------------------------------
<1> the `{index}` placeholder in the alias name will be replaced with the
actual index name that the template gets applied to, during index creation.


[[multiple-templates]]
===== Multiple matching templates

If multiple index templates match the name of a new index or data stream,
the template with the highest priority is used. For example:

[source,console]
--------------------------------------------------
PUT /_index_template/template_1
{
  "index_patterns" : ["t*"],
  "priority" : 0,
  "template": {
    "settings" : {
      "number_of_shards" : 1,
      "number_of_replicas": 0
    },
    "mappings" : {
      "_source" : { "enabled" : false }
    }
  }
}

PUT /_index_template/template_2
{
  "index_patterns" : ["te*"],
  "priority" : 1,
  "template": {
    "settings" : {
      "number_of_shards" : 2
    },
    "mappings" : {
      "_source" : { "enabled" : true }
    }
  }
}
--------------------------------------------------

For indices that start with `te*`, `_source` will enabled, and the index will have two primary
shards and one replica, because only `template_2` will be applied.

NOTE: Multiple templates with overlapping index patterns at the same priority are not allowed, and
an error will be thrown when attempting to create a template matching an existing index template at
identical priorities.


[[versioning-templates]]
===== Template versioning

You can use the `version` parameter to add a version number to an index template.
External systems can use these version numbers to simplify template management.

The `version` parameter is optional and not automatically generated or used by {es}.

To unset a `version`, replace the template without specifying one.

[source,console]
--------------------------------------------------
PUT /_index_template/template_1
{
  "index_patterns" : ["foo", "bar"],
  "priority" : 0,
  "template": {
    "settings" : {
        "number_of_shards" : 1
    }
  },
  "version": 123
}
--------------------------------------------------

To check the `version`, you can use the <<indices-get-template, get index template>> API.

[[template-metadata]]
===== Template metadata

You can use the `_meta` parameter to add arbitrary metadata to an index template.
This user-defined object is stored in the cluster state,
so keeping it short is preferable.

The `_meta` parameter is optional and not automatically generated or used by {es}.

To unset `_meta`, replace the template without specifying one.

[source,console]
--------------------------------------------------
PUT /_index_template/template_1
{
  "index_patterns": ["foo", "bar"],
  "template": {
    "settings" : {
        "number_of_shards" : 3
    }
  },
  "_meta": {
    "description": "set number of shards to three",
    "serialization": {
      "class": "MyIndexTemplate",
      "id": 17
    }
  }
}
--------------------------------------------------

To check the `_meta`, you can use the <<indices-get-template, get index template>> API.

[[data-stream-definition]]
===== Data stream definition

To use an index template for data streams, the template must include a
`data_stream` object. See <<create-index-template,create an index template>>.

[source,console]
--------------------------------------------------
PUT /_index_template/template_1
{
  "index_patterns": ["logs-*"],
  "data_stream": { }
}
--------------------------------------------------

[[multiple-component-templates]]
===== Composing aliases, mappings, and settings

When multiple component templates are specified in the `composed_of` field for an index template,
they are merged in the order specified, meaning that later component templates override earlier
component templates. Any mappings, settings, or aliases from the parent index template are merged
in next. Finally, any configuration on the index request itself is merged.

In this example, the order of the two component templates changes the number of shards for an
index:

[source,console]
--------------------------------------------------
PUT /_component_template/template_with_2_shards
{
  "template": {
    "settings": {
      "index.number_of_shards": 2
    }
  }
}

PUT /_component_template/template_with_3_shards
{
  "template": {
    "settings": {
      "index.number_of_shards": 3
    }
  }
}

PUT /_index_template/template_1
{
  "index_patterns": ["t*"],
  "composed_of": ["template_with_2_shards", "template_with_3_shards"]
}
--------------------------------------------------

In this case, an index matching `t*` will have three primary shards. If the order of composed
templates were reversed, the index would have two primary shards.

Mapping definitions are merged recursively, which means that later mapping components can
introduce new field mappings and update the mapping configuration. If a field mapping is
already contained in an earlier component, its definition will be completely overwritten
by the later one.

This recursive merging strategy applies not only to field mappings, but also root options like
`dynamic_templates` and `meta`. If an earlier component contains a `dynamic_templates` block,
then by default new `dynamic_templates` entries are appended onto the end. If an entry already
exists with the same key, then it is overwritten by the new definition.

[[geo-point]]
=== Geopoint field type
++++
<titleabbrev>Geopoint</titleabbrev>
++++

Fields of type `geo_point` accept latitude-longitude pairs, which can be used:

* to find geopoints within a <<query-dsl-geo-bounding-box-query,bounding box>>,
  within a certain <<query-dsl-geo-distance-query,distance>> of a central point,
  or within a <<query-dsl-geo-shape-query,`geo_shape` query>> (for example, points in a polygon).
* to aggregate documents by <<search-aggregations-bucket-geodistance-aggregation,distance>> from a central point.
* to aggregate documents by geographic grids: either
  <<search-aggregations-bucket-geohashgrid-aggregation,`geo_hash`>>,
  <<search-aggregations-bucket-geotilegrid-aggregation,`geo_tile`>> or
  <<search-aggregations-bucket-geohexgrid-aggregation,`geo_hex`>>.
* to aggregate geopoints into a track using the metrics aggregation
  <<search-aggregations-metrics-geo-line,`geo_line`>>.
* to integrate distance into a document's <<query-dsl-function-score-query,relevance score>>.
* to <<geo-sorting,sort>> documents by distance.

As with <<geo-shape, geo_shape>> and <<point, point>>, `geo_point` can be specified in http://geojson.org[GeoJSON]
and https://docs.opengeospatial.org/is/12-063r5/12-063r5.html[Well-Known Text] formats.
However, there are a number of additional formats that are supported for convenience and historical reasons.
In total there are six ways that a geopoint may be specified, as demonstrated below:

[source,console]
--------------------------------------------------
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_point"
      }
    }
  }
}

PUT my-index-000001/_doc/1
{
  "text": "Geopoint as an object using GeoJSON format",
  "location": { <1>
    "type": "Point",
    "coordinates": [-71.34, 41.12]
  }
}

PUT my-index-000001/_doc/2
{
  "text": "Geopoint as a WKT POINT primitive",
  "location" : "POINT (-71.34 41.12)" <2>
}

PUT my-index-000001/_doc/3
{
  "text": "Geopoint as an object with 'lat' and 'lon' keys",
  "location": { <3>
    "lat": 41.12,
    "lon": -71.34
  }
}

PUT my-index-000001/_doc/4
{
  "text": "Geopoint as an array",
  "location": [ -71.34, 41.12 ] <4>
}

PUT my-index-000001/_doc/5
{
  "text": "Geopoint as a string",
  "location": "41.12,-71.34" <5>
}

PUT my-index-000001/_doc/6
{
  "text": "Geopoint as a geohash",
  "location": "drm3btev3e86" <6>
}

GET my-index-000001/_search
{
  "query": {
    "geo_bounding_box": { <7>
      "location": {
        "top_left": {
          "lat": 42,
          "lon": -72
        },
        "bottom_right": {
          "lat": 40,
          "lon": -74
        }
      }
    }
  }
}
--------------------------------------------------

<1> Geopoint expressed as an object, in https://geojson.org/[GeoJSON] format, with `type` and `coordinates` keys.
<2> Geopoint expressed as a https://docs.opengeospatial.org/is/12-063r5/12-063r5.html[Well-Known Text]
POINT with the format: `"POINT(lon lat)"`
<3> Geopoint expressed as an object, with `lat` and `lon` keys.
<4> Geopoint expressed as an array with the format: [ `lon`, `lat`]
<5> Geopoint expressed as a string with the format: `"lat,lon"`.
<6> Geopoint expressed as a geohash.
<7> A geo-bounding box query which finds all geopoints that fall inside the box.

[IMPORTANT]
.Geopoints expressed as an array or string
==================================================

Please note that string geopoints are ordered as `lat,lon`, while array
geopoints, GeoJSON and WKT are ordered as the reverse: `lon,lat`.

The reasons for this are historical. Geographers traditionally write `latitude`
before `longitude`, while recent formats specified for geographic data like
https://geojson.org/[GeoJSON] and https://docs.opengeospatial.org/is/12-063r5/12-063r5.html[Well-Known Text]
order `longitude` before `latitude` (easting before northing) in order to match
the mathematical convention of ordering `x` before `y`.

==================================================

[NOTE]
A point can be expressed as a {wikipedia}/Geohash[geohash].
Geohashes are {wikipedia}/Base32[base32] encoded strings of
the bits of the latitude and longitude interleaved. Each character in a geohash
adds additional 5 bits to the precision. So the longer the hash, the more
precise it is. For the indexing purposed geohashs are translated into
latitude-longitude pairs. During this process only first 12 characters are
used, so specifying more than 12 characters in a geohash doesn't increase the
precision. The 12 characters provide 60 bits, which should reduce a possible
error to less than 2cm.

[[geo-point-params]]
==== Parameters for `geo_point` fields

The following parameters are accepted by `geo_point` fields:

[horizontal]

<<ignore-malformed,`ignore_malformed`>>::

    If `true`, malformed geopoints are ignored. If `false` (default),
    malformed geopoints throw an exception and reject the whole document.
    A geopoint is considered malformed if its latitude is outside the range
    -90 <= latitude <= 90, or if its longitude is outside the range -180 <= longitude <= 180.
    Note that this cannot be set if the `script` parameter is used.

`ignore_z_value`::

    If `true` (default) three dimension points will be accepted (stored in source)
    but only latitude and longitude values will be indexed; the third dimension is
    ignored. If `false`, geopoints containing any more than latitude and longitude
    (two dimensions) values throw an exception and reject the whole document. Note
    that this cannot be set if the `script` parameter is used.

<<mapping-index,`index`>>::

    Should the field be quickly searchable? Accepts `true` (default) and
    `false`. Fields that only have <<doc-values,`doc_values`>>
    enabled can still be queried, albeit slower.

<<null-value,`null_value`>>::

    Accepts an geopoint value which is substituted for any explicit `null` values.
    Defaults to `null`, which means the field is treated as missing. Note that this
    cannot be set if the `script` parameter is used.

`on_script_error`::

    Defines what to do if the script defined by the `script` parameter
    throws an error at indexing time. Accepts `fail` (default), which
    will cause the entire document to be rejected, and `continue`, which
    will register the field in the document's
    <<mapping-ignored-field,`_ignored`>> metadata field and continue
    indexing. This parameter can only be set if the `script` field is
    also set.

`script`::

    If this parameter is set, then the field will index values generated
    by this script, rather than reading the values directly from the
    source. If a value is set for this field on the input document, then
    the document will be rejected with an error.
    Scripts are in the same format as their
    <<runtime-mapping-fields,runtime equivalent>>, and should emit points
    as a pair of (lat, lon) double values.

==== Using geopoints in scripts

When accessing the value of a geopoint in a script, the value is returned as
a `GeoPoint` object, which allows access to the `.lat` and `.lon` values
respectively:

[source,painless]
--------------------------------------------------
def geopoint = doc['location'].value;
def lat      = geopoint.lat;
def lon      = geopoint.lon;
--------------------------------------------------

For performance reasons, it is better to access the lat/lon values directly:

[source,painless]
--------------------------------------------------
def lat      = doc['location'].lat;
def lon      = doc['location'].lon;
--------------------------------------------------

[[geo-point-synthetic-source]]
==== Synthetic source

IMPORTANT: Synthetic `_source` is Generally Available only for TSDB indices
(indices that have `index.mode` set to `time_series`). For other indices
synthetic `_source` is in technical preview. Features in technical preview may
be changed or removed in a future release. Elastic will work to fix
any issues, but features in technical preview are not subject to the support SLA
of official GA features.

`geo_point` fields support <<synthetic-source,synthetic `_source`>> in their
default configuration. Synthetic `_source` cannot be used together with
<<ignore-malformed,`ignore_malformed`>>, <<copy-to,`copy_to`>>, or with
<<doc-values,`doc_values`>> disabled.

Synthetic source always sorts `geo_point` fields (first by latitude and then
longitude) and reduces them to their stored precision. For example:
[source,console,id=synthetic-source-geo-point-example]
----
PUT idx
{
  "mappings": {
    "_source": { "mode": "synthetic" },
    "properties": {
      "point": { "type": "geo_point" }
    }
  }
}
PUT idx/_doc/1
{
  "point": [
    {"lat":-90, "lon":-80},
    {"lat":10, "lon":30}
  ]
}
----
// TEST[s/$/\nGET idx\/_doc\/1?filter_path=_source\n/]

Will become:
[source,console-result]
----
{
  "point": [
    {"lat":-90.0, "lon":-80.00000000931323},
    {"lat":9.999999990686774, "lon":29.999999972060323}
   ]
}
----
// TEST[s/^/{"_source":/ s/\n$/}/]

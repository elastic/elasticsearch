[[geo-shape]]
=== Geoshape field type
++++
<titleabbrev>Geoshape</titleabbrev>
++++

The `geo_shape` data type facilitates the indexing of and searching
with arbitrary geoshapes such as rectangles, lines and polygons. If the data being
indexed contains shapes other than just points, it is necessary to use this mapping.
If the data contains only points, it can be indexed as either
<<geo-point,`geo_point`>> or `geo_shape`.

Documents using this type can be used:

* to find geoshapes within:
** a <<query-dsl-geo-bounding-box-query,bounding box>>
** a certain <<query-dsl-geo-distance-query,distance>> of a central point
** a <<query-dsl-geo-shape-query,`geo_shape` query>> (for example, intersecting polygons).
* to aggregate documents by geographic grids:
** either <<search-aggregations-bucket-geohashgrid-aggregation,`geo_hash`>>
** or <<search-aggregations-bucket-geotilegrid-aggregation,`geo_tile`>>.

Grid aggregations over `geo_hex` grids are not supported for `geo_shape` fields.

[[geo-shape-mapping-options]]
[discrete]
==== Mapping Options

The `geo_shape` mapping maps GeoJSON or WKT geometry objects to the `geo_shape`
type. To enable it, users must explicitly map fields to the `geo_shape`
type.

[NOTE]
=============================================
In https://datatracker.ietf.org/doc/html/rfc7946[GeoJSON]
and https://www.ogc.org/standard/sfa/[WKT], and therefore Elasticsearch,
the correct *coordinate order is longitude, latitude (X, Y)* within coordinate
arrays. This differs from many Geospatial APIs (e.g., Google Maps) that generally
use the colloquial latitude, longitude (Y, X).
=============================================

[cols="<,<,<",options="header",]
|=======================================================================
|Option |Description| Default

|`orientation`
a|Optional. Default <<polygon-orientation,orientation>> for the field's
WKT polygons.

This parameter sets and returns only a `RIGHT` (counterclockwise) or `LEFT`
(clockwise) value. However, you can specify either value in multiple ways.

To set `RIGHT`, use one of the following arguments or its uppercase
variant:

* `right`
* `counterclockwise`
* `ccw`

To set `LEFT`, use one of the following arguments or its uppercase
variant:

* `left`
* `clockwise`
* `cw`
| `RIGHT`

|`ignore_malformed` |If true, malformed GeoJSON or WKT shapes are ignored. If
false (default), malformed GeoJSON and WKT shapes throw an exception and reject the
entire document.
| `false`

|`ignore_z_value` |If `true` (default) three dimension points will be accepted (stored in source)
but only latitude and longitude values will be indexed; the third dimension is ignored. If `false`,
geopoints containing any more than latitude and longitude (two dimensions) values throw an exception
and reject the whole document.
| `true`

|`coerce` |If `true` unclosed linear rings in polygons will be automatically closed.
| `false`

|`index` |Should the field be quickly searchable? Accepts `true` (default) and `false`.
Fields that only have <<doc-values,`doc_values`>> enabled can still be queried, albeit slower.
| `true`

|`doc_values` |Should the field be stored on disk in a column-stride fashion,
so that it can later be used for aggregations or scripting?
| `true`

|=======================================================================


[[geoshape-indexing-approach]]
[discrete]
==== Indexing approach
Geoshape types are indexed by decomposing the shape into a triangular mesh and
indexing each triangle as a 7 dimension point in a BKD tree. This provides
near perfect spatial resolution (down to 1e-7 decimal degree precision) since all
spatial relations are computed using an encoded vector representation of the
original shape. Performance of the tessellator primarily
depends on the number of vertices that define the polygon/multi-polygon.

[discrete]
===== Example

[source,console]
--------------------------------------------------
PUT /example
{
  "mappings": {
    "properties": {
      "location": {
        "type": "geo_shape"
      }
    }
  }
}
--------------------------------------------------
// TESTSETUP

[[input-structure]]
[discrete]
==== Input Structure

Shapes can be represented using either the http://geojson.org[GeoJSON]
or https://docs.opengeospatial.org/is/12-063r5/12-063r5.html[Well-Known Text]
(WKT) format. The following table provides a mapping of GeoJSON and WKT
to Elasticsearch types:

[cols="<,<,<,<",options="header",]
|=======================================================================
|GeoJSON Type |WKT Type |Elasticsearch Type |Description

|`Point` |`POINT` |`point` |A single geographic coordinate. Note: Elasticsearch uses WGS-84 coordinates only.
|`LineString` |`LINESTRING` |`linestring` |An arbitrary line given two or more points.
|`Polygon` |`POLYGON` |`polygon` |A _closed_ polygon whose first and last point
must match, thus requiring `n + 1` vertices to create an `n`-sided
polygon and a minimum of `4` vertices.
|`MultiPoint` |`MULTIPOINT` |`multipoint` |An array of unconnected, but likely related
points.
|`MultiLineString` |`MULTILINESTRING` |`multilinestring` |An array of separate linestrings.
|`MultiPolygon` |`MULTIPOLYGON` |`multipolygon` |An array of separate polygons.
|`GeometryCollection` |`GEOMETRYCOLLECTION` |`geometrycollection` | A GeoJSON shape similar to the
`multi*` shapes except that multiple types can coexist (e.g., a Point
and a LineString).
|`N/A` |`BBOX` |`envelope` |A bounding rectangle, or envelope, specified by
specifying only the top left and bottom right points.
|=======================================================================

[NOTE]
=============================================
For all types, both the inner `type` and `coordinates` fields are
required.
=============================================

[[geo-point-type]]
[discrete]
===== http://geojson.org/geojson-spec.html#id2[Point]

A point is a single geographic coordinate, such as the location of a
building or the current position given by a smartphone's Geolocation
API. The following is an example of a point in GeoJSON.

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "Point",
    "coordinates" : [-77.03653, 38.897676]
  }
}
--------------------------------------------------

The following is an example of a point in WKT:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "POINT (-77.03653 38.897676)"
}
--------------------------------------------------

[discrete]
[[geo-linestring]]
===== http://geojson.org/geojson-spec.html#id3[LineString]

A linestring defined by an array of two or more positions. By
specifying only two points, the linestring will represent a straight
line. Specifying more than two points creates an arbitrary path. The
following is an example of a linestring in GeoJSON.

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "LineString",
    "coordinates" : [[-77.03653, 38.897676], [-77.009051, 38.889939]]
  }
}
--------------------------------------------------

The following is an example of a linestring in WKT:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "LINESTRING (-77.03653 38.897676, -77.009051 38.889939)"
}
--------------------------------------------------

The above linestring would draw a straight line starting at the White
House to the US Capitol Building.

[discrete]
[[geo-polygon]]
===== http://geojson.org/geojson-spec.html#id4[Polygon]

A polygon is defined by a list of a list of points. The first and last
points in each (outer) list must be the same (the polygon must be
closed). The following is an example of a polygon in GeoJSON.

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "Polygon",
    "coordinates" : [
      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]
    ]
  }
}
--------------------------------------------------

The following is an example of a polygon in WKT:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0))"
}
--------------------------------------------------

The first array represents the outer boundary of the polygon, the other
arrays represent the interior shapes ("holes"). The following is a GeoJSON example
of a polygon with a hole:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "Polygon",
    "coordinates" : [
      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ],
      [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2] ]
    ]
  }
}
--------------------------------------------------

The following is an example of a polygon with a hole in WKT:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2))"
}
--------------------------------------------------

[discrete]
[[polygon-orientation]]
===== Polygon orientation

A polygon's orientation indicates the order of its vertices: `RIGHT`
(counterclockwise) or `LEFT` (clockwise). {es} uses a polygon’s orientation to
determine if it crosses the international dateline (+/-180° longitude).

You can set a default orientation for WKT polygons using the
<<geo-shape-mapping-options,`orientation` mapping parameter>>. This is because
the WKT specification doesn't specify or enforce a default orientation.

GeoJSON polygons use a default orientation of `RIGHT`, regardless of
`orientation` mapping parameter's value. This is because the
https://tools.ietf.org/html/rfc7946#section-3.1.6[GeoJSON specification]
mandates that an outer polygon use a counterclockwise orientation and interior
shapes use a clockwise orientation.

You can override the default orientation for GeoJSON polygons using the
document-level `orientation` parameter. For example, the following indexing
request specifies a document-level `orientation` of `LEFT`.

[source,console]
----
POST /example/_doc
{
  "location" : {
    "type" : "Polygon",
    "orientation" : "LEFT",
    "coordinates" : [
      [ [-177.0, 10.0], [176.0, 15.0], [172.0, 0.0], [176.0, -15.0], [-177.0, -10.0], [-177.0, 10.0] ]
    ]
  }
}
----

{es} only uses a polygon’s orientation to determine if it crosses the
international dateline. If the difference between a polygon’s minimum longitude
and the maximum longitude is less than 180°, the polygon doesn't cross the
dateline and its orientation has no effect.

If the difference between a polygon’s minimum longitude and the maximum
longitude is 180° or greater, {es} checks whether the polygon's document-level
`orientation` differs from the default orientation. If the orientation differs,
{es} considers the polygon to cross the international dateline and splits the
polygon at the dateline.

[discrete]
[[geo-multipoint]]
===== http://geojson.org/geojson-spec.html#id5[MultiPoint]

The following is an example of a list of GeoJSON points:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "MultiPoint",
    "coordinates" : [
      [102.0, 2.0], [103.0, 2.0]
    ]
  }
}
--------------------------------------------------

The following is an example of a list of WKT points:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "MULTIPOINT (102.0 2.0, 103.0 2.0)"
}
--------------------------------------------------

[discrete]
[[geo-multilinestring]]
===== http://geojson.org/geojson-spec.html#id6[MultiLineString]

The following is an example of a list of GeoJSON linestrings:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "MultiLineString",
    "coordinates" : [
      [ [102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0] ],
      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0] ],
      [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8] ]
    ]
  }
}
--------------------------------------------------

The following is an example of a list of WKT linestrings:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "MULTILINESTRING ((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0), (100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8))"
}
--------------------------------------------------

[discrete]
[[geo-multipolygon]]
===== http://geojson.org/geojson-spec.html#id7[MultiPolygon]

The following is an example of a list of GeoJSON polygons (second polygon contains a hole):

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "MultiPolygon",
    "coordinates" : [
      [ [[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]] ],
      [ [[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],
        [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]] ]
    ]
  }
}
--------------------------------------------------

The following is an example of a list of WKT polygons (second polygon contains a hole):

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "MULTIPOLYGON (((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0, 102.0 2.0)), ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2)))"
}
--------------------------------------------------

[discrete]
[[geo-geometry_collection]]
===== http://geojson.org/geojson-spec.html#geometrycollection[Geometry Collection]

The following is an example of a collection of GeoJSON geometry objects:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type": "GeometryCollection",
    "geometries": [
      {
        "type": "Point",
        "coordinates": [100.0, 0.0]
      },
      {
        "type": "LineString",
        "coordinates": [ [101.0, 0.0], [102.0, 1.0] ]
      }
    ]
  }
}
--------------------------------------------------

The following is an example of a collection of WKT geometry objects:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "GEOMETRYCOLLECTION (POINT (100.0 0.0), LINESTRING (101.0 0.0, 102.0 1.0))"
}
--------------------------------------------------


[discrete]
===== Envelope

Elasticsearch supports an `envelope` type, which consists of coordinates
for upper left and lower right points of the shape to represent a
bounding rectangle in the format `[[minLon, maxLat], [maxLon, minLat]]`:

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : {
    "type" : "envelope",
    "coordinates" : [ [100.0, 1.0], [101.0, 0.0] ]
  }
}
--------------------------------------------------

The following is an example of an envelope using the WKT BBOX format:

*NOTE:* WKT specification expects the following order: minLon, maxLon, maxLat, minLat.

[source,console]
--------------------------------------------------
POST /example/_doc
{
  "location" : "BBOX (100.0, 102.0, 2.0, 0.0)"
}
--------------------------------------------------

[discrete]
===== Circle

Neither GeoJSON nor WKT supports a point-radius circle type. Instead, use a
<<ingest-circle-processor,circle ingest processor>> to approximate the circle as
a <<geo-polygon,`polygon`>>.

[discrete]
==== Sorting and Retrieving index Shapes

Due to the complex input structure and index representation of shapes,
it is not currently possible to sort shapes or retrieve their fields
directly. The `geo_shape` value is only retrievable through the `_source`
field.

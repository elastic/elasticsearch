[role="xpack"]
[[histogram]]
=== Histogram field type
++++
<titleabbrev>Histogram</titleabbrev>
++++

A field to store pre-aggregated numerical data representing a histogram.
This data is defined using two paired arrays:

* A `values` array of <<number, `double`>> numbers, representing the buckets for
the histogram. These values must be provided in ascending order.
* A corresponding `counts` array of <<number, `long`>> numbers, representing how
many values fall into each bucket. These numbers must be positive or zero.

Because the elements in the `values` array correspond to the elements in the
same position of the `count` array, these two arrays must have the same length.

[IMPORTANT]
========
* A `histogram` field can only store a single pair of `values` and `count` arrays
per document. Nested arrays are not supported.
* `histogram` fields do not support sorting.
========

[role="child_attributes"]
[[histogram-uses]]
==== Uses

`histogram` fields are primarily intended for use with aggregations. To make it
more readily accessible for aggregations, `histogram` field data is stored as a
binary <<doc-values,doc values>> and not indexed. Its size in bytes is at most
`13 * numValues`, where `numValues` is the length of the provided arrays.

Because the data is not indexed, you only can use `histogram` fields for the
following aggregations and queries:

* <<search-aggregations-metrics-min-aggregation-histogram-fields,min>> aggregation
* <<search-aggregations-metrics-max-aggregation-histogram-fields,max>> aggregation
* <<search-aggregations-metrics-sum-aggregation-histogram-fields,sum>> aggregation
* <<search-aggregations-metrics-valuecount-aggregation-histogram-fields,value_count>> aggregation
* <<search-aggregations-metrics-avg-aggregation-histogram-fields,avg>> aggregation
* <<search-aggregations-metrics-percentile-aggregation,percentiles>> aggregation
* <<search-aggregations-metrics-percentile-rank-aggregation,percentile ranks>> aggregation
* <<search-aggregations-metrics-boxplot-aggregation,boxplot>> aggregation
* <<search-aggregations-bucket-histogram-aggregation-histogram-fields,histogram>> aggregation
* <<search-aggregations-bucket-range-aggregation-histogram-fields,range>> aggregation
* <<query-dsl-exists-query,exists>> query

[[mapping-types-histogram-building-histogram]]
==== Building a histogram

When using a histogram as part of an aggregation, the accuracy of the results will depend on how the
histogram was constructed. It is important to consider the percentiles aggregation mode that will be used
to build it. Some possibilities include:

- For the <<search-aggregations-metrics-percentile-aggregation, T-Digest>> mode, the `values` array represents
the mean centroid positions and the `counts` array represents the number of values that are attributed to each
centroid. If the algorithm has already started to approximate the percentiles, this inaccuracy is
carried over in the histogram.

- For the <<_hdr_histogram,High Dynamic Range (HDR)>> histogram mode, the `values` array represents fixed upper
limits of each bucket interval, and the `counts` array represents the number of values that are attributed to each
interval. This implementation maintains a fixed worse-case percentage error (specified as a number of significant digits),
therefore the value used when generating the histogram would be the maximum accuracy you can achieve at aggregation time.

The histogram field is "algorithm agnostic" and does not store data specific to either T-Digest or HDRHistogram. While this
means the field can technically be aggregated with either algorithm, in practice the user should chose one algorithm and
index data in that manner (e.g. centroids for T-Digest or intervals for HDRHistogram) to ensure best accuracy.

[[histogram-synthetic-source]]
==== Synthetic `_source`

IMPORTANT: Synthetic `_source` is Generally Available only for TSDB indices
(indices that have `index.mode` set to `time_series`). For other indices
synthetic `_source` is in technical preview. Features in technical preview may
be changed or removed in a future release. Elastic will work to fix
any issues, but features in technical preview are not subject to the support SLA
of official GA features.

`histogram` fields support <<synthetic-source,synthetic `_source`>> in their
default configuration. Synthetic `_source` cannot be used together with
<<ignore-malformed,`ignore_malformed`>> or <<copy-to,`copy_to`>>.

NOTE: To save space, zero-count buckets are not stored in the histogram doc values.
As a result, when indexing a histogram field in an index with synthetic source enabled,
indexing a histogram including zero-count buckets will result in missing buckets when
fetching back the histogram.

[[histogram-ex]]
==== Examples

The following <<indices-create-index, create index>> API request creates a new index with two field mappings:

* `my_histogram`, a `histogram` field used to store percentile data
* `my_text`, a `keyword` field used to store a title for the histogram

[source,console]
--------------------------------------------------
PUT my-index-000001
{
  "mappings" : {
    "properties" : {
      "my_histogram" : {
        "type" : "histogram"
      },
      "my_text" : {
        "type" : "keyword"
      }
    }
  }
}
--------------------------------------------------

The following <<docs-index_,index>> API requests store pre-aggregated for
two histograms: `histogram_1` and `histogram_2`.

[source,console]
--------------------------------------------------
PUT my-index-000001/_doc/1
{
  "my_text" : "histogram_1",
  "my_histogram" : {
      "values" : [0.1, 0.2, 0.3, 0.4, 0.5], <1>
      "counts" : [3, 7, 23, 12, 6] <2>
   }
}

PUT my-index-000001/_doc/2
{
  "my_text" : "histogram_2",
  "my_histogram" : {
      "values" : [0.1, 0.25, 0.35, 0.4, 0.45, 0.5], <1>
      "counts" : [8, 17, 8, 7, 6, 2] <2>
   }
}
--------------------------------------------------
<1> Values for each bucket. Values in the array are treated as doubles and must be given in
increasing order. For <<search-aggregations-metrics-percentile-aggregation-approximation, T-Digest>>
histograms this value represents the mean value. In case of HDR histograms this represents the value iterated to.
<2> Count for each bucket. Values in the arrays are treated as long integers and must be positive or zero.
Negative values will be rejected. The relation between a bucket and a count is given by the position in the array.

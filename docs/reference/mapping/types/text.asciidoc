[[text]]
=== Text type family
++++
<titleabbrev>Text</titleabbrev>
++++

The text family includes the following field types:

* <<text-field-type,`text`>>, the traditional field type for full-text content
such as the body of an email or the description of a product.
* <<match-only-text-field-type,`match_only_text`>>, a space-optimized variant
of `text` that disables scoring and performs slower on queries that need
positions. It is best suited for indexing log messages.


[discrete]
[[text-field-type]]
=== Text field type

A field to index full-text values, such as the body of an email or the
description of a product. These fields are `analyzed`, that is they are passed through an
<<analysis,analyzer>> to convert the string into a list of individual terms
before being indexed. The analysis process allows Elasticsearch to search for
individual words _within_ each full text field. Text fields are not
used for sorting and seldom used for aggregations (although the
<<search-aggregations-bucket-significanttext-aggregation,significant text aggregation>>
is a notable exception).

`text` fields are best suited for unstructured but human-readable content. If
you need to index unstructured machine-generated content, see
<<mapping-unstructured-content>>.

If you need to index structured content such as email addresses, hostnames, status
codes, or tags, it is likely that you should rather use a <<keyword,`keyword`>> field.

Below is an example of a mapping for a text field:

[source,console]
--------------------------------
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "full_name": {
        "type":  "text"
      }
    }
  }
}
--------------------------------

[[text-multi-fields]]
==== Use a field as both text and keyword
Sometimes it is useful to have both a full text (`text`) and a keyword
(`keyword`) version of the same field: one for full text search and the
other for aggregations and sorting. This can be achieved with
<<multi-fields,multi-fields>>.

[[text-params]]
==== Parameters for text fields

The following parameters are accepted by `text` fields:

[horizontal]

<<analyzer,`analyzer`>>::

    The <<analysis,analyzer>> which should be used for
    the `text` field, both at index-time and at
    search-time (unless overridden by the  <<search-analyzer,`search_analyzer`>>).
    Defaults to the default index analyzer, or the
    <<analysis-standard-analyzer,`standard` analyzer>>.

<<eager-global-ordinals,`eager_global_ordinals`>>::

    Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false`
    (default). Enabling this is a good idea on fields that are frequently used for
    (significant) terms aggregations.

<<fielddata-mapping-param,`fielddata`>>::

    Can the field use in-memory fielddata for sorting, aggregations,
    or scripting? Accepts `true` or `false` (default).

<<field-data-filtering,`fielddata_frequency_filter`>>::

    Expert settings which allow to decide which values to load in memory when `fielddata`
    is enabled. By default all values are loaded.

<<multi-fields,`fields`>>::

    Multi-fields allow the same string value to be indexed in multiple ways for
    different purposes, such as one field for search and a multi-field for
    sorting and aggregations, or the same string value analyzed by different
    analyzers.

<<mapping-index,`index`>>::

    Should the field be searchable? Accepts `true` (default) or `false`.

<<index-options,`index_options`>>::

    What information should be stored in the index, for search and highlighting purposes.
    Defaults to `positions`.

<<index-prefixes,`index_prefixes`>>::

    If enabled, term prefixes of between 2 and 5 characters are indexed into a
    separate field. This allows prefix searches to run more efficiently, at
    the expense of a larger index.

<<index-phrases,`index_phrases`>>::

    If enabled, two-term word combinations ('shingles') are indexed into a separate
    field. This allows exact phrase queries (no slop) to run more efficiently, at the expense
    of a larger index. Note that this works best when stopwords are not removed,
    as phrases containing stopwords will not use the subsidiary field and will fall
    back to a standard phrase query. Accepts `true` or `false` (default).

<<norms,`norms`>>::

    Whether field-length should be taken into account when scoring queries.
    Accepts `true` (default) or `false`.

<<position-increment-gap,`position_increment_gap`>>::

    The number of fake term position which should be inserted between each
    element of an array of strings. Defaults to the `position_increment_gap`
    configured on the analyzer which defaults to `100`. `100` was chosen because it
    prevents phrase queries with reasonably large slops (less than 100) from
    matching terms across field values.

<<mapping-store,`store`>>::

    Whether the field value should be stored and retrievable separately from
    the <<mapping-source-field,`_source`>> field. Accepts `true` or `false` (default).
    This parameter will be automatically set to `true` for TSDB indices
    (indices that have `index.mode` set to `time_series`)
    if there is no <<keyword-synthetic-source, `keyword`>>
    sub-field that supports synthetic `_source`.

<<search-analyzer,`search_analyzer`>>::

    The <<analyzer,`analyzer`>> that should be used at search time on
    the `text` field. Defaults to the `analyzer` setting.

<<search-quote-analyzer,`search_quote_analyzer`>>::

    The <<analyzer,`analyzer`>> that should be used at search time when a
    phrase is encountered. Defaults to the `search_analyzer` setting.

<<similarity,`similarity`>>::

    Which scoring algorithm or _similarity_ should be used. Defaults
    to `BM25`.

<<term-vector,`term_vector`>>::

    Whether term vectors should be stored for the field. Defaults to `no`.

<<mapping-field-meta,`meta`>>::

    Metadata about the field.

[[text-synthetic-source]]
==== Synthetic `_source`

IMPORTANT: Synthetic `_source` is Generally Available only for TSDB indices
(indices that have `index.mode` set to `time_series`). For other indices
synthetic `_source` is in technical preview. Features in technical preview may
be changed or removed in a future release. Elastic will work to fix
any issues, but features in technical preview are not subject to the support SLA
of official GA features.

`text` fields support <<synthetic-source,synthetic `_source`>> if they have
a <<keyword-synthetic-source, `keyword`>> sub-field that supports synthetic
`_source` or if the `text` field sets `store` to `true`. Either way, it may
not have <<copy-to,`copy_to`>>.

If using a sub-`keyword` field then the values are sorted in the same way as
a `keyword` field's values are sorted. By default, that means sorted with
duplicates removed. So:
[source,console,id=synthetic-source-text-example-default]
----
PUT idx
{
  "mappings": {
    "_source": { "mode": "synthetic" },
    "properties": {
      "text": {
        "type": "text",
        "fields": {
          "raw": {
            "type": "keyword"
          }
        }
      }
    }
  }
}
PUT idx/_doc/1
{
  "text": [
    "the quick brown fox",
    "the quick brown fox",
    "jumped over the lazy dog"
  ]
}
----
// TEST[s/$/\nGET idx\/_doc\/1?filter_path=_source\n/]

Will become:
[source,console-result]
----
{
  "text": [
    "jumped over the lazy dog",
    "the quick brown fox"
  ]
}
----
// TEST[s/^/{"_source":/ s/\n$/}/]

NOTE: Reordering text fields can have an effect on <<query-dsl-match-query-phrase,phrase>>
      and <<span-queries,span>> queries. See the discussion about
      <<position-increment-gap,`position_increment_gap`>> for more detail. You
      can avoid this by making sure the `slop` parameter on the phrase queries
      is lower than the `position_increment_gap`. This is the default.

If the `text` field sets `store` to true then order and duplicates
are preserved.
[source,console,id=synthetic-source-text-example-stored]
----
PUT idx
{
  "mappings": {
    "_source": { "mode": "synthetic" },
    "properties": {
      "text": { "type": "text", "store": true }
    }
  }
}
PUT idx/_doc/1
{
  "text": [
    "the quick brown fox",
    "the quick brown fox",
    "jumped over the lazy dog"
  ]
}
----
// TEST[s/$/\nGET idx\/_doc\/1?filter_path=_source\n/]

Will become:
[source,console-result]
----
{
  "text": [
    "the quick brown fox",
    "the quick brown fox",
    "jumped over the lazy dog"
  ]
}
----
// TEST[s/^/{"_source":/ s/\n$/}/]

[[fielddata-mapping-param]]
==== `fielddata` mapping parameter

`text` fields are searchable by default, but by default are not available for
aggregations, sorting, or scripting. If you try to sort, aggregate, or access
values from a `text` field using a script, you'll see an exception indicating
that field data is disabled by default on text fields. To load field data in
memory, set `fielddata=true` on your field.

NOTE: Loading field data in memory can consume significant memory.

Field data is the only way to access the analyzed tokens from a full text field
in aggregations, sorting, or scripting. For example, a full text field like `New York`
would get analyzed as `new` and `york`. To aggregate on these tokens requires field data.

[[before-enabling-fielddata]]
==== Before enabling fielddata

It usually doesn't make sense to enable fielddata on text fields. Field data
is stored in the heap with the <<modules-fielddata, field data cache>> because it
is expensive to calculate. Calculating the field data can cause latency spikes, and
increasing heap usage is a cause of cluster performance issues.

Most users who want to do more with text fields use <<multi-fields, multi-field mappings>>
by having both a `text` field for full text searches, and an
unanalyzed <<keyword,`keyword`>> field for aggregations, as follows:

[source,console]
---------------------------------
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "my_field": { <1>
        "type": "text",
        "fields": {
          "keyword": { <2>
            "type": "keyword"
          }
        }
      }
    }
  }
}
---------------------------------

<1> Use the `my_field` field for searches.
<2> Use the `my_field.keyword` field for aggregations, sorting, or in scripts.

[[enable-fielddata-text-fields]]
==== Enabling fielddata on `text` fields

You can enable fielddata on an existing `text` field using the
<<indices-put-mapping,update mapping API>> as follows:

[source,console]
-----------------------------------
PUT my-index-000001/_mapping
{
  "properties": {
    "my_field": { <1>
      "type":     "text",
      "fielddata": true
    }
  }
}
-----------------------------------
// TEST[continued]

<1> The mapping that you specify for `my_field` should consist of the existing
    mapping for that field, plus the `fielddata` parameter.

[[field-data-filtering]]
==== `fielddata_frequency_filter` mapping parameter

Fielddata filtering can be used to reduce the number of terms loaded into
memory, and thus reduce memory usage. Terms can be filtered by _frequency_:

The frequency filter allows you to only load terms whose document frequency falls
between a `min` and `max` value, which can be expressed an absolute
number (when the number is bigger than 1.0) or as a percentage
(eg `0.01` is `1%` and `1.0` is `100%`). Frequency is calculated
*per segment*. Percentages are based on the number of docs which have a
value for the field, as opposed to all docs in the segment.

Small segments can be excluded completely by specifying the minimum
number of docs that the segment should contain with `min_segment_size`:

[source,console]
--------------------------------------------------
PUT my-index-000001
{
  "mappings": {
    "properties": {
      "tag": {
        "type": "text",
        "fielddata": true,
        "fielddata_frequency_filter": {
          "min": 0.001,
          "max": 0.1,
          "min_segment_size": 500
        }
      }
    }
  }
}
--------------------------------------------------

include::match-only-text.asciidoc[]

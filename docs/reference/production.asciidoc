[chapter]
[[scalability]]
= Get ready for production

`statement of when this matters goes here`

To make Elasticsearch production-ready, you need to consider the following: 

[discrete]
== Your deployment method

Elastic offers several methods of deploying Elasticsearch. Each method offers different levels of control over your deployment. Some methods allow you to centrally manage multiple deployments or clusters.

Refer to the documentation for each deployment method for detailed information about the available features.

[discrete]
=== Hosted options

[cols="1,1,1,1",options="header"]
|===
| Deployment method | Hosted by | Key features | Use case

| {serverless-docs}/intro.html[*Elastic Cloud Serverless*]
| Elastic
| ??
| ??

| {cloud}/ec-getting-started-trial.html[*Elastic Cloud Hosted*]
| Elastic
| ??
| ??

| *Elasticsearch Add-On for Heroku*
| Elastic
| ??
| ??
|===

[discrete]
=== Advanced options

[cols="1,1,1,1",options="header"]
|===
| Deployment method | Hosted by | Key features | Use case

| {eck-ref}/k8s-overview.html[*Elastic Cloud on Kubernetes*]
| Self-hosted
| ??
| ??

| {ece-ref}/Elastic-Cloud-Enterprise-overview.html[*Elastic Cloud Enterprise*]
| Self-hosted
| ??
| ??

| <<elasticsearch-deployment-options,Manual on-premise>>
| Self-hosted
| ??
| ??
|===

[discrete]
== Your data retention strategy

include::{es-ref-dir}/lifecycle-options.asciidoc[]

You should determine how long you need to retain your data and how you will manage it.

something about when to use which one?

[discrete]
== Cluster or deployment design

Many teams rely on {es} to run their key services. To keep these services running, you can design your {es} deployment
to keep {es} available, even in case of large-scale outages. To keep it running fast, you also can design your
deployment to be responsive to production workloads.

{es} is built to be always available and to scale with your needs. It does this using a distributed architecture.
By distributing your cluster, you can keep Elastic online and responsive to requests.

Nodes and shards design
Size your shards
Tuning
Reference architectures

{es} offers many options that allow you to configure your cluster to meet your organizationâ€™s goals, requirements,
and restrictions. You can review the following guides to learn how to tune your cluster to meet your needs:

* <<high-availability-cluster-design,Designing for resilience>>
* <<tune-for-indexing-speed,Tune for indexing speed>>
* <<tune-for-search-speed,Tune for search speed>>
* <<tune-for-disk-usage,Tune for disk usage>>
* <<use-elasticsearch-for-time-series-data,Tune for time series data>>

Many {es} options come with different performance considerations and trade-offs. The best way to determine the
optimal configuration for your use case is through https://www.elastic.co/elasticon/conf/2016/sf/quantitative-cluster-sizing[testing with your own data and queries].

[discrete]
== Security

<<secure-cluster,Learn about securing an Elasticsearch cluster>>

[discrete]
== Disaster recovery

In case of failure, {es} offers tools for cross-cluster replication and cluster snapshots that can
help you fall back or recover quickly. You can also use cross-cluster replication to serve requests based on the
geographic location of your users and your resources.


To effectively distribute read and write operations across nodes, the nodes in a cluster need good, reliable connections
to each other. To provide better connections, you typically co-locate the nodes in the same data center or nearby data centers.

Co-locating nodes in a single location exposes you to the risk of a single outage taking your entire cluster offline. To
maintain high availability, you can prepare a second cluster that can take over in case of disaster by implementing
cross-cluster replication (CCR).

CCR provides a way to automatically synchronize indices from your primary cluster to a secondary remote cluster that
can serve as a hot backup. If the primary cluster fails, the secondary cluster can take over.

You can also use CCR to create secondary clusters to serve read requests in geo-proximity to your users.

Learn more about <<xpack-ccr,cross-cluster replication>> and about <<high-availability-cluster-design,designing for resilience>>.

[TIP]
====
You can also take <<snapshot-restore,snapshots>> of your cluster that can be restored in case of failure.
====

[discrete]
== Monitoring

As with any enterprise system, you need tools to secure, manage, and monitor your Elasticsearch clusters. Security,
monitoring, and administrative features that are integrated into Elasticsearch enable you to use {kibana-ref}/introduction.html[Kibana] as a
control center for managing a cluster.

<<monitor-elasticsearch-cluster,Learn about monitoring your cluster>>.

{
  "comment" : "This is generated by ESQL's AbstractFunctionTestCase. Do not edit it. See ../README.md for how to regenerate it.",
  "type" : "scalar",
  "name" : "knn",
  "description" : "Finds the k nearest vectors to a query vector, as measured by a similarity metric. knn function finds nearest vectors through approximate search on indexed dense_vectors or semantic_text fields.",
  "signatures" : [
    {
      "params" : [
        {
          "name" : "field",
          "type" : "dense_vector",
          "optional" : false,
          "description" : "Field that the query will target. knn function can be used with dense_vector or semantic_text fields. Other text fields are not allowed"
        },
        {
          "name" : "query",
          "type" : "dense_vector",
          "optional" : false,
          "description" : "Vector value to find top nearest neighbours for."
        },
        {
          "name" : "options",
          "type" : "function_named_parameters",
          "mapParams" : "{name='boost', values=[2.5], description='Floating point number used to decrease or increase the relevance scores of the query.Defaults to 1.0.'}, {name='min_candidates', values=[10], description='The minimum number of nearest neighbor candidates to consider per shard while doing knn search.  KNN may use a higher number of candidates in case the query can't use a approximate results. Cannot exceed 10,000. Increasing min_candidates tends to improve the accuracy of the final results. Defaults to 1.5 * LIMIT used for the query.'}, {name='rescore_oversample', values=[3.5], description='Applies the specified oversampling for rescoring quantized vectors. See [oversampling and rescoring quantized vectors](docs-content://solutions/search/vector/knn.md#dense-vector-knn-search-rescoring) for details.'}, {name='similarity', values=[0.01], description='The minimum similarity required for a document to be considered a match. The similarity value calculated relates to the raw similarity used, not the document score.'}",
          "optional" : true,
          "description" : "(Optional) kNN additional options as <<esql-function-named-params,function named parameters>>. See <<query-dsl-knn-query,knn query>> for more information."
        }
      ],
      "variadic" : false,
      "returnType" : "boolean"
    },
    {
      "params" : [
        {
          "name" : "field",
          "type" : "text",
          "optional" : false,
          "description" : "Field that the query will target. knn function can be used with dense_vector or semantic_text fields. Other text fields are not allowed"
        },
        {
          "name" : "query",
          "type" : "dense_vector",
          "optional" : false,
          "description" : "Vector value to find top nearest neighbours for."
        },
        {
          "name" : "options",
          "type" : "function_named_parameters",
          "mapParams" : "{name='boost', values=[2.5], description='Floating point number used to decrease or increase the relevance scores of the query.Defaults to 1.0.'}, {name='min_candidates', values=[10], description='The minimum number of nearest neighbor candidates to consider per shard while doing knn search.  KNN may use a higher number of candidates in case the query can't use a approximate results. Cannot exceed 10,000. Increasing min_candidates tends to improve the accuracy of the final results. Defaults to 1.5 * LIMIT used for the query.'}, {name='rescore_oversample', values=[3.5], description='Applies the specified oversampling for rescoring quantized vectors. See [oversampling and rescoring quantized vectors](docs-content://solutions/search/vector/knn.md#dense-vector-knn-search-rescoring) for details.'}, {name='similarity', values=[0.01], description='The minimum similarity required for a document to be considered a match. The similarity value calculated relates to the raw similarity used, not the document score.'}",
          "optional" : true,
          "description" : "(Optional) kNN additional options as <<esql-function-named-params,function named parameters>>. See <<query-dsl-knn-query,knn query>> for more information."
        }
      ],
      "variadic" : false,
      "returnType" : "boolean"
    }
  ],
  "examples" : [
    "from colors metadata _score\n| where knn(rgb_vector, [0, 120, 0])\n| sort _score desc, color asc"
  ],
  "preview" : true,
  "snapshot_only" : false
}

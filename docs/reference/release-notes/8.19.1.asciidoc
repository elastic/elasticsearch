[[release-notes-8.19.1]]
== {es} version 8.19.1

coming[8.19.1]

Also see <<breaking-changes-8.19,Breaking changes in 8.19>>.

[[bug-8.19.1]]
[float]
=== Bug fixes

Data streams::
+
.Disables auto-sharding for LOOKUP index mode
[%collapsible]
===============
Auto-sharding for data streams caused unsupported replica scaling when the index mode was set to `LOOKUP`. 
This happened because lookup mappers do not support scaling beyond one replica.
{es-pull}131429[#131429] resolves this issue by disabling auto-sharding for data streams with `LOOKUP` index mode, avoiding unsupported replica settings.
===============

EQL::
+
.Resolves EQL parsing failure for IP-mapped fields in `OR` expressions
[%collapsible]
===============
Parsing EQL queries failed when comparing the same IP-mapped field to multiple values joined by an `OR` expression.
This occurred because lookup operators were internally rewritten into `IN` expressions, which are unsupported for IP-type fields.
{es-pull}132167[#132167] resolves the issue and ensures EQL can now successfully parse and execute such or queries involving IP fields. (issue: {es-issue}118621[#118621])
===============

ES|QL::
+
.Fixes inconsistent equality and hashcode behavior for `ConstantNullBlock`
[%collapsible]
===============
Inconsistent equality checks caused `constantNullBlock.equals(anyDoubleBlock)` to return false, even when `doubleBlock.equals(constantNullBlock)` returned true.
This asymmetry led to unreliable comparisons and mismatched hashcodes when `ConstantNullBlock` was functionally equivalent to other standard blocks.
{es-pull}131817[#131817] resolves the issue and ensures both equality and hashcode functions are symmetric for these block types.
===============
+
.Fixes `ConcurrentModificationException` caused by live operator list
[%collapsible]
===============
A `ConcurrentModificationException` caused test failures in `CrossClusterAsyncEnrichStopIT.testEnrichAfterStop` under certain conditions.  
This happened because the ES|QL driver added a live operator list to the `DriverStatus` object, which could be modified while the status was being serialized.  
{es-pull}132260[#132260] fixes the issue by copying the operator list before storing it, preventing concurrent changes during status reads.  
(issue: {es-issue}131564[#131564])
===============
+
.Prevents null pointer exception for `to_lower` and `to_upper` with no parameters
[%collapsible]
===============
Calling the `to_lower` or `to_upper` functions with no parameters caused a null pointer exception (NPE), instead of returning a clear error.
This behavior was a result of an older implementation of these functions.
{es-pull}131917[#131917] resolves the issue and ensures that empty parameter calls now return the correct error message. (issue: {es-issue}131913[#131913])
===============
+
.Fixes `aggregate_metric_double` decoding and `mv_expand` behavior on multi-index queries
[%collapsible]
===============
Sorting across multiple indices failed when one index contained an `aggregate_metric_double` field and another did not.
In this case, the missing field was encoded as `NullBlock` but later incorrectly decoded as `AggregateMetricDoubleBlock`, which expects four values. This mismatch caused decoding errors.
{es-pull}131658[#131658] resolves the issue and also improves `mv_expand` by returning the input block unchanged for unsupported `AggregateMetricDoubleBlock` values, avoiding unnecessary errors.
===============
+
.Fixes incorrect `ingest_took` value when combining bulk responses
[%collapsible]
===============
Combining two `BulkResponse` objects with `ingest_took` set to `NO_INGEST_TOOK` resulted in a combined `ingest_took` value of `-2`, which was invalid.
This occurred because the combination logic failed to preserve the sentinel `NO_INGEST_TOOK` constant.
{es-pull}132088[#132088] resolves the issue and ensures the result is correctly set to `NO_INGEST_TOOK` when applicable.
===============
+
.Adds support for splitting large pages on load to avoid memory pressure
[%collapsible]
===============
Loading large rows from a single segment occasionally created oversized pages when decoding values row-by-row, particularly for text and geo fields.
This could cause memory pressure or degraded performance.
{es-pull}131053[#131053] resolves the issue by estimating the size of each page as rows are loaded.
If the estimated size exceeds a configurable `jumbo` threshold (defaulting to one megabyte), row loading stops early, the page is returned, and remaining rows are processed in subsequent iterations.
This prevents loading incomplete or oversized pages during data aggregation.
===============

Infra/Core::
+
.Grants server module read/write permissions for deprecated `path.shared_data` setting
[%collapsible]
===============
Grants the server module read/write access to the deprecated `path.shared_data` setting.  
{es-pull}131680[#131680] resolves issues surfaced in internal testing and ensures compatibility with legacy configurations.
===============

Ingest Node::
+
.Fixes incorrect mapping resolution in simulate ingest API when `mapping_addition` is provided
[%collapsible]
===============
When using the simulate ingest API with a `mapping_addition`, the system incorrectly ignored the existing mapping of the target index and instead applied the mapping from a matching index template, if one existed.
This caused mismatches between the index and simulation behavior.
{es-pull}132101[#132101] resolves the issue and ensures that the indexâ€™s actual mapping is used when available, preserving consistency between simulation and execution.
===============

Machine Learning::
+
.Prevents double-counting of allocations in trained model deployment memory estimation
[%collapsible]
===============
A recent refactor introduced a bug that caused the trained model memory estimation to double-count the number of allocations, leading to inflated memory usage projections.
{es-pull}131990[#131990] resolves the issue by reverting the change and restoring accurate memory estimation for trained model deployments.
===============

Mapping::
+
.Fixes decoding failure for non-ASCII field names in `_ignored_source`
[%collapsible]
===============
A decoding error occurred when field names in `_ignored_source` contained non-ASCII characters. 
This happened because `String.length()` was used to calculate the byte length of the field name, which only works correctly for ASCII characters.
{es-pull}132018[#132018] resolves the issue by using the actual byte array length of the encoded field name, ensuring proper decoding regardless of character encoding.
===============

Search::
+
.Fixes index sort compatibility for `date_nanos` fields in indices created before 7.14
[%collapsible]
===============
Indices created prior to version 7.14 that used an index sort on a `date_nanos` field could not be opened in more recent versions due to a mismatch in the default `index.sort.missing` value.
A change in version 7.14 modified the default from `Long.MIN_VALUE` to `0L`, which caused newer versions to reject those older indices.
{es-pull}132162[#132162] resolves the issue by restoring the expected default value for indices created before 7.14, allowing them to open successfully in newer versions. (issue: {es-issue}132040[#132040])
===============
+
.Fix missing removal of query cancellation callback in QueryPhase
[%collapsible]
===============
The timeout cancellation callback registered in `QueryPhase` via `addQueryCancellation` was not removed after the query phase completed.
This caused unintended timeouts or cancellations during subsequent phases under specific conditions (such as large datasets, low timeouts, and partial search results enabled).
{es-pull}130279[#130279] resolves the issue and ensures predictable behavior by reintroducing the cleanup logic. (issue: {es-issue}130071[#130071])
===============

[[enhancement-8.19.1]]
[float]
=== Enhancements

Engine::
* Available disk space is now recorded when merge tasks are scheduled, helping to diagnose issues caused by running merges despite low disk space on nodes. This information appears in heap dumps and can inform adjustments to `indices.merge.disk.watermark.high` or inspire future enhancements such as aborting already running merges. {es-pull}131711[#131711]

[[release-highlights]]
== What's new in {minor-version}

coming::[{minor-version}]

Here are the highlights of what's new and improved in {es} {minor-version}!
ifeval::["{release-state}"!="unreleased"]
For detailed information about this release, see the <<es-release-notes>> and
<<breaking-changes>>.

// Add previous release to the list
Other versions:

{ref-bare}/8.13/release-highlights.html[8.13]
| {ref-bare}/8.12/release-highlights.html[8.12]
| {ref-bare}/8.11/release-highlights.html[8.11]
| {ref-bare}/8.10/release-highlights.html[8.10]
| {ref-bare}/8.9/release-highlights.html[8.9]
| {ref-bare}/8.8/release-highlights.html[8.8]
| {ref-bare}/8.7/release-highlights.html[8.7]
| {ref-bare}/8.6/release-highlights.html[8.6]
| {ref-bare}/8.5/release-highlights.html[8.5]
| {ref-bare}/8.4/release-highlights.html[8.4]
| {ref-bare}/8.3/release-highlights.html[8.3]
| {ref-bare}/8.2/release-highlights.html[8.2]
| {ref-bare}/8.1/release-highlights.html[8.1]
| {ref-bare}/8.0/release-highlights.html[8.0]

endif::[]

// tag::notable-highlights[]

[discrete]
[[improve_storage_efficiency_for_non_metric_fields_in_tsdb]]
=== Improve storage efficiency for non-metric fields in TSDB
Adds a new `doc_values` encoding for non-metric fields in TSDB that takes advantage of TSDB's index sorting.
While terms that are used in multiple documents (such as the host name) are already stored only once in the terms dictionary,
there are a lot of repetitions in the references to the terms dictionary that are stored in `doc_values` (ordinals).
In TSDB, documents (and therefore `doc_values`) are implicitly sorted by dimenstions and timestamp.
This means that for each time series, we are storing long consecutive runs of the same ordinal.
With this change, we are introducing an encoding that detects and efficiently stores runs of the same value (such as `1 1 1 2 2 2 …`),
and runs of cycling values (such as `1 2 1 2 …`).
In our testing, we have seen a reduction in storage size by about 13%.
The effectiveness of this encoding depends on how many non-metric fields, such as dimensions, are used.
The more non-metric fields, the more effective this improvement will be.

{es-pull}99747[#99747]

[discrete]
[[ga_release_of_synonyms_api]]
=== GA Release of Synonyms API
Removes the beta label for the Synonyms API to make it GA.

{es-pull}103223[#103223]

[discrete]
[[flag_in_field_caps_to_return_only_fields_with_values_in_index]]
=== Flag in `_field_caps` to return only fields with values in index
We added support for filtering the field capabilities API output by removing
fields that don't have a value. This can be done through the newly added
`include_empty_fields` parameter, which defaults to true.

{es-pull}103651[#103651]

[discrete]
[[new_lucene_9_10_release]]
=== New Lucene 9.10 release
- https://github.com/apache/lucene/pull/13090: Prevent humongous allocations in ScalarQuantizer when building quantiles.
- https://github.com/apache/lucene/pull/12962: Speedup concurrent multi-segment HNSW graph search
- https://github.com/apache/lucene/pull/13033: Range queries on numeric/date/ip fields now exit earlier on segments whose values don't intersect with the query range. This should especially help when there are other required clauses in the `bool` query and when the range filter is narrow, e.g. filtering on the last 5 minutes.
- https://github.com/apache/lucene/pull/13026: `bool` queries that mix `filter` and `should` clauses will now propagate minimum competitive scores through the `should` clauses. This should yield speedups when sorting by descending score.

{es-pull}105578[#105578]

// end::notable-highlights[]



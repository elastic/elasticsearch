[[retriever]]
=== Retriever

A retriever is a specification to describe top documents returned from a
search. A retriever replaces other elements of the <<search-search, search API>>
that also return top documents such as <<query-dsl, `query`>> and
<<search-api-knn, `knn`>>. A retriever may have child retrievers where a
retriever with two or more children is considered a compound retriever. This
allows for complex behavior to be depicted in a tree-like structure, called
the retriever tree, to better clarify the order of operations that occur
during a search.

[TIP]
====
Refer to <<retrievers-overview>> for a high level overview of the retrievers abstraction.
====

The following retrievers are available:

`standard`::
A <<standard-retriever, retriever>> that replaces the functionality of a traditional <<query-dsl, query>>.

`knn`::
A <<knn-retriever, retriever>> that replaces the functionality of a <<search-api-knn, knn search>>.

`rrf`::
A <<rrf-retriever, retriever>> that produces top documents from <<rrf, reciprocal rank fusion (RRF)>>.

`text_similarity_reranker`::
A <<text-similarity-reranker-retriever, retriever>> that enhances search results by re-ranking documents based on semantic similarity to a specified inference text, using a machine learning model.

[[standard-retriever]]
==== Standard Retriever

A standard retriever returns top documents from a traditional <<query-dsl, query>>.

===== Parameters:

`query`::
(Optional, <<query-dsl, query object>>)
+
Defines a query to retrieve a set of top documents.

`filter`::
(Optional, <<query-dsl, query object or list of query objects>>)
+
Applies a <<query-dsl-bool-query, boolean query filter>> to this retriever
where all documents must match this query but do not contribute to the score.

`search_after`::
(Optional, <<search-after, search after object>>)
+
Defines a search after object parameter used for pagination.

include::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=terminate_after]

`sort`::
+
(Optional, <<sort-search-results, sort object>>)
A sort object that that specifies the order of matching documents.

`min_score`::
(Optional, `float`)
+
Minimum <<relevance-scores, `_score`>> for matching documents. Documents with a
lower `_score` are not included in the top documents.

`collapse`::
(Optional, <<collapse-search-results, collapse object>>)
+
Collapses the top documents by a specified key into a single top document per key.

===== Restrictions

When a retriever tree contains a compound retriever (a retriever with two or more child
retrievers) the <<search-after, search after>> parameter is not supported.

[discrete]
[[standard-retriever-example]]
==== Example

////
[source,console]
----
PUT /restaurants
{
  "mappings": {
    "properties": {
      "region": { "type": "keyword" },
      "year": { "type": "keyword" },
      "vector": {
        "type": "dense_vector",
        "dims": 3
      }
    }
  }
}

POST /restaurants/_bulk?refresh
{"index":{}}
{"region": "Austria", "year": "2019", "vector": [10, 22, 77]}
{"index":{}}
{"region": "France", "year": "2019", "vector": [10, 22, 78]}
{"index":{}}
{"region": "Austria", "year": "2020", "vector": [10, 22, 79]}
{"index":{}}
{"region": "France", "year": "2020", "vector": [10, 22, 80]}
----
// TESTSETUP

[source,console]
--------------------------------------------------
DELETE /restaurants
--------------------------------------------------
// TEARDOWN
////

[source,console]
----
GET /restaurants/_search
{
  "retriever": { <1>
    "standard": { <2>
      "query": { <3>
        "bool": { <4>
          "should": [ <5>
            {
              "match": { <6>
                "region": "Austria"
              }
            }
          ],
          "filter": [ <7>
            {
              "term": { <8>
                "year": "2019" <9>
              }
            }
          ]
        }
      }
    }
  }
}
----
<1> Opens the `retriever` object.
<2> The `standard` retriever is used for defining traditional {es} queries.
<3> The entry point for defining the search query.
<4> The `bool` object allows for combining multiple query clauses logically.
<5> The `should` array indicates conditions under which a document will match. Documents matching these conditions will increase their relevancy score.
<6> The `match` object finds documents where the `region` field contains the word "Austria."
<7> The `filter` array provides filtering conditions that must be met but do not contribute to the relevancy score.
<8> The `term` object is used for exact matches, in this case, filtering documents by the `year` field.
<9> The exact value to match in the `year` field.

[[knn-retriever]]
==== kNN Retriever

A kNN retriever returns top documents from a <<knn-search, k-nearest neighbor search (kNN)>>.

===== Parameters

`field`::
(Required, string)
+
include::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=knn-field]

`query_vector`::
(Required if `query_vector_builder` is not defined, array of `float`)
+
include::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=knn-query-vector]

`query_vector_builder`::
(Required if `query_vector` is not defined, query vector builder object)
+
Defines a <<knn-semantic-search, model>> to build a query vector.

`k`::
(Required, integer)
+
Number of nearest neighbors to return as top hits. This value must be fewer than
or equal to `num_candidates`.

`num_candidates`::
(Required, integer)
+
include::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=knn-num-candidates]

`filter`::
(Optional, <<query-dsl, query object or list of query objects>>)
+
include::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=knn-filter]

`similarity`::
(Optional, float)
+
include::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=knn-similarity]

===== Restrictions

The parameters `query_vector` and `query_vector_builder` cannot be used together.

[discrete]
[[knn-retriever-example]]
==== Example

[source,console]
----
GET /restaurants/_search
{
  "retriever": {
    "knn": { <1>
      "field": "vector", <2>
      "query_vector": [10, 22, 77], <3>
      "k": 10, <4>
      "num_candidates": 10 <5>
    }
  }
}
----
// TEST[continued]
<1> Configuration for k-nearest neighbor (knn) search, which is based on vector similarity.
<2> Specifies the field name that contains the vectors.
<3> The query vector against which document vectors are compared in the `knn` search.
<4> The number of nearest neighbors to return as top hits. This value must be fewer than or equal to `num_candidates`.
<5> The size of the initial candidate set from which the final `k` nearest neighbors are selected.

[[rrf-retriever]]
==== RRF Retriever

An <<rrf, RRF>> retriever returns top documents based on the RRF formula,
equally weighting two or more child retrievers.
Reciprocal rank fusion (RRF) is a method for combining multiple result
sets with different relevance indicators into a single result set.

===== Parameters

include::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=rrf-retrievers]

include::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=rrf-rank-constant]

include::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=rrf-rank-window-size]

include::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=rrf-filter]

[discrete]
[[rrf-retriever-example-hybrid]]
==== Example: Hybrid search

A simple hybrid search example (lexical search + dense vector search) combining a `standard` retriever with a `knn` retriever using RRF:

[source,console]
----
GET /restaurants/_search
{
  "retriever": {
    "rrf": { <1>
      "retrievers": [ <2>
        {
          "standard": { <3>
            "query": {
              "multi_match": {
                "query": "Austria",
                "fields": [
                  "city",
                  "region"
                ]
              }
            }
          }
        },
        {
          "knn": { <4>
            "field": "vector",
            "query_vector": [10, 22, 77],
            "k": 10,
            "num_candidates": 10
          }
        }
      ],
      "rank_constant": 1, <5>
      "rank_window_size": 50  <6>
    }
  }
}
----
// TEST[continued]
<1> Defines a retriever tree with an RRF retriever.
<2> The sub-retriever array.
<3> The first sub-retriever is a `standard` retriever.
<4> The second sub-retriever is a `knn` retriever.
<5> The rank constant for the RRF retriever.
<6> The rank window size for the RRF retriever.

[discrete]
[[rrf-retriever-example-hybrid-sparse]]
==== Example: Hybrid search with sparse vectors

A more complex hybrid search example (lexical search + ELSER sparse vector search + dense vector search) using RRF:

[source,console]
----
GET movies/_search
{
  "retriever": {
    "rrf": {
      "retrievers": [
        {
          "standard": {
            "query": {
              "sparse_vector": {
                "field": "plot_embedding",
                "inference_id": "my-elser-model",
                "query": "films that explore psychological depths"
              }
            }
          }
        },
        {
          "standard": {
            "query": {
              "multi_match": {
                "query": "crime",
                "fields": [
                  "plot",
                  "title"
                ]
              }
            }
          }
        },
        {
          "knn": {
            "field": "vector",
            "query_vector": [10, 22, 77],
            "k": 10,
            "num_candidates": 10
          }
        }
      ]
    }
  }
}
----
// TEST[skip:uses ELSER]

[[text-similarity-reranker-retriever]]
==== Text Similarity Re-ranker Retriever

The `text_similarity_reranker` retriever uses an NLP model to improve search results by reordering the top-k documents based on their semantic similarity to the query.

[TIP]
====
Refer to <<semantic-reranking>> for a high level overview of semantic re-ranking.
====

===== Prerequisites

To use `text_similarity_reranker` you must first set up a `rerank` task using the <<put-inference-api, Create {infer} API>>.
The `rerank` task should be set up with a machine learning model that can compute text similarity. Refer to {ml-docs}/ml-nlp-model-ref.html#ml-nlp-model-ref-text-similarity[the Elastic NLP model reference] for a list of third-party text similarity models supported by {es}.

Currently you can:

* Integrate directly with the <<infer-service-cohere,Cohere Rerank inference endpoint>> using the `rerank` task type
* Integrate directly with the <<infer-service-google-vertex-ai,Google Vertex AI inference endpoint>> using the `rerank` task type
* Upload a model to {es} with {eland-docs}/machine-learning.html#ml-nlp-pytorch[Eland] using the `text_similarity` NLP task type.
** Then set up an <<inference-example-eland,{es} service inference endpoint>> with the `rerank` task type
** Refer to the <<text-similarity-reranker-retriever-example-eland,example>> on this page for a step-by-step guide.

===== Parameters
`retriever`::
(Required, <<retriever, retriever>>)
+
The child retriever that generates the initial set of top documents to be re-ranked.

`field`::
(Required, `string`)
+
The document field to be used for text similarity comparisons. This field should contain the text that will be evaluated against the `inferenceText`.

`inference_id`::
(Required, `string`)
+
Unique identifier of the inference endpoint created using the {infer} API.

`inference_text`::
(Required, `string`)
+
The text snippet used as the basis for similarity comparison.

`rank_window_size`::
(Optional, `int`)
+
The number of top documents to consider in the re-ranking process. Defaults to `10`.

`min_score`::
(Optional, `float`)
+
Sets a minimum threshold score for including documents in the re-ranked results. Documents with similarity scores below this threshold will be excluded. Note that score calculations vary depending on the model used.

`filter`::
(Optional, <<query-dsl, query object or list of query objects>>)
+
Applies the specified <<query-dsl-bool-query, boolean query filter>> to the child  <<retriever, retriever>>.
If the child retriever already specifies any filters, then this top-level filter is applied in conjuction
with the filter defined in the child retriever.

[discrete]
[[text-similarity-reranker-retriever-example-cohere]]
==== Example: Cohere Rerank

This example enables out-of-the-box semantic search by re-ranking top documents using the Cohere Rerank API. This approach eliminate the need to generate and store embeddings for all indexed documents.
This requires a <<infer-service-cohere,Cohere Rerank inference endpoint>> using the `rerank` task type.

[source,console]
----
GET /index/_search
{
   "retriever": {
      "text_similarity_reranker": {
         "retriever": {
            "standard": {
               "query": {
                  "match_phrase": {
                     "text": "landmark in Paris"
                  }
               }
            }
         },
         "field": "text",
         "inference_id": "my-cohere-rerank-model",
         "inference_text": "Most famous landmark in Paris",
         "rank_window_size": 100,
         "min_score": 0.5
      }
   }
}
----
// TEST[skip:uses ML]

[discrete]
[[text-similarity-reranker-retriever-example-eland]]
==== Example: Semantic re-ranking with a Hugging Face model

The following example uses the `cross-encoder/ms-marco-MiniLM-L-6-v2` model from Hugging Face to rerank search results based on semantic similarity.
The model must be uploaded to {es} using https://www.elastic.co/guide/en/elasticsearch/client/eland/current/machine-learning.html#ml-nlp-pytorch[Eland].

[TIP]
====
Refer to {ml-docs}/ml-nlp-model-ref.html#ml-nlp-model-ref-text-similarity[the Elastic NLP model reference] for a list of third party text similarity models supported by {es}.
====

Follow these steps to load the model and create a semantic re-ranker.

. Install Eland using `pip`
+
[source,sh]
----
python -m pip install eland[pytorch]
----
+
. Upload the model to {es} using Eland. This example assumes you have an Elastic Cloud deployment and an API key. Refer to the https://www.elastic.co/guide/en/elasticsearch/client/eland/current/machine-learning.html#ml-nlp-pytorch-auth[Eland documentation] for more authentication options.
+
[source,sh]
----
eland_import_hub_model \
  --cloud-id $CLOUD_ID \
  --es-api-key $ES_API_KEY \
  --hub-model-id cross-encoder/ms-marco-MiniLM-L-6-v2 \
  --task-type text_similarity \
  --clear-previous \
  --start
----
+
. Create an inference endpoint for the `rerank` task
+
[source,console]
----
PUT _inference/rerank/my-msmarco-minilm-model
{
  "service": "elasticsearch",
  "service_settings": {
    "num_allocations": 1,
    "num_threads": 1,
    "model_id": "cross-encoder__ms-marco-minilm-l-6-v2"
  }
}
----
// TEST[skip:uses ML]
+
. Define a `text_similarity_rerank` retriever.
+
[source,console]
----
POST movies/_search
{
  "retriever": {
    "text_similarity_reranker": {
      "retriever": {
        "standard": {
          "query": {
            "match": {
              "genre": "drama"
            }
          }
        }
      },
      "field": "plot",
      "inference_id": "my-msmarco-minilm-model",
      "inference_text": "films that explore psychological depths"
    }
  }
}
----
// TEST[skip:uses ML]
+
This retriever uses a standard `match` query to search the `movie` index for films tagged with the genre "drama".
It then re-ranks the results based on semantic similarity to the text in the `inference_text` parameter, using the model we uploaded to {es}.

==== Using `from` and `size` with a retriever tree

The <<search-from-param, `from`>> and <<search-size-param, `size`>>
parameters are provided globally as part of the general
<<search-search, search API>>. They are applied to all retrievers in a
retriever tree unless a specific retriever overrides the `size` parameter
using a different parameter such as `rank_window_size`. Though, the final
search hits are always limited to `size`.

==== Using aggregations with a retriever tree

<<search-aggregations, Aggregations>> are globally specified as part of a search request.
The query used for an aggregation is the combination of all leaf retrievers as `should`
clauses in a <<query-dsl-bool-query, boolean query>>.

==== Restrictions on search parameters when specifying a retriever

When a retriever is specified as part of a search the following elements are not allowed
at the top-level and instead are only allowed as elements of specific retrievers:

* <<request-body-search-query, `query`>>
* <<search-api-knn, `knn`>>
* <<search-after, `search_after`>>
* <<request-body-search-terminate-after, `terminate_after`>>
* <<search-sort-param, `sort`>>
* <<rescore, `rescore`>>

[[behavioral-analytics-cors]]
=== Set up CORS for Behavioral Analytics
++++
<titleabbrev>Set up CORs</titleabbrev>
++++

Behavioral Analytics sends events directly to the {es} API.
This means that the browser makes requests to the {es} API directly.
{es} supports https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS[Cross-Origin Resource Sharing (CORS)^], but this feature is disabled by default.
Therefore the browser will block these requests.

There are two workarounds for this:

* <<behavioral-analytics-cors-enable-cors-elasticsearch, Enable CORS on {es}>>
* <<behavioral-analytics-cors-proxy-request, Proxy the request through a server that supports CORS>>

[discrete]
[[behavioral-analytics-cors-enable-cors-elasticsearch]]
==== Enable CORS on {es}

This is the simplest option.
Enable CORS on {es} by adding the following to your `elasticsearch.yml` file:

[source,yaml]
----
http.cors.allow-origin: "*" # Only use unrestricted value for local development
# Use a specific origin value in production, like `http.cors.allow-origin: "https://<my-website-domain.example>"`
http.cors.enabled: true
http.cors.allow-credentials: true
http.cors.allow-methods: OPTIONS, POST
http.cors.allow-headers: X-Requested-With, X-Auth-Token, Content-Type, Content-Length, Authorization, Access-Control-Allow-Headers, Accept
----

On Elastic Cloud, you can do this by {cloud}/ec-add-user-settings.html#ec-add-user-settings[editing your {es} user settings].

. From your deployment menu, go to the *Edit* page.
. In the *{es}* section, select *Manage user settings and extensions*.
. Update the user settings with the configuration above.
. Select *Save changes*.

[discrete]
[[behavioral-analytics-cors-proxy-request]]
==== Proxy the request through a server that supports CORS

If you are unable to enable CORS on {es}, you can proxy the request through a server that supports CORS.
This is more complicated, but is a viable option.
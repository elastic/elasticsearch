tag::basic-rrf-retriever-with-simple-query-and-knn[]
[discrete]
=== Combining query and kNN with RRF

First, let's examine how to combine two different types of queries: a `kNN` query and a
`query_string` query. While these queries may produce scores in different ranges, we can use
Reciprocal Rank Fusion (`rrf`) to combine the results and generate a merged final result
list.

To implement this in the retriever framework, we start with the top-level element: our `rrf`
retriever. This retriever operates on top of two other retrievers: a `knn` retriever and a
`standard` retriever. Our query structure would look like this:

[source,js]
----
GET /retrievers_example/_search
{
   "retriever":{
       "rrf": {
           "retrievers":[
               {
                   "standard":{
                       "query":{
                           "query_string":{
                              "query": "(information retrieval) OR (artificial intelligence)",
                              "default_field": "text"
                           }
                       }
                   }
               },
               {
                   "knn": {
                       "field": "vector",
                       "query_vector": [0.23, 0.67, 0.89],
                       "k": 3,
                       "num_candidates": 5
                   }
               }
           ],
           "rank_window_size": 10,
           "rank_constant": 1
       }
   },
   "_source": ["text", "topic"]
}
----
//NOTCONSOLE
end::basic-rrf-retriever-with-simple-query-and-knn[]

tag::rrf-retriever-with-collapse[]
[discrete]
=== Grouping results by year with `collapse`

In our result set, we have many documents with the same `year` value. We can clean this
up using the `collapse` parameter with our retriever. This enables grouping results by
any field and returns only the highest-scoring document from each group. In this example
we'll collapse our results based on the `year` field.

[source,js]
----
GET /retrievers_example/_search
{
   "retriever":{
       "rrf": {
           "retrievers":[
               {
                   "standard":{
                       "query":{
                           "query_string":{
                              "query": "(information retrieval) OR (artificial intelligence)",
                              "default_field": "text"
                           }
                       }
                   }
               },
               {
                   "knn": {
                       "field": "vector",
                       "query_vector": [0.23, 0.67, 0.89],
                       "k": 3,
                       "num_candidates": 5
                   }
               }
           ],
           "rank_window_size": 10,
           "rank_constant": 1
       }
   },
   "collapse": {
       "field": "year",
       "inner_hits": {
           "name": "topic related documents",
           "_source": ["text", "year"]
       }
   },
   "_source": ["text", "topic"]
}
----
//NOTCONSOLE
end::rrf-retriever-with-collapse[]

tag::text-similarity-reranker-on-top-of-rrf[]
[discrete]
===  Rerank results of RRF retriever

Previously, we used a `text_similarity_reranker` retriever within an `rrf` retriever.
Because retrievers support full composability, we can also rerank the results of an
`rrf` retriever. Let's apply this to our first example.

[source,js]
----
GET retrievers_example/_search
{
   "retriever": {
       "text_similarity_reranker": {
           "retriever": {
               "rrf": {
                   "retrievers": [
                       {
                           "standard":{
                               "query":{
                                   "query_string":{
                                      "query": "(information retrieval) OR (artificial intelligence)",
                                      "default_field": "text"
                                   }
                               }
                           }
                       },
                       {
                           "knn": {
                               "field": "vector",
                               "query_vector": [
                                   0.23,
                                   0.67,
                                   0.89
                               ],
                               "k": 3,
                               "num_candidates": 5
                           }
                       }
                   ],
                   "rank_window_size": 10,
                   "rank_constant": 1
               }
           },
           "field": "text",
           "inference_id": "my-awesome-rerank-model",
           "inference_text": "What are the state of the art applications of AI in information retrieval?"
       }
   },
   "_source": ["text", "topic"]
}

----
//NOTCONSOLE
end::text-similarity-reranker-on-top-of-rrf[]

tag::rrf-on-top-of-semantic-reranker[]
[discrete]
=== RRF with semantic reranker

For this example, we'll replace our semantic query with the `my-awesome-rerank-model`
reranker we previously configured. Since this is a reranker, it needs an initial pool of
documents to work with. In this case, we'll filter for documents about `ai` topics.

[source,js]
----
GET /retrievers_example/_search
{
    "retriever": {
        "rrf": {
            "retrievers": [
                {
                    "knn": {
                        "field": "vector",
                        "query_vector": [
                            0.23,
                            0.67,
                            0.89
                        ],
                        "k": 3,
                        "num_candidates": 5
                    }
                },
                {
                    "text_similarity_reranker": {
                        "retriever": {
                            "standard": {
                                "query": {
                                    "term": {
                                        "topic": "ai"
                                    }
                                }
                            }
                        },
                        "field": "text",
                        "inference_id": "my-awesome-rerank-model",
                        "inference_text": "Can I use generative AI to identify user intent and improve search relevance?"
                    }
                }
            ],
            "rank_window_size": 10,
            "rank_constant": 1
        }
    },
    "_source": [
        "text",
        "topic"
    ]
}
----
//NOTCONSOLE
end::rrf-on-top-of-semantic-reranker[]

tag::chaining-text-similarity-reranker-retrievers[]
[discrete]
=== Chaining multiple semantic rerankers

Full composability means we can chain together multiple retrievers of the same type. For instance, imagine we have a computationally expensive reranker that's specialized for AI content. We can rerank the results of a `text_similarity_reranker` using another `text_similarity_reranker` retriever. Each reranker can operate on different fields and/or use different inference services.

[source,js]
----
GET retrievers_example/_search
{
   "retriever": {
       "text_similarity_reranker": {
           "retriever": {
               "text_similarity_reranker": {
                   "retriever": {
                       "knn": {
                           "field": "vector",
                           "query_vector": [
                               0.23,
                               0.67,
                               0.89
                           ],
                           "k": 3,
                           "num_candidates": 5
                       }
                   },
                   "rank_window_size": 100,
                   "field": "text",
                   "inference_id": "my-awesome-rerank-model",
                   "inference_text": "What are the state of the art applications of AI in information retrieval?"
               }
           },
           "rank_window_size": 10,
           "field": "text",
           "inference_id": "my-other-more-expensive-rerank-model",
           "inference_text": "Applications of Large Language Models in technology and their impact on user satisfaction"
       }
   },
   "_source": [
       "text",
       "topic"
   ]
}
----
//NOTCONSOLE


Note that our example applies two reranking steps. First, we rerank the top 100
documents from the `knn` search using the `my-awesome-rerank-model` reranker. Then we
pick the top 10 results and rerank them using the more fine-grained
`my-other-more-expensive-rerank-model`.

end::chaining-text-similarity-reranker-retrievers[]

tag::rrf-retriever-with-aggs[]
[discrete]
=== Combine RRF with aggregations

Retrievers support both composability and most of the standard `_search` functionality. For instance,
we can compute aggregations with the `rrf` retriever. When using a compound retriever,
the aggregations are computed based on its nested retrievers. In the following example,
the `terms` aggregation for the `topic` field will include all results, not just the top `rank_window_size`,
from the 2 nested retrievers, i.e. all documents whose `year` field is greater then 2023, and whose `topic` field
matches the term `elastic`.

[source,js]
----
GET retrievers_example/_search
{
    "retriever": {
        "rrf": {
            "retrievers": [
                {
                    "standard": {
                        "query": {
                            "range": {
                                "year": {
                                    "gt": 2023
                                }
                            }
                        }
                    }
                },
                {
                    "standard": {
                        "query": {
                            "term": {
                                "topic": "elastic"
                            }
                        }
                    }
                }
            ],
            "rank_window_size": 10,
            "rank_constant": 1
        }
    },
    "_source": [
        "text",
        "topic"
    ],
    "aggs": {
        "topics": {
            "terms": {
                "field": "topic"
            }
        }
    }
}
----
//NOTCONSOLE
end::rrf-retriever-with-aggs[]

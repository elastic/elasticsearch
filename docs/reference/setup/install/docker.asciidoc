[[docker]]
=== Install {es} with Docker

{es} is also available as Docker images. A list of all published Docker
images and tags is available at
https://www.docker.elastic.co[www.docker.elastic.co]. The source files are
in
https://github.com/elastic/elasticsearch/blob/{branch}/distribution/docker[Github].

include::license.asciidoc[]

==== Pulling the image

Obtaining {es} for Docker is as simple as issuing a +docker pull+ command
against the Elastic Docker registry.

ifeval::["{release-state}"=="unreleased"]

WARNING: Version {version} of {es} has not yet been released, so no
Docker image is currently available for this version.

endif::[]

ifeval::["{release-state}"!="unreleased"]

[source,sh,subs="attributes"]
--------------------------------------------
docker pull {docker-repo}:{version}
--------------------------------------------

endif::[]

[[docker-cli-run-dev-mode]]
==== Starting a single node cluster with Docker

ifeval::["{release-state}"=="unreleased"]

WARNING: Version {version} of the {es} Docker image has not yet been released.

endif::[]

ifeval::["{release-state}"!="unreleased"]

To start a single-node {es} cluster for development or testing, specify
<<single-node-discovery,single-node discovery>> to bypass the <<bootstrap-checks,bootstrap checks>>:

[source,sh,subs="attributes"]
--------------------------------------------
docker run -p 127.0.0.1:9200:9200 -p 127.0.0.1:9300:9300 -e "discovery.type=single-node" {docker-image}
--------------------------------------------

endif::[]

[[docker-compose-file]]
==== Starting a multi-node cluster with Docker Compose

To get a three-node {es} cluster up and running in Docker,
you can use Docker Compose:

. Create a `docker-compose.yml` file:
ifeval::["{release-state}"=="unreleased"]
+
--
WARNING: Version {version} of {es} has not yet been released, so a
`docker-compose.yml` is not available for this version.

endif::[]

ifeval::["{release-state}"!="unreleased"]
[source,yaml,subs="attributes"]
--------------------------------------------
include::docker-compose.yml[]
--------------------------------------------
endif::[]

NOTE: This sample `docker-compose.yml` file uses the `ES_JAVA_OPTS`
environment variable to manually set the heap size to 512MB. We do not recommend
using `ES_JAVA_OPTS` in production. See <<docker-set-heap-size>>.

This sample Docker Compose file brings up a three-node {es} cluster.
Node `es01` listens on `localhost:9200` and `es02` and `es03` talk to `es01` over a Docker network.

Please note that this configuration exposes port 9200 on all network interfaces, and given how
Docker manipulates `iptables` on Linux, this means that your {es} cluster is publicly accessible,
potentially ignoring any firewall settings. If you don't want to expose port 9200 and instead use
a reverse proxy, replace `9200:9200` with `127.0.0.1:9200:9200` in the docker-compose.yml file.
{es} will then only be accessible from the host machine itself.

The https://docs.docker.com/storage/volumes[Docker named volumes]
`data01`, `data02`, and `data03` store the node data directories so the data persists across restarts.
If they don't already exist, `docker-compose` creates them when you bring up the cluster.
--
. Make sure Docker Engine is allotted at least 4GiB of memory.
In Docker Desktop, you configure resource usage on the Advanced tab in Preference (macOS)
or Settings (Windows).
+
NOTE: Docker Compose is not pre-installed with Docker on Linux.
See docs.docker.com for installation instructions:
https://docs.docker.com/compose/install[Install Compose on Linux]

. Run `docker-compose` to bring up the cluster:
+
[source,sh,subs="attributes"]
--------------------------------------------
docker-compose up
--------------------------------------------

. Submit a `_cat/nodes` request to see that the nodes are up and running:
+
[source,sh]
--------------------------------------------------
curl -X GET "localhost:9200/_cat/nodes?v=true&pretty"
--------------------------------------------------
// NOTCONSOLE

Log messages go to the console and are handled by the configured Docker logging driver.
By default you can access logs with `docker logs`. If you would prefer the {es}
container to write logs to disk, set the `ES_LOG_STYLE` environment variable to `file`.
This causes {es} to use the same logging configuration as other {es} distribution formats.

To stop the cluster, run `docker-compose down`.
The data in the Docker volumes is preserved and loaded
when you restart the cluster with `docker-compose up`.
To **delete the data volumes** when you bring down the cluster,
specify the `-v` option: `docker-compose down -v`.


[[next-getting-started-tls-docker]]
===== Start a multi-node cluster with TLS enabled

See <<configuring-tls-docker>> and
{stack-gs}/get-started-docker.html#get-started-docker-tls[Run the {stack} in Docker with TLS enabled].

[[docker-prod-prerequisites]]
==== Using the Docker images in production

The following requirements and recommendations apply when running {es} in Docker in production.

===== Set `vm.max_map_count` to at least `262144`

The `vm.max_map_count` kernel setting must be set to at least `262144` for production use.

How you set `vm.max_map_count` depends on your platform.

====== Linux

To view the current value for the `vm.max_map_count` setting, run:

[source,sh]
--------------------------------------------
grep vm.max_map_count /etc/sysctl.conf
vm.max_map_count=262144
--------------------------------------------

To apply the setting on a live system, run:

[source,sh]
--------------------------------------------
sysctl -w vm.max_map_count=262144
--------------------------------------------

To permanently change the value for the `vm.max_map_count` setting, update the
value in `/etc/sysctl.conf`.

====== macOS with https://docs.docker.com/docker-for-mac[Docker for Mac]

The `vm.max_map_count` setting must be set within the xhyve virtual machine:

. From the command line, run:
+
[source,sh]
--------------------------------------------
screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty
--------------------------------------------

. Press enter and use `sysctl` to configure `vm.max_map_count`:
+
[source,sh]
--------------------------------------------
sysctl -w vm.max_map_count=262144
--------------------------------------------

. To exit the `screen` session, type `Ctrl a d`.

====== Windows and macOS with https://www.docker.com/products/docker-desktop[Docker Desktop]

The `vm.max_map_count` setting must be set via docker-machine:

[source,sh]
--------------------------------------------
docker-machine ssh
sudo sysctl -w vm.max_map_count=262144
--------------------------------------------

====== Windows with https://docs.docker.com/docker-for-windows/wsl[Docker Desktop WSL 2 backend]

The `vm.max_map_count` setting must be set in the docker-desktop container:

[source,sh]
--------------------------------------------
wsl -d docker-desktop
sysctl -w vm.max_map_count=262144
--------------------------------------------


===== Configuration files must be readable by the `elasticsearch` user

By default, {es} runs inside the container as user `elasticsearch` using
uid:gid `1000:0`.

IMPORTANT: One exception is https://docs.openshift.com/container-platform/3.6/creating_images/guidelines.html#openshift-specific-guidelines[Openshift],
which runs containers using an arbitrarily assigned user ID.
Openshift presents persistent volumes with the gid set to `0`, which works without any adjustments.

If you are bind-mounting a local directory or file, it must be readable by the `elasticsearch` user.
In addition, this user must have write access to the <<path-settings,config, data and log dirs>>
({es} needs write access to the `config` directory so that it can generate a keystore).
A good strategy is to grant group access to gid `0` for the local directory.

For example, to prepare a local directory for storing data through a bind-mount:

[source,sh]
--------------------------------------------
mkdir esdatadir
chmod g+rwx esdatadir
chgrp 0 esdatadir
--------------------------------------------

You can also run an {es} container using both a custom UID and GID. You
must ensure that file permissions will not prevent {es} from executing. You
can use one of two options:

* Bind-mount the `config`, `data` and `logs`
  directories. If you intend to install plugins and prefer not to
  <<_c_customized_image, create a custom Docker image>>, you must also
  bind-mount the `plugins` directory.
* Pass the `--group-add 0` command line option to `docker run`. This
  ensures that the user under which {es} is running is also a member of the
  `root` (GID 0) group inside the container.

As a last resort, you can force the container to mutate the ownership of
any bind-mounts used for the <<path-settings,data and log dirs>> through the
environment variable `TAKE_FILE_OWNERSHIP`. When you do this, they will be owned by
uid:gid `1000:0`, which provides the required read/write access to the {es} process.


===== Increase ulimits for nofile and nproc

Increased ulimits for <<setting-system-settings,nofile>> and <<max-number-threads-check,nproc>>
must be available for the {es} containers.
Verify the https://github.com/moby/moby/tree/ea4d1243953e6b652082305a9c3cda8656edab26/contrib/init[init system]
for the Docker daemon sets them to acceptable values.

To check the Docker daemon defaults for ulimits, run:

[source,sh]
--------------------------------------------
docker run --rm docker.elastic.co/elasticsearch/elasticsearch:{version} /bin/bash -c 'ulimit -Hn && ulimit -Sn && ulimit -Hu && ulimit -Su'
--------------------------------------------

If needed, adjust them in the Daemon or override them per container.
For example, when using `docker run`, set:

[source,sh]
--------------------------------------------
--ulimit nofile=65535:65535
--------------------------------------------

===== Disable swapping

Swapping needs to be disabled for performance and node stability.
For information about ways to do this, see <<setup-configuration-memory>>.

If you opt for the `bootstrap.memory_lock: true` approach,
you also need to define the `memlock: true` ulimit in the
https://docs.docker.com/engine/reference/commandline/dockerd/#default-ulimits[Docker Daemon],
or explicitly set for the container as shown in the  <<docker-compose-file, sample compose file>>.
When using `docker run`, you can specify:

[source,sh]
----
-e "bootstrap.memory_lock=true" --ulimit memlock=-1:-1
----

===== Randomize published ports

The image https://docs.docker.com/engine/reference/builder/#/expose[exposes]
TCP ports 9200 and 9300. For production clusters, randomizing the
published ports with `--publish-all` is recommended,
unless you are pinning one container per host.

[[docker-set-heap-size]]
===== Manually set the heap size

By default, {es} automatically sizes JVM heap based on a nodes's
<<node-roles,roles>> and the total memory available to the node's container. We
recommend this default sizing for most production environments. If needed, you
can override default sizing by manually setting JVM heap size.

To manually set the heap size in production, bind mount a <<set-jvm-options,JVM
options>> file under `/usr/share/elasticsearch/config/jvm.options.d` that
includes your desired <<set-jvm-heap-size,heap size>> settings.

For testing, you can also manually set the heap size using the `ES_JAVA_OPTS`
environment variable. For example, to use 16GB, specify `-e
ES_JAVA_OPTS="-Xms16g -Xmx16g"` with `docker run`. The `ES_JAVA_OPTS` variable
overrides all other JVM options. We do not recommend using `ES_JAVA_OPTS` in
production. The `docker-compose.yml` file above sets the heap size to 512MB.

===== Pin deployments to a specific image version

Pin your deployments to a specific version of the {es} Docker image. For
example +docker.elastic.co/elasticsearch/elasticsearch:{version}+.

===== Always bind data volumes

You should use a volume bound on `/usr/share/elasticsearch/data` for the following reasons:

. The data of your {es} node won't be lost if the container is killed

. {es} is I/O sensitive and the Docker storage driver is not ideal for fast I/O

. It allows the use of advanced
https://docs.docker.com/engine/extend/plugins/#volume-plugins[Docker volume plugins]

===== Avoid using `loop-lvm` mode

If you are using the devicemapper storage driver, do not use the default `loop-lvm` mode.
Configure docker-engine to use
https://docs.docker.com/engine/userguide/storagedriver/device-mapper-driver/#configure-docker-with-devicemapper[direct-lvm].

===== Centralize your logs

Consider centralizing your logs by using a different
https://docs.docker.com/engine/admin/logging/overview/[logging driver]. Also
note that the default json-file logging driver is not ideally suited for
production use.

[[docker-configuration-methods]]
==== Configuring {es} with Docker

When you run in Docker, the <<config-files-location,{es} configuration files>> are loaded from
`/usr/share/elasticsearch/config/`.

To use custom configuration files, you <<docker-config-bind-mount, bind-mount the files>>
over the configuration files in the image.

You can set individual {es} configuration parameters using Docker environment variables.
The <<docker-compose-file, sample compose file>> and the
<<docker-cli-run-dev-mode, single-node example>> use this method. You can
use the setting name directly as the environment variable name. If
you cannot do this, for example because your orchestration platform forbids
periods in environment variable names, then you can use an alternative
style by converting the setting name as follows.

. Change the setting name to uppercase
. Prefix it with `ES_SETTING_`
. Escape any underscores (`_`) by duplicating them
. Convert all periods (`.`) to underscores (`_`)

For example, `-e bootstrap.memory_lock=true` becomes
`-e ES_SETTING_BOOTSTRAP_MEMORY__LOCK=true`.

You can use the contents of a file to set the value of the
`ELASTIC_PASSWORD` or `KEYSTORE_PASSWORD` environment variables, by
suffixing the environment variable name with `_FILE`. This is useful for
passing secrets such as passwords to {es} without specifying them directly.

For example, to set the {es} bootstrap password from a file, you can bind mount the
file and set the `ELASTIC_PASSWORD_FILE` environment variable to the mount location.
If you mount the password file to `/run/secrets/bootstrapPassword.txt`, specify:

[source,sh]
--------------------------------------------
-e ELASTIC_PASSWORD_FILE=/run/secrets/bootstrapPassword.txt
--------------------------------------------

You can override the default command for the image to pass {es} configuration
parameters as command line options. For example:

[source,sh]
--------------------------------------------
docker run <various parameters> bin/elasticsearch -Ecluster.name=mynewclustername
--------------------------------------------

While bind-mounting your configuration files is usually the preferred method in production,
you can also <<_c_customized_image, create a custom Docker image>>
that contains your configuration.

[[docker-config-bind-mount]]
===== Mounting {es} configuration files

Create custom config files and bind-mount them over the corresponding files in the Docker image.
For example, to bind-mount `custom_elasticsearch.yml` with `docker run`, specify:

[source,sh]
--------------------------------------------
-v full_path_to/custom_elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
--------------------------------------------

If you bind-mount a custom `elasticsearch.yml` file, ensure it includes the
`network.host: 0.0.0.0` setting. This setting ensures the node is reachable for
HTTP and transport traffic, provided its ports are exposed. The Docker image's
built-in `elasticsearch.yml` file includes this setting by default.

IMPORTANT: The container **runs {es} as user `elasticsearch` using
uid:gid `1000:0`**. Bind mounted host directories and files must be accessible by this user,
and the data and log directories must be writable by this user.

[[docker-keystore-bind-mount]]
===== Create an encrypted {es} keystore

By default, {es} will auto-generate a keystore file for <<secure-settings,secure
settings>>. This file is obfuscated but not encrypted.

To encrypt your secure settings with a password and have them persist outside
the container, use a `docker run` command to manually create the keystore
instead. The command must:

* Bind-mount the `config` directory. The command will create an
  `elasticsearch.keystore` file in this directory. To avoid errors, do
  not directly bind-mount the `elasticsearch.keystore` file.
* Use the `elasticsearch-keystore` tool with the `create -p` option. You'll be
  prompted to enter a password for the keystore.

ifeval::["{release-state}"!="unreleased"]
For example:

[source,sh,subs="attributes"]
----
docker run -it --rm \
-v full_path_to/config:/usr/share/elasticsearch/config \
docker.elastic.co/elasticsearch/elasticsearch:{version} \
bin/elasticsearch-keystore create -p
----

You can also use a `docker run` command to add or update secure settings in the
keystore. You'll be prompted to enter the setting values. If the keystore is
encrypted, you'll also be prompted to enter the keystore password.

[source,sh,subs="attributes"]
----
docker run -it --rm \
-v full_path_to/config:/usr/share/elasticsearch/config \
docker.elastic.co/elasticsearch/elasticsearch:{version} \
bin/elasticsearch-keystore \
add my.secure.setting \
my.other.secure.setting
----
endif::[]

If you've already created the keystore and don't need to update it, you can
bind-mount the `elasticsearch.keystore` file directly. You can use the
`KEYSTORE_PASSWORD` environment variable to provide the keystore password to the
container at startup. For example, a `docker run` command might have the
following options:

[source,sh]
----
-v full_path_to/config/elasticsearch.keystore:/usr/share/elasticsearch/config/elasticsearch.keystore
-e KEYSTORE_PASSWORD=mypassword
----

[[_c_customized_image]]
===== Using custom Docker images
In some environments, it might make more sense to prepare a custom image that contains
your configuration. A `Dockerfile` to achieve this might be as simple as:

[source,sh,subs="attributes"]
--------------------------------------------
FROM docker.elastic.co/elasticsearch/elasticsearch:{version}
COPY --chown=elasticsearch:elasticsearch elasticsearch.yml /usr/share/elasticsearch/config/
--------------------------------------------

You could then build and run the image with:

[source,sh]
--------------------------------------------
docker build --tag=elasticsearch-custom .
docker run -ti -v /usr/share/elasticsearch/data elasticsearch-custom
--------------------------------------------

Some plugins require additional security permissions.
You must explicitly accept them either by:

* Attaching a `tty` when you run the Docker image and allowing the permissions when prompted.
* Inspecting the security permissions and accepting them (if appropriate) by adding the `--batch` flag to the plugin install command.

See {plugins}/_other_command_line_parameters.html[Plugin management]
for more information.

[[troubleshoot-docker-errors]]
==== Troubleshoot Docker errors for {es}

Here’s how to resolve common errors when running {es} with Docker.

===== elasticsearch.keystore is a directory

[source,txt]
----
Exception in thread "main" org.elasticsearch.bootstrap.BootstrapException: java.io.IOException: Is a directory: SimpleFSIndexInput(path="/usr/share/elasticsearch/config/elasticsearch.keystore") Likely root cause: java.io.IOException: Is a directory
----

A <<docker-keystore-bind-mount,keystore-related>> `docker run` command attempted
to directly bind-mount an `elasticsearch.keystore` file that doesn't exist. If
you use the `-v` or `--volume` flag to mount a file that doesn't exist, Docker
instead creates a directory with the same name.

To resolve this error:

. Delete the `elasticsearch.keystore` directory in the `config` directory.
. Update the `-v` or `--volume` flag to point to the `config` directory path
  rather than the keystore file's path. For an example, see
  <<docker-keystore-bind-mount>>.
. Retry the command.

===== elasticsearch.keystore: Device or resource busy

[source,txt]
----
Exception in thread "main" java.nio.file.FileSystemException: /usr/share/elasticsearch/config/elasticsearch.keystore.tmp -> /usr/share/elasticsearch/config/elasticsearch.keystore: Device or resource busy
----

A `docker run` command attempted to <<docker-keystore-bind-mount,update the
keystore>> while directly bind-mounting the `elasticsearch.keystore` file. To
update the keystore, the container requires access to other files in the
`config` directory, such as `keystore.tmp`.

To resolve this error:

. Update the `-v` or `--volume` flag to point to the `config` directory
  path rather than the keystore file's path. For an example, see
  <<docker-keystore-bind-mount>>.
. Retry the command.

include::next-steps.asciidoc[]

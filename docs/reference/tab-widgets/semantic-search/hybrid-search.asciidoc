// tag::elser[]

Hybrid search between a semantic and lexical query can be achieved by using an
<<rrf-retriever, `rrf` retriever> as part of your search request. Provide a
`text_expansion` query and a full-text query as
<<standard-retriever, `standard` retrievers>> for the `rrf` retriever. The `rrf`
retriever uses <<rrf, reciprocal rank fusion>> to rank the top documents.

[source,console]
----
GET my-index/_search
{
  "retriever": {
    "rrf": {
      "retrievers": [
        {
          "standard": {
            "query": {
              "match": {
                "my_text_field": "the query string"
              }
            }
          }
        },
        {
          "standard": {
            "query": {
              "text_expansion": {
                "my_tokens": {
                  "model_id": ".elser_model_2",
                  "model_text": "the query string"
                }
              }
            }
          }
        }
      ]
    }
  }
}
----
// TEST[skip:TBD]

// end::elser[]


// tag::dense-vector[]

Hybrid search between a semantic and lexical query can be achieved by providing:

* an `rrf` retriever to rank top documents using <<rrf, reciprocal rank fusion>>
* a `standard` retriever as a child retriever with `query` clause for the full-text query
* a `knn` retriever as a child retriever with the kNN search that queries the dense vector field

[source,console]
----
GET my-index/_search
{
  "retriever": {
    "rrf": {
      "retrievers": [
        {
          "standard": {
            "query": {
              "match": {
                "my_text_field": "the query string"
              }
            }
          }
        },
        {
          "knn": {
            "field": "text_embedding.predicted_value",
            "k": 10,
            "num_candidates": 100,
            "query_vector_builder": {
              "text_embedding": {
                "model_id": "sentence-transformers__msmarco-minilm-l-12-v3",
                "model_text": "the query string"
              }
            }
          }
        }
      ]
    }
  }
}
----
// TEST[skip:TBD]

// end::dense-vector[]

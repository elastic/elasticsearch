/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

apply plugin: 'elasticsearch.publish'
apply plugin: 'elasticsearch.mrjar'

dependencies {
  // This dependency is used only by :libs:core for null-checking interop with other tools
  compileOnly "com.google.code.findbugs:jsr305:3.0.2"
  compileOnly project(':libs:elasticsearch-logging')

  testImplementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  testImplementation "junit:junit:${versions.junit}"
  testImplementation "org.hamcrest:hamcrest:${versions.hamcrest}"

  testImplementation(project(":test:framework")) {
    exclude group: 'org.elasticsearch', module: 'elasticsearch-core'
  }
}

tasks.named('forbiddenApisMain').configure {
  // :libs:elasticsearch-core does not depend on server
  // TODO: Need to decide how we want to handle for forbidden signatures with the changes to server
  replaceSignatureFiles 'jdk-signatures'
}

tasks.named("thirdPartyAudit").configure {
  ignoreMissingClasses(
          // from log4j
          'org/osgi/framework/AdaptPermission',
          'org/osgi/framework/AdminPermission',
          'org/osgi/framework/Bundle',
          'org/osgi/framework/BundleActivator',
          'org/osgi/framework/BundleContext',
          'org/osgi/framework/BundleEvent',
          'org/osgi/framework/SynchronousBundleListener',
          'org/osgi/framework/wiring/BundleWire',
          'org/osgi/framework/wiring/BundleWiring'
  )
}

dependencies {
  jarHell sourceSets.main.output
}

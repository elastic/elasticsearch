setup:
  - do:
      indices.create:
          index: test
          body:
            settings:
              number_of_shards: 1
            mappings:
              properties:
                mentions:
                  type: keyword
                notifications:
                  type: keyword

  - do:
      bulk:
        refresh: true
        index: test
        body: |
          {"index":{"_id": "foo|bar|baz0"}}
          {"notifications" : ["abc"]}
          {"index":{"_id": "foo|bar|baz1"}}
          {"mentions" : ["abc"]}

---
"Terms lookup gets cached":
  - do:
      search:
        rest_total_hits_as_int: true
        size: 0
        request_cache: true
        preference: hit-same-shard-copy
        body:
          aggs:
            itemsNotify:
              filter:
                terms:
                  mentions:
                    index: test
                    id: foo|bar|baz0
                    path: notifications
              aggs:
                mentions:
                  terms:
                    field: mentions

  # validate result
  - match: { hits.total: 2 }
  - match: { aggregations.itemsNotify.doc_count: 1 }
  - length: { aggregations.itemsNotify.mentions.buckets: 1 }
  - match: { aggregations.itemsNotify.mentions.buckets.0.key: "abc" }

  # The first request will miss the cache
  - do:
      indices.stats: { index: test, metric: request_cache}
  - gte: { _shards.total: 1 }
  - match: { indices.test.total.request_cache.hit_count: 0 }
  - match: { indices.test.total.request_cache.miss_count: 1 }

  - do:
      search:
        rest_total_hits_as_int: true
        size: 0
        request_cache: true
        preference: hit-same-shard-copy
        body:
          aggs:
            itemsNotify:
              filter:
                terms:
                  mentions:
                    index: test
                    id: foo|bar|baz0
                    path: notifications
              aggs:
                mentions:
                  terms:
                    field: mentions

  # validate result
  - match: { hits.total: 2 }
  - match: { aggregations.itemsNotify.doc_count: 1 }
  - length: { aggregations.itemsNotify.mentions.buckets: 1 }
  - match: { aggregations.itemsNotify.mentions.buckets.0.key: "abc" }

  # The second result with hit the cache
  - do:
      indices.stats: { index: test, metric: request_cache}
  - gte: { _shards.total: 1 }
  - match: { indices.test.total.request_cache.hit_count: 1 }
  - match: { indices.test.total.request_cache.miss_count: 1 }

---
"Standard queries get cached":
  - do:
      search:
        rest_total_hits_as_int: true
        size: 0
        request_cache: true
        preference: hit-same-shard-copy
        body:
          aggs:
            itemsNotify:
              filter:
                terms:
                  mentions: ["abc"]
              aggs:
                mentions:
                  terms:
                    field: mentions

  # Validate result
  - match: { hits.total: 2 }
  - match: { aggregations.itemsNotify.doc_count: 1 }
  - length: { aggregations.itemsNotify.mentions.buckets: 1 }
  - match: { aggregations.itemsNotify.mentions.buckets.0.key: "abc" }

  # The first request will miss the cache
  - do:
      indices.stats: { index: test, metric: request_cache}
  - gte: { _shards.total: 1 }
  - match: { indices.test.total.request_cache.hit_count: 0 }
  - match: { indices.test.total.request_cache.miss_count: 1 }
  - is_true: indices.test

  # Try again - it'll cache
  - do:
      search:
        rest_total_hits_as_int: true
        size: 0
        request_cache: true
        preference: hit-same-shard-copy
        body:
          aggs:
            itemsNotify:
              filter:
                terms:
                  mentions: ["abc"]
              aggs:
                mentions:
                  terms:
                    field: mentions

  # Validate result
  - match: { hits.total: 2 }
  - match: { aggregations.itemsNotify.doc_count: 1 }
  - length: { aggregations.itemsNotify.mentions.buckets: 1 }
  - match: { aggregations.itemsNotify.mentions.buckets.0.key: "abc" }

  # The first request will miss the cache
  - do:
      indices.stats: { index: test, metric: request_cache}
  - gte: { _shards.total: 1 }
  - match: { indices.test.total.request_cache.hit_count: 1 }
  - match: { indices.test.total.request_cache.miss_count: 1 }

---
"As a child of terms":
  - do:
      bulk:
        refresh: true
        index: test
        body: |
          {"index":{}}
          {"category": "bar", "val": 8}
          {"index":{}}
          {"category": "bar", "val": 0}
  - do:
      search:
        size: 0
        body:
          aggs:
            category:
              terms:
                field: category.keyword
              aggs:
                high:
                  filter:
                    range:
                      val:
                        gte: 7

  - match: { hits.total.value: 4 }
  - match: { aggregations.category.buckets.0.key: bar }
  - match: { aggregations.category.buckets.0.doc_count: 2 }
  - match: { aggregations.category.buckets.0.high.doc_count: 1 }

---
"Sorting terms":
  - skip:
      version: " - 7.6.99"
      reason: fixed in 7.7.0

  - do:
      bulk:
        refresh: true
        index: test
        body: |
          {"index":{}}
          {"category": "foo", "val": 7}
          {"index":{}}
          {"category": "bar", "val": 8}
          {"index":{}}
          {"category": "bar", "val": 9}
          {"index":{}}
          {"category": "bar", "val": 0}
  - do:
      search:
        size: 0
        body:
          aggs:
            category:
              terms:
                field: category.keyword
                order:
                  high.doc_count: desc
              aggs:
                high:
                  filter:
                    range:
                      val:
                        gte: 7

  - match: { hits.total.value: 6 }
  - match: { aggregations.category.buckets.0.key: bar }
  - match: { aggregations.category.buckets.0.doc_count: 3 }
  - match: { aggregations.category.buckets.0.high.doc_count: 2 }
  - match: { aggregations.category.buckets.1.key: foo }
  - match: { aggregations.category.buckets.1.doc_count: 1 }
  - match: { aggregations.category.buckets.1.high.doc_count: 1 }

---
teardown:
  - do:
      indices.delete_data_stream:
        name: logs-foobar
        ignore: 404

  - do:
      indices.delete_index_template:
        name: generic_logs_template
        ignore: 404

  - do:
      indices.delete_data_stream:
        name: destination-data-stream
        ignore: 404

  - do:
      ingest.delete_pipeline:
        id: "parent_failing_pipeline"
        ignore: 404

  - do:
      ingest.delete_pipeline:
        id: "failing_pipeline"
        ignore: 404

  - do:
      ingest.delete_pipeline:
        id: "reroute_pipeline"
        ignore: 404

---
"Redirect ingest failure in data stream to failure store":
  - requires:
      reason: "Failure store status was added in 8.16+"
      test_runner_features: [capabilities, allowed_warnings, contains]
      capabilities:
        - method: POST
          path: /{index}/_doc
          capabilities: [ 'failure_store_status' ]
  - do:
      ingest.put_pipeline:
        id: "failing_pipeline"
        body:  >
          {
            "description": "_description",
            "processors": [
              {
                "fail": {
                  "message" : "error_message",
                  "tag": "foo-tag"
                }
              }
            ]
          }
  - match: { acknowledged: true }

  - do:
      ingest.put_pipeline:
        id: "parent_failing_pipeline"
        body:  >
          {
            "processors": [
              {
                "pipeline": {
                  "name": "failing_pipeline"
                }
              }
            ]
          }
  - match: { acknowledged: true }

  - do:
      allowed_warnings:
        - "index template [generic_logs_template] has index patterns [logs-*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [generic_logs_template] will take precedence during new index creation"
      indices.put_index_template:
        name: generic_logs_template
        body:
          index_patterns: logs-*
          data_stream:
            failure_store: true
          template:
            settings:
              number_of_shards:   1
              number_of_replicas: 1
              index:
                default_pipeline: "parent_failing_pipeline"

  - do:
      index:
        index:  logs-foobar
        refresh: true
        body:
          '@timestamp': '2020-12-12'
          foo: bar
  - match: { failure_store: used}
  - match: { _index: '/\.fs-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000001/'}

  - do:
      indices.get_data_stream:
        name: logs-foobar
  - match: { data_streams.0.name: logs-foobar }
  - match: { data_streams.0.timestamp_field.name: '@timestamp' }
  - length: { data_streams.0.indices: 1 }
  - match: { data_streams.0.indices.0.index_name: '/\.ds-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000001/' }
  - match: { data_streams.0.failure_store.enabled: true }
  - length: { data_streams.0.failure_store.indices: 1 }
  - match: { data_streams.0.failure_store.indices.0.index_name: '/\.fs-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000001/' }

  - do:
      search:
        index: logs-foobar
        body: { query: { match_all: {} } }
  - length:   { hits.hits: 0  }

  - do:
      search:
        index: .fs-logs-foobar-*
  - length:   { hits.hits: 1  }
  - match: { hits.hits.0._index: "/\\.fs-logs-foobar-(\\d{4}\\.\\d{2}\\.\\d{2}-)?000001/" }
  - exists: hits.hits.0._source.@timestamp
  - not_exists: hits.hits.0._source.foo
  - not_exists: hits.hits.0._source.document.id
  - match: { hits.hits.0._source.document.index: 'logs-foobar' }
  - match: { hits.hits.0._source.document.source.@timestamp: '2020-12-12' }
  - match: { hits.hits.0._source.document.source.foo: 'bar' }
  - match: { hits.hits.0._source.error.type: 'fail_processor_exception' }
  - match: { hits.hits.0._source.error.message: 'error_message' }
  - contains: { hits.hits.0._source.error.stack_trace: 'error_message' }
  - length: { hits.hits.0._source.error.pipeline_trace: 2 }
  - match: { hits.hits.0._source.error.pipeline_trace.0: 'parent_failing_pipeline' }
  - match: { hits.hits.0._source.error.pipeline_trace.1: 'failing_pipeline' }
  - match: { hits.hits.0._source.error.pipeline: 'failing_pipeline' }
  - match: { hits.hits.0._source.error.processor_tag: 'foo-tag' }
  - match: { hits.hits.0._source.error.processor_type: 'fail' }

  - do:
      indices.delete_data_stream:
        name: logs-foobar
  - is_true: acknowledged

  - do:
      indices.delete:
        index: .fs-logs-foobar-*
  - is_true: acknowledged

---
"Redirect shard failure in data stream to failure store":
  - requires:
      reason: "Failure store status was added in 8.16+"
      test_runner_features: [ capabilities, allowed_warnings, contains ]
      capabilities:
        - method: POST
          path: /{index}/_doc
          capabilities: [ 'failure_store_status' ]

  - do:
      allowed_warnings:
        - "index template [generic_logs_template] has index patterns [logs-*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [generic_logs_template] will take precedence during new index creation"
      indices.put_index_template:
        name: generic_logs_template
        body:
          index_patterns: logs-*
          data_stream:
            failure_store: true
          template:
            settings:
              number_of_shards:   1
              number_of_replicas: 1
            mappings:
              properties:
                '@timestamp':
                  type: date
                count:
                  type: long


  - do:
      index:
        index:  logs-foobar
        refresh: true
        body:
          '@timestamp': '2020-12-12'
          count: 'invalid value'
  - match: { _index: '/\.fs-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000002/'}
  - match: { failure_store: used}

  - do:
      indices.get_data_stream:
        name: logs-foobar
  - match: { data_streams.0.name: logs-foobar }
  - match: { data_streams.0.timestamp_field.name: '@timestamp' }
  - length: { data_streams.0.indices: 1 }
  - match: { data_streams.0.indices.0.index_name: '/\.ds-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000001/' }
  - match: { data_streams.0.failure_store.enabled: true }
  - length: { data_streams.0.failure_store.indices: 1 }
  - match: { data_streams.0.failure_store.indices.0.index_name: '/\.fs-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000002/' }

  - do:
      search:
        index: logs-foobar
        body: { query: { match_all: {} } }
  - length:   { hits.hits: 0  }

  - do:
      search:
        index: .fs-logs-foobar-*
  - length:   { hits.hits: 1  }
  - match: { hits.hits.0._index: "/\\.fs-logs-foobar-(\\d{4}\\.\\d{2}\\.\\d{2}-)?000002/" }
  - exists: hits.hits.0._source.@timestamp
  - not_exists: hits.hits.0._source.count
  - match: { hits.hits.0._source.document.index: 'logs-foobar' }
  - match: { hits.hits.0._source.document.source.@timestamp: '2020-12-12' }
  - match: { hits.hits.0._source.document.source.count: 'invalid value' }
  - match: { hits.hits.0._source.error.type: 'document_parsing_exception' }
  - contains: { hits.hits.0._source.error.message: "failed to parse field [count] of type [long] in document with id " }
  - contains: { hits.hits.0._source.error.message: "Preview of field's value: 'invalid value'" }
  - contains: { hits.hits.0._source.error.stack_trace: "failed to parse field [count] of type [long] in document with id" }
  - contains: { hits.hits.0._source.error.stack_trace: "Preview of field's value: 'invalid value'" }

  - do:
      indices.delete_data_stream:
        name: logs-foobar
  - is_true: acknowledged

  - do:
      indices.delete:
        index: .fs-logs-foobar-*
  - is_true: acknowledged

---
"Ensure failure is redirected to correct failure store after a reroute processor":
  - requires:
      test_runner_features: [allowed_warnings, capabilities]
      reason: "Failure store status was added in 8.16+"
      capabilities:
        - method: POST
          path: /{index}/_doc
          capabilities: [ 'failure_store_status' ]
  - do:
      ingest.put_pipeline:
        id: "failing_pipeline"
        body:  >
          {
            "description": "_description",
            "processors": [
              {
                "fail": {
                  "message" : "error_message",
                  "tag": "foo-tag"
                }
              }
            ]
          }
  - match: { acknowledged: true }

  - do:
      allowed_warnings:
        - "index template [destination_template] has index patterns [destination-data-stream] matching patterns from existing older templates [global] with patterns (global => [*]); this template [destination_template] will take precedence during new index creation"
      indices.put_index_template:
        name: destination_template
        body:
          index_patterns: destination-data-stream
          data_stream:
            failure_store: true
          template:
            settings:
              number_of_shards:   1
              number_of_replicas: 1
              index:
                default_pipeline: "failing_pipeline"

  - do:
      indices.create_data_stream:
        name: destination-data-stream

  - do:
      ingest.put_pipeline:
        id: "reroute_pipeline"
        body:  >
          {
            "description": "_description",
            "processors": [
              {
                "reroute": {
                  "tag": "reroute-tag",
                  "destination": "destination-data-stream"
                }
              }
            ]
          }
  - match: { acknowledged: true }

  - do:
      allowed_warnings:
        - "index template [generic_logs_template] has index patterns [logs-*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [generic_logs_template] will take precedence during new index creation"
      indices.put_index_template:
        name: generic_logs_template
        body:
          index_patterns: logs-*
          data_stream:
            failure_store: true
          template:
            settings:
              number_of_shards:   1
              number_of_replicas: 1
              index:
                default_pipeline: "reroute_pipeline"

  - do:
      index:
        index:  logs-foobar
        refresh: true
        body:
          '@timestamp': '2020-12-12'
          foo: bar
  - match: { failure_store: used}

  - do:
      search:
        index: .fs-logs-foobar-*
  - length:   { hits.hits: 0  }

  - do:
      search:
        index: .fs-destination-*
  - length:   { hits.hits: 1  }
  - match: { hits.hits.0._index: "/\\.fs-destination-data-stream-(\\d{4}\\.\\d{2}\\.\\d{2}-)?000002/" }
  - match: { hits.hits.0._source.document.index: 'logs-foobar' }

---
"Failure redirects to original failure store during index change if self referenced":
  - requires:
      cluster_features: [ "gte_v8.15.0" ]
      reason: "data stream failure stores REST structure changed in 8.15+"
      test_runner_features: [ allowed_warnings, contains ]

  - do:
      ingest.put_pipeline:
        id: "failing_pipeline"
        body: >
          {
            "description": "_description",
            "processors": [
              {
                "set": {
                  "field": "_index",
                  "value": "logs-elsewhere"
                }
              },
              {
                "script": {
                  "source": "ctx.object.data = ctx.object"
                }
              }
            ]
          }
  - match: { acknowledged: true }

  - do:
      allowed_warnings:
        - "index template [generic_logs_template] has index patterns [logs-*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [generic_logs_template] will take precedence during new index creation"
      indices.put_index_template:
        name: generic_logs_template
        body:
          index_patterns: logs-*
          data_stream:
            failure_store: true
          template:
            settings:
              number_of_shards: 1
              number_of_replicas: 1
              index:
                default_pipeline: "failing_pipeline"

  - do:
      index:
        index: logs-foobar
        refresh: true
        body:
          '@timestamp': '2020-12-12'
          object:
            data:
              field: 'someValue'

  - do:
      indices.get_data_stream:
        name: logs-foobar
  - match: { data_streams.0.name: logs-foobar }
  - match: { data_streams.0.timestamp_field.name: '@timestamp' }
  - length: { data_streams.0.indices: 1 }
  - match: { data_streams.0.indices.0.index_name: '/\.ds-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000001/' }
  - match: { data_streams.0.failure_store.enabled: true }
  - length: { data_streams.0.failure_store.indices: 1 }
  - match: { data_streams.0.failure_store.indices.0.index_name: '/\.fs-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000001/' }

  - do:
      search:
        index: logs-foobar
        body: { query: { match_all: { } } }
  - length: { hits.hits: 0 }

  - do:
      search:
        index: .fs-logs-foobar-*
  - length: { hits.hits: 1 }
  - match: { hits.hits.0._index: "/\\.fs-logs-foobar-(\\d{4}\\.\\d{2}\\.\\d{2}-)?000001/" }
  - exists: hits.hits.0._source.@timestamp
  - not_exists: hits.hits.0._source.foo
  - not_exists: hits.hits.0._source.document.id
  - match: { hits.hits.0._source.document.index: 'logs-foobar' }
  - match: { hits.hits.0._source.document.source.@timestamp: '2020-12-12' }
  - match: { hits.hits.0._source.document.source.object.data.field: 'someValue' }
  - match: { hits.hits.0._source.error.type: 'illegal_argument_exception' }
  - contains: { hits.hits.0._source.error.message: 'Failed to generate the source document for ingest pipeline' }
  - contains: { hits.hits.0._source.error.stack_trace: 'Failed to generate the source document for ingest pipeline' }
  - match: { hits.hits.0._source.error.pipeline_trace.0: 'failing_pipeline' }
  - match: { hits.hits.0._source.error.pipeline: 'failing_pipeline' }

  - do:
      indices.delete_data_stream:
        name: logs-foobar
  - is_true: acknowledged

  - do:
      indices.delete:
        index: .fs-logs-foobar-*
  - is_true: acknowledged

---
"Failure redirects to original failure store during index change if final pipeline changes target":
  - requires:
      reason: "Failure store status was added in 8.16+"
      test_runner_features: [ capabilities, allowed_warnings, contains ]
      capabilities:
        - method: POST
          path: /{index}/_doc
          capabilities: [ 'failure_store_status' ]

  - do:
      ingest.put_pipeline:
        id: "change_index_pipeline"
        body: >
          {
            "description": "_description",
            "processors": [
              {
                "set": {
                  "field": "_index",
                  "value": "logs-elsewhere"
                }
              }
            ]
          }
  - match: { acknowledged: true }

  - do:
      allowed_warnings:
        - "index template [generic_logs_template] has index patterns [logs-*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [generic_logs_template] will take precedence during new index creation"
      indices.put_index_template:
        name: generic_logs_template
        body:
          index_patterns: logs-*
          data_stream:
            failure_store: true
          template:
            settings:
              number_of_shards: 1
              number_of_replicas: 1
              index:
                final_pipeline: "change_index_pipeline"

  - do:
      index:
        index: logs-foobar
        refresh: true
        body:
          '@timestamp': '2020-12-12'
          foo: bar
  - match: { failure_store: used}

  - do:
      indices.get_data_stream:
        name: logs-foobar
  - match: { data_streams.0.name: logs-foobar }
  - match: { data_streams.0.timestamp_field.name: '@timestamp' }
  - length: { data_streams.0.indices: 1 }
  - match: { data_streams.0.indices.0.index_name: '/\.ds-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000001/' }
  - match: { data_streams.0.failure_store.enabled: true }
  - length: { data_streams.0.failure_store.indices: 1 }
  - match: { data_streams.0.failure_store.indices.0.index_name: '/\.fs-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000001/' }

  - do:
      search:
        index: logs-foobar
        body: { query: { match_all: { } } }
  - length: { hits.hits: 0 }

  - do:
      search:
        index: .fs-logs-foobar-*
  - length: { hits.hits: 1 }
  - match: { hits.hits.0._index: "/\\.fs-logs-foobar-(\\d{4}\\.\\d{2}\\.\\d{2}-)?000001/" }
  - exists: hits.hits.0._source.@timestamp
  - not_exists: hits.hits.0._source.foo
  - not_exists: hits.hits.0._source.document.id
  - match: { hits.hits.0._source.document.index: 'logs-foobar' }
  - match: { hits.hits.0._source.document.source.@timestamp: '2020-12-12' }
  - match: { hits.hits.0._source.document.source.foo: 'bar' }
  - match: { hits.hits.0._source.error.type: 'illegal_state_exception' }
  - contains: { hits.hits.0._source.error.message: "final pipeline [change_index_pipeline] can't change the target index" }
  - contains: { hits.hits.0._source.error.stack_trace: "final pipeline [change_index_pipeline] can't change the target index" }
  - match: { hits.hits.0._source.error.pipeline_trace.0: 'change_index_pipeline' }
  - match: { hits.hits.0._source.error.pipeline: 'change_index_pipeline' }

  - do:
      indices.delete_data_stream:
        name: logs-foobar
  - is_true: acknowledged

  - do:
      indices.delete:
        index: .fs-logs-foobar-*
  - is_true: acknowledged

---
"Failure redirects to correct failure store when index loop is detected":
  - requires:
      reason: "Failure store status was added in 8.16+"
      test_runner_features: [ capabilities, allowed_warnings, contains ]
      capabilities:
        - method: POST
          path: /{index}/_doc
          capabilities: [ 'failure_store_status' ]

  - do:
      ingest.put_pipeline:
        id: "send_to_destination"
        body: >
          {
            "description": "_description",
            "processors": [
              {
                "reroute": {
                  "tag": "reroute-tag-1",
                  "destination": "destination-data-stream"
                }
              }
            ]
          }
  - match: { acknowledged: true }

  - do:
      ingest.put_pipeline:
        id: "send_back_to_original"
        body: >
          {
            "description": "_description",
            "processors": [
              {
                "reroute": {
                  "tag": "reroute-tag-2",
                  "destination": "logs-foobar"
                }
              }
            ]
          }
  - match: { acknowledged: true }

  - do:
      allowed_warnings:
        - "index template [generic_logs_template] has index patterns [logs-*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [generic_logs_template] will take precedence during new index creation"
      indices.put_index_template:
        name: generic_logs_template
        body:
          index_patterns: logs-*
          data_stream:
            failure_store: true
          template:
            settings:
              number_of_shards: 1
              number_of_replicas: 1
              index:
                default_pipeline: "send_to_destination"

  - do:
      allowed_warnings:
        - "index template [destination_logs_template] has index patterns [destination-*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [destination_logs_template] will take precedence during new index creation"
      indices.put_index_template:
        name: destination_logs_template
        body:
          index_patterns: destination-*
          data_stream:
            failure_store: true
          template:
            settings:
              number_of_shards: 1
              number_of_replicas: 1
              index:
                default_pipeline: "send_back_to_original"

  - do:
      index:
        index: logs-foobar
        refresh: true
        body:
          '@timestamp': '2020-12-12'
          foo: bar
  - match: { _index: '/\.fs-destination-data-stream-(\d{4}\.\d{2}\.\d{2}-)?000001/' }
  - match: { failure_store: used}


  - do:
      indices.get_data_stream:
        name: destination-data-stream
  - match: { data_streams.0.name: destination-data-stream }
  - match: { data_streams.0.timestamp_field.name: '@timestamp' }
  - length: { data_streams.0.indices: 1 }
  - match: { data_streams.0.indices.0.index_name: '/\.ds-destination-data-stream-(\d{4}\.\d{2}\.\d{2}-)?000001/' }
  - match: { data_streams.0.failure_store.enabled: true }
  - length: { data_streams.0.failure_store.indices: 1 }
  - match: { data_streams.0.failure_store.indices.0.index_name: '/\.fs-destination-data-stream-(\d{4}\.\d{2}\.\d{2}-)?000001/' }

  - do:
      search:
        index: destination-data-stream
        body: { query: { match_all: { } } }
  - length: { hits.hits: 0 }

  - do:
      search:
        index: .fs-destination-data-stream-*
  - length: { hits.hits: 1 }
  - match: { hits.hits.0._index: "/\\.fs-destination-data-stream-(\\d{4}\\.\\d{2}\\.\\d{2}-)?000001/" }
  - exists: hits.hits.0._source.@timestamp
  - not_exists: hits.hits.0._source.foo
  - not_exists: hits.hits.0._source.document.id
  - match: { hits.hits.0._source.document.index: 'logs-foobar' }
  - match: { hits.hits.0._source.document.source.@timestamp: '2020-12-12' }
  - match: { hits.hits.0._source.document.source.foo: 'bar' }
  - match: { hits.hits.0._source.error.type: 'illegal_state_exception' }
  - contains: { hits.hits.0._source.error.message: 'index cycle detected' }
  - contains: { hits.hits.0._source.error.stack_trace: 'index cycle detected' }
  - match: { hits.hits.0._source.error.pipeline_trace.0: 'send_back_to_original' }
  - match: { hits.hits.0._source.error.pipeline: 'send_back_to_original' }

  - do:
      indices.delete_data_stream:
        name: destination-data-stream
  - is_true: acknowledged

  - do:
      indices.delete:
        index: .fs-destination-data-stream-*
  - is_true: acknowledged

---
"Failure redirects to correct failure store when pipeline loop is detected":
  - requires:
      reason: "Failure store status was added in 8.16+"
      test_runner_features: [ capabilities, allowed_warnings, contains ]
      capabilities:
        - method: POST
          path: /{index}/_doc
          capabilities: [ 'failure_store_status' ]

  - do:
      ingest.put_pipeline:
        id: "step_1"
        body: >
          {
            "description": "_description",
            "processors": [
              {
                "pipeline": {
                  "tag": "step-1",
                  "name": "step_2"
                }
              }
            ]
          }
  - match: { acknowledged: true }

  - do:
      ingest.put_pipeline:
        id: "step_2"
        body: >
          {
            "description": "_description",
            "processors": [
              {
                "pipeline": {
                  "tag": "step-2",
                  "name": "step_1"
                }
              }
            ]
          }
  - match: { acknowledged: true }

  - do:
      allowed_warnings:
        - "index template [generic_logs_template] has index patterns [logs-*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [generic_logs_template] will take precedence during new index creation"
      indices.put_index_template:
        name: generic_logs_template
        body:
          index_patterns: logs-*
          data_stream:
            failure_store: true
          template:
            settings:
              number_of_shards: 1
              number_of_replicas: 1
              index:
                default_pipeline: "step_1"

  - do:
      index:
        index: logs-foobar
        refresh: true
        body:
          '@timestamp': '2020-12-12'
          foo: bar
  - match: { failure_store: used}

  - do:
      indices.get_data_stream:
        name: logs-foobar
  - match: { data_streams.0.name: logs-foobar }
  - match: { data_streams.0.timestamp_field.name: '@timestamp' }
  - length: { data_streams.0.indices: 1 }
  - match: { data_streams.0.indices.0.index_name: '/\.ds-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000001/' }
  - match: { data_streams.0.failure_store.enabled: true }
  - length: { data_streams.0.failure_store.indices: 1 }
  - match: { data_streams.0.failure_store.indices.0.index_name: '/\.fs-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000001/' }

  - do:
      search:
        index: logs-foobar
        body: { query: { match_all: { } } }
  - length: { hits.hits: 0 }

  - do:
      search:
        index: .fs-logs-foobar-*
  - length: { hits.hits: 1 }
  - match: { hits.hits.0._index: "/\\.fs-logs-foobar-(\\d{4}\\.\\d{2}\\.\\d{2}-)?000001/" }
  - exists: hits.hits.0._source.@timestamp
  - not_exists: hits.hits.0._source.foo
  - not_exists: hits.hits.0._source.document.id
  - match: { hits.hits.0._source.document.index: 'logs-foobar' }
  - match: { hits.hits.0._source.document.source.@timestamp: '2020-12-12' }
  - match: { hits.hits.0._source.document.source.foo: 'bar' }
  - match: { hits.hits.0._source.error.type: 'graph_structure_exception' }
  - contains: { hits.hits.0._source.error.message: 'Cycle detected for pipeline: step_1' }
  - contains: { hits.hits.0._source.error.stack_trace: 'Cycle detected for pipeline: step_1' }
  - match: { hits.hits.0._source.error.pipeline_trace.0: 'step_1' }
  - match: { hits.hits.0._source.error.pipeline_trace.1: 'step_2' }
  - match: { hits.hits.0._source.error.pipeline: 'step_2' }
  - match: { hits.hits.0._source.error.processor_tag: 'step-2' }
  - match: { hits.hits.0._source.error.processor_type: 'pipeline' }

  - do:
      indices.delete_data_stream:
        name: logs-foobar
  - is_true: acknowledged

  - do:
      indices.delete:
        index: .fs-logs-foobar-*
  - is_true: acknowledged

---
"Version conflicts are not redirected to failure store":
  - requires:
      test_runner_features: [ allowed_warnings]

  - do:
      allowed_warnings:
        - "index template [generic_logs_template] has index patterns [logs-*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [generic_logs_template] will take precedence during new index creation"
      indices.put_index_template:
        name: generic_logs_template
        body:
          index_patterns: logs-*
          data_stream:
            failure_store: true
          template:
            settings:
              number_of_shards:   1
              number_of_replicas: 1
            mappings:
              properties:
                '@timestamp':
                  type: date
                count:
                  type: long

  - do:
      bulk:
        refresh: true
        body:
          - '{ "create": { "_index": "logs-foobar", "_id": "1" } }'
          - '{ "@timestamp": "2022-01-01", "baz": "quick", "a": "brown", "b": "fox" }'
          - '{ "create": { "_index": "logs-foobar", "_id": "1" } }'
          - '{ "@timestamp": "2022-01-01", "baz": "lazy", "a": "dog" }'
  - is_true: errors
  - match: { items.1.create._index: '/\.ds-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000001/' }
  - match: { items.1.create.status: 409 }
  - match: { items.1.create.error.type: version_conflict_engine_exception}
  - is_false: items.1.create.failure_store

---
"Test failure store status with bulk request":
  - requires:
      test_runner_features: [ allowed_warnings, capabilities ]
      reason: "Failure store status was added in 8.16+"
      capabilities:
        - method: POST
          path: /_bulk
          capabilities: [ 'failure_store_status' ]
        - method: PUT
          path: /_bulk
          capabilities: [ 'failure_store_status' ]

  - do:
      allowed_warnings:
        - "index template [generic_logs_template] has index patterns [logs-*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [generic_logs_template] will take precedence during new index creation"
      indices.put_index_template:
        name: generic_logs_template
        body:
          index_patterns: logs-*
          data_stream:
            failure_store: true
          template:
            settings:
              number_of_shards:   1
              number_of_replicas: 1
            mappings:
              properties:
                '@timestamp':
                  type: date
                count:
                  type: long
  - do:
      allowed_warnings:
        - "index template [no-fs] has index patterns [no-fs*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [no-fs] will take precedence during new index creation"
      indices.put_index_template:
        name: no-fs
        body:
          index_patterns: no-fs*
          data_stream:
            failure_store: false
          template:
            settings:
              number_of_shards: 1
              number_of_replicas: 0
            mappings:
              properties:
                '@timestamp':
                  type: date
                count:
                  type: long


  - do:
      bulk:
        refresh: true
        body:
          - '{ "create": { "_index": "logs-foobar", "_id": "1" } }'
          - '{ "@timestamp": "2022-01-01", "baz": "quick", "a": "brown", "b": "fox" }'
          - '{ "create": { "_index": "logs-foobar", "_id": "1" } }'
          - '{ "@timestamp": "2022-01-01", "baz": "lazy", "a": "dog" }'
          - '{ "create": { "_index": "logs-foobar", "_id": "1" } }'
          - '{ "@timestamp": "2022-01-01", "count": "invalid" }'
          - '{ "create": { "_index": "no-fs", "_id": "1" } }'
          - '{ "@timestamp": "2022-01-01", "count": "invalid" }'
  - is_true: errors
  # Successfully indexed to backing index
  - match: { items.0.create._index: '/\.ds-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000001/' }
  - match: { items.0.create.status: 201 }
  - is_false: items.1.create.failure_store

  # Rejected but not eligible to go to failure store
  - match: { items.1.create._index: '/\.ds-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000001/' }
  - match: { items.1.create.status: 409 }
  - match: { items.1.create.error.type: version_conflict_engine_exception}
  - is_false: items.1.create.failure_store

  # Successfully indexed to failure store
  - match: { items.2.create._index: '/\.fs-logs-foobar-(\d{4}\.\d{2}\.\d{2}-)?000002/' }
  - match: { items.2.create.status: 201 }
  - match: { items.2.create.failure_store: used }

  # Rejected, eligible to go to failure store, but failure store not enabled
  - match: { items.3.create._index: '/\.ds-no-fs-(\d{4}\.\d{2}\.\d{2}-)?000001/' }
  - match: { items.3.create.status: 400 }
  - match: { items.3.create.error.type: document_parsing_exception }
  - match: { items.3.create.failure_store: not_enabled }

import org.elasticsearch.gradle.internal.info.BuildParams

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
apply plugin: 'elasticsearch.internal-yaml-rest-test'
apply plugin: 'elasticsearch.yaml-rest-compat-test'

esplugin {
  description 'Ingest processor that uses Apache Tika to extract contents'
  classname 'org.elasticsearch.ingest.attachment.IngestAttachmentPlugin'
}

// this overwrites the 'versions' map from Elasticsearch itself, but indeed we want that -- we're interested in managing our dependencies
// as we (and tika) demand, and are not interested in, say, having the same version of commons-codec as elasticsearch itself
def versions = [
  'tika'  : '2.9.1',
  'pdfbox': '2.0.29',
  'poi'   : '5.2.3',
  'mime4j': '0.8.10',
  'commonsCodec': '1.16.0'
]

// exclude commons-logging from test dependencies to avoid jar-hell, we use jcl-over-slf4j here
configurations.testRuntimeClasspath {
  exclude module: 'commons-logging'
  // The version used by POI potentially conflicts with the one pulled in by :test:framework:
  resolutionStrategy.force "commons-codec:commons-codec:${versions.commonsCodec}"
}

configurations.testCompileClasspath {
  // The version used by POI potentially conflicts with the one pulled in by :test:framework:
  resolutionStrategy.force "commons-codec:commons-codec:${versions.commonsCodec}"
}

dependencies {
  // take over logging for all dependencies
  api "org.slf4j:slf4j-api:2.0.9"
  api "org.slf4j:jcl-over-slf4j:2.0.9"

  // route slf4j over log4j
  // TODO blocked on https://github.com/elastic/elasticsearch/issues/93714
  // api "org.apache.logging.log4j:log4j-slf4j2-impl:2.19.0"

  // nop all slf4j logging
  // workaround for https://github.com/elastic/elasticsearch/issues/93714
  api "org.slf4j:slf4j-nop:2.0.9"

  // mandatory for tika
  api "org.apache.tika:tika-core:${versions.tika}"
  api "org.apache.tika:tika-langdetect:${versions.tika}"
  api "org.apache.tika:tika-langdetect-tika:${versions.tika}"
  api "org.apache.tika:tika-parser-html-module:${versions.tika}"
  api "org.apache.tika:tika-parser-microsoft-module:${versions.tika}"
  api "org.apache.tika:tika-parser-pdf-module:${versions.tika}"
  api "org.apache.tika:tika-parser-xml-module:${versions.tika}"
  api "org.apache.tika:tika-parser-text-module:${versions.tika}"
  api "org.apache.tika:tika-parser-miscoffice-module:${versions.tika}"
  api "org.apache.tika:tika-parser-apple-module:${versions.tika}"
  api "org.apache.tika:tika-parser-xmp-commons:${versions.tika}"
  api "org.apache.tika:tika-parser-zip-commons:${versions.tika}"
  api 'org.tukaani:xz:1.9'
  api 'commons-io:commons-io:2.14.0'

  // character set detection
  api 'com.googlecode.juniversalchardet:juniversalchardet:1.0.3'

  // external parser libraries
  // HTML
  api 'org.ccil.cowan.tagsoup:tagsoup:1.2.1'
  // Adobe PDF
  api "org.apache.pdfbox:pdfbox:${versions.pdfbox}"
  api "org.apache.pdfbox:fontbox:${versions.pdfbox}"
  api "org.apache.pdfbox:jempbox:1.8.17"
  // OpenOffice
  api "org.apache.poi:poi-ooxml:${versions.poi}"
  api "org.apache.poi:poi-ooxml-lite:${versions.poi}"
  api "org.apache.poi:poi:${versions.poi}"
  api "commons-codec:commons-codec:${versions.commonsCodec}"
  api 'org.apache.xmlbeans:xmlbeans:5.1.1'
  api 'org.apache.commons:commons-collections4:4.4'
  // MS Office
  api "org.apache.poi:poi-scratchpad:${versions.poi}"
  // Apple iWork
  api 'org.apache.commons:commons-compress:1.24.0'
  // Outlook documents
  api "org.apache.james:apache-mime4j-core:${versions.mime4j}"
  api "org.apache.james:apache-mime4j-dom:${versions.mime4j}"
  // EPUB books
  api "org.apache.commons:commons-lang3:3.13.0"
  // Microsoft Word files with visio diagrams
  api 'org.apache.commons:commons-math3:3.6.1'
  // POIs dependency
  api 'com.zaxxer:SparseBitSet:1.2'
}

restResources {
  restApi {
    include '_common', 'cluster', 'nodes', 'ingest', 'index', 'get'
  }
}

tasks.named("dependencyLicenses").configure {
  mapping from: /apache-mime4j-.*/, to: 'apache-mime4j'
  mapping from: /tika-langdetect-.*/, to: 'tika-langdetect'
}

esplugin.bundleSpec.from('config/ingest-attachment') {
  into 'config'
}

tasks.named("forbiddenPatterns").configure {
  exclude '**/*.doc'
  exclude '**/*.docx'
  exclude '**/*.pdf'
  exclude '**/*.epub'
  exclude '**/*.vsdx'
  exclude '**/text-cjk-*.txt'
}

tasks.named("yamlRestTestV7CompatTransform").configure { task ->
  // 2 new tika metadata fields are returned in v8
  task.replaceValueInLength("_source.attachment", 8, "Test ingest attachment processor with .doc file")
  task.replaceValueInLength("_source.attachment", 8, "Test ingest attachment processor with .docx file")
  // Tika 2.4.0 adds an extra newline for each embedded attachment, making the content_length larger
  task.replaceValueInMatch("_source.attachment.content_length", 20, "Test ingest attachment processor with .docx file")
}

tasks.named("thirdPartyAudit").configure {
  ignoreMissingClasses()
}

if (BuildParams.inFipsJvm) {
  tasks.named("test").configure { enabled = false }
  tasks.named("yamlRestTest").configure { enabled = false };
  tasks.named("yamlRestTestV7CompatTest").configure { enabled = false };
}

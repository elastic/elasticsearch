---
teardown:
  - do:
      ingest.delete_pipeline:
        id: "pipeline-with-two-data-stream-processors"
        ignore: 404
  - do:
      ingest.delete_pipeline:
        id: "logs-router"
        ignore: 404
  - do:
      ingest.delete_pipeline:
        id: "logs-nginx"
        ignore: 404
  - do:
      indices.delete_index_template:
        name: logs-router
        ignore: 404
  - do:
      indices.delete_index_template:
        name: logs-nginx
        ignore: 404
  - do:
      indices.delete:
        index: "index-1"
        ignore_unavailable: true
  - do:
      indices.delete:
        index: "index-2"
        ignore_unavailable: true
  - do:
      ingest.delete_pipeline:
        id: "pipeline-1"
        ignore: 404
  - do:
      ingest.delete_pipeline:
        id: "pipeline-2"
        ignore: 404

---
"Test first matching router terminates pipeline":
  - skip:
      awaits_fix: "https://github.com/elastic/elasticsearch/issues/102144"
  - do:
      ingest.put_pipeline:
        id: "pipeline-with-two-data-stream-processors"
        body: >
          {
            "processors": [
              {
                "reroute" : {
                  "dataset" : "first"
                }
              },
              {
                "reroute" : {
                  "dataset" : "second"
                }
              }
            ]
          }
  - match: { acknowledged: true }

  - do:
      index:
        index: logs-generic-default
        refresh: true
        op_type: create
        id: "1"
        pipeline: "pipeline-with-two-data-stream-processors"
        body: {
          foo: "bar"
        }

  - do:
      search:
        index: logs-first-default
        body:
          query:
            match: {"_id": "1"}
  - match: { hits.hits.0._source.foo: "bar" }

---
"Test two stage routing":
  - skip:
      features: allowed_warnings
  - do:
      ingest.put_pipeline:
        id: "logs-router"
        body: >
          {
            "processors": [
              {
                 "set" : {
                   "field": "added-in-pipeline-before-first-reroute",
                   "value": true
                 }
              },
              {
                "reroute" : {
                  "tag": "nginx",
                  "if" : "ctx?.log?.file?.path?.contains('nginx')",
                  "dataset": "nginx"
                }
              }
            ]
          }
  - match: { acknowledged: true }
  - do:
      allowed_warnings:
        - "index template [logs-router] has index patterns [logs-router-*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [logs-router] will take precedence during new index creation"
      indices.put_index_template:
        name: logs-router
        body:
          index_patterns: [ "logs-router-*" ]
          priority: 500
          data_stream: { }
          template:
            settings:
              index.default_pipeline: "logs-router"
  - do:
      ingest.put_pipeline:
        id: "logs-nginx"
        body: >
          {
            "processors": [
              {
                 "set" : {
                   "field": "added-in-pipeline-before-second-reroute",
                   "value": true
                 }
              },
              {
                "reroute": {
                  "tag": "nginx.access",
                  "if": "ctx?.log?.file?.path?.contains('access')",
                  "dataset": "nginx.access"
                }
              },
              {
                "reroute": {
                  "tag": "nginx.error",
                  "if": "ctx?.log?.file?.path?.contains('error')",
                  "dataset": "nginx.error"
                }
              }
            ]
          }
  - match: { acknowledged: true }
  - do:
      allowed_warnings:
        - "index template [logs-nginx] has index patterns [logs-nginx-*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [logs-nginx] will take precedence during new index creation"
      indices.put_index_template:
        name: logs-nginx
        body:
          index_patterns: [ "logs-nginx-*" ]
          priority: 500
          data_stream: { }
          template:
            settings:
              index.default_pipeline: "logs-nginx"

  - do:
      index:
        refresh: true
        index: logs-router-default
        id: "example-log"
        op_type: create
        body:
          "@timestamp": "2022-04-13"
          message: "this is an error log"
          log:
            file:
              path: "nginx-error.log"

  - do:
      search:
        index: logs-nginx.error-default
        body:
          query:
            match: {"_id": "example-log"}
  - match: { hits.hits.0._source.message: "this is an error log" }
  - match: { hits.hits.0._source.added-in-pipeline-before-first-reroute: true }
  - match: { hits.hits.0._source.added-in-pipeline-before-second-reroute: true }

---
"Test pipeline run after reroute":
  - do:
      ingest.put_pipeline:
        id: "pipeline-1"
        body: >
          {
            "processors": [
              {
                "set" : {
                  "field": "added-in-pipeline-before-reroute",
                  "value": true
                }
              },
              {
                "reroute" : {
                  "destination": "index-2"
                }
              }
            ]
          }
  - match: { acknowledged: true }
  - do:
      ingest.put_pipeline:
        id: "pipeline-2"
        body: >
          {
            "processors": [
              {
                "set" : {
                  "field": "added-in-pipeline-after-reroute",
                  "value": true
                }
              }
            ]
          }
  - match: { acknowledged: true }
  - do:
      indices.create:
        index: index-1
        body:
          settings:
            index:
              default_pipeline: "pipeline-1"
  - match: { acknowledged: true }
  - do:
      indices.create:
        index: index-2
        body:
          settings:
            index:
              default_pipeline: "pipeline-2"
  - match: { acknowledged: true }
  - do:
      bulk:
        refresh: true
        body:
          - '{"index": {"_index": "index-1", "_id": "1" }}'
          - '{"existing-field": true}'
  - do:
      indices.refresh:
        index: [index-2]
  - do:
      get:
        index: index-2
        id: "1"
  - match: { _source.existing-field : true }
  - match: { _source.added-in-pipeline-before-reroute : true }
  - match: { _source.added-in-pipeline-after-reroute : true }

---
"Test data stream with lazy rollover obtains pipeline from template":
  # Start with pipeline that reroute
  - do:
      ingest.put_pipeline:
        id: "demo-reroute"
        body: >
          {
            "processors": [
              {
                "reroute" : {"namespace": "foo"}
              }
            ]
          }
  - match: { acknowledged: true }

  # Set pipeline in template
  - do:
      indices.put_index_template:
        name: demo_1
        body:
          index_patterns: [ "demo*" ]
          priority: 1
          data_stream: { }
          template:
            settings:
              index.default_pipeline: "demo-reroute"
  - match: { acknowledged: true }

  - do:
      indices.create_data_stream:
        name: demo-dataset-default
  - match: { acknowledged: true }

  - do:
      index:
        index: demo-dataset-default
        body:
          '@timestamp': '2020-12-12'
          some-field: 1
  - do:
      indices.refresh:
        index: demo-dataset-foo

  # document is rerouted
  - do:
      search:
        index: demo-dataset-foo
        body: { query: { match_all: { } } }
  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.some-field: 1 }

  # add higher priority template without reroute
  - do:
      indices.put_index_template:
        name: demo_2
        body:
          index_patterns: [ "demo*" ]
          priority: 2 # higher priority
          data_stream: { }
  - match: { acknowledged: true }

  - do:
      index:
        index: demo-dataset-default
        body:
          '@timestamp': '2020-12-12'
          some-field: 2
  - do:
      indices.refresh:
        index: demo-dataset-foo

  # still reroute because datastream hasn't rolled over
  - do:
      search:
        index: demo-dataset-foo
        body: { query: { match_all: { } } }
  - length: { hits.hits: 2 }

  # perform lazy rollover
  - do:
      indices.rollover:
        alias: demo-dataset-default
        lazy: true

  - do:
      index:
        index: demo-dataset-default
        body:
          '@timestamp': '2020-12-12'
          some-field: 3
  - do:
      indices.refresh:
        index: demo-dataset-default

  # now absence of pipeline resolved from template, so no reroute
  - do:
      search:
        index: demo-dataset-default
        body: { query: { match_all: { } } }
  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.some-field: 3 }


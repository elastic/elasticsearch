/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'elasticsearch.legacy-yaml-rest-test'
apply plugin: 'elasticsearch.internal-cluster-test'

esplugin {
  description 'Ingest processor that uses looksup geo data based on ip adresses using the Maxmind geo database'
  classname 'org.elasticsearch.ingest.geoip.IngestGeoIpPlugin'
}

tasks.named('internalClusterTestTestingConventions').configure {
  baseClass 'org.elasticsearch.ingest.geoip.AbstractGeoIpIT'
  baseClass 'org.elasticsearch.test.ESTestCase'
}

dependencies {
  api('com.maxmind.geoip2:geoip2:2.13.1')
  // geoip2 dependencies:
  api("com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}")
  api("com.fasterxml.jackson.core:jackson-databind:${versions.jackson}")
  api('com.maxmind.db:maxmind-db:1.3.1')

  testImplementation 'org.elasticsearch:geolite2-databases:20191119'
  internalClusterTestImplementation project(path: ":modules:reindex")
}

restResources {
  restApi {
    include '_common', 'indices', 'index', 'cluster', 'nodes', 'get', 'ingest'
  }
}

def useFixture = providers.environmentVariable("geoip_use_service")
  .map { s -> Boolean.parseBoolean(s) == false }
  .getOrElse(true)

def fixtureAddress = {
  assert useFixture: 'closure should not be used without a fixture'
  int ephemeralPort = tasks.getByPath(":test:fixtures:geoip-fixture:postProcessFixture").ext."test.fixtures.geoip-fixture.tcp.80"
  assert ephemeralPort > 0
  return "http://127.0.0.1:${ephemeralPort}/"
}

if (useFixture) {
  apply plugin: 'elasticsearch.test.fixtures'
  testFixtures.useFixture(':test:fixtures:geoip-fixture', 'geoip-fixture')
}

tasks.named("internalClusterTest").configure {
  if (useFixture) {
    nonInputProperties.systemProperty "geoip_endpoint", "${-> fixtureAddress()}"
  }
}

tasks.register("copyDefaultGeoIp2DatabaseFiles", Copy) {
  from { zipTree(configurations.testCompileClasspath.files.find { it.name.contains('geolite2-databases') }) }
  into "${project.buildDir}/ingest-geoip"
  include "*.mmdb"
}

tasks.named("bundlePlugin").configure {
  dependsOn("copyDefaultGeoIp2DatabaseFiles")
  from("${project.buildDir}/ingest-geoip") {
    into '/'
  }
}

tasks.named("thirdPartyAudit").configure {
  ignoreMissingClasses(
    // geoip WebServiceClient needs apache http client, but we're not using WebServiceClient:
    'org.apache.http.HttpEntity',
    'org.apache.http.HttpResponse',
    'org.apache.http.StatusLine',
    'org.apache.http.client.config.RequestConfig$Builder',
    'org.apache.http.client.config.RequestConfig',
    'org.apache.http.client.methods.CloseableHttpResponse',
    'org.apache.http.client.methods.HttpGet',
    'org.apache.http.client.utils.URIBuilder',
    'org.apache.http.impl.auth.BasicScheme',
    'org.apache.http.impl.client.CloseableHttpClient',
    'org.apache.http.impl.client.HttpClientBuilder',
    'org.apache.http.util.EntityUtils'
  )
}

if (Os.isFamily(Os.FAMILY_WINDOWS)) {
  tasks.named("test").configure {
    // Windows cannot cleanup database files properly unless it loads everything on heap.
    // See https://github.com/maxmind/MaxMind-DB-Reader-java#file-lock-on-windows for more information
    systemProperty 'es.geoip.load_db_on_heap', 'true'
  }
}

tasks.named("forbiddenPatterns").configure {
  exclude '**/*.mmdb'
}

tasks.named("dependencyLicenses").configure {
  mapping from: /geoip.*/, to: 'maxmind-geolite2-eula'
  mapping from: /maxmind-db.*/, to: 'maxmind-db-reader'
  ignoreFile 'elastic-geoip-database-service-agreement-LICENSE.txt'
}

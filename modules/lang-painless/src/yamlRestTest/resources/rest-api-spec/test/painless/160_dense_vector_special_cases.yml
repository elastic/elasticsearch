setup:
  - skip:
      features: headers

  - do:
      indices.create:
        index: test-index
        body:
          settings:
            number_of_replicas: 0
            number_of_shards: 1
          mappings:
            properties:
              vector:
                type: dense_vector
                index: false
                dims: 3
              indexed_vector:
                type: dense_vector
                dims: 3
                index: true
                similarity: l2_norm
                index_options:
                  type: hnsw
                  m: 15
                  ef_construction: 50

---
"Indexing of Dense vectors should error when dims don't match defined in the mapping":
  - skip:
      version: " - 8.7.99"
      reason: "exception changed in 8.8"

  - do:
      catch: bad_request
      index:
        index: test-index
        id: "1"
        body:
          vector: [10, 2]
  - match: { error.type: "document_parsing_exception" }

  - do:
      catch: bad_request
      index:
        index: test-index
        id: "1"
        body:
          indexed_vector: [10, 2]
  - match: { error.type: "document_parsing_exception" }

---
"Vectors of mixed integers and floats":
  - do:
      index:
        index: test-index
        id: "1"
        body:
          vector: [10, 10, 10]

  - do:
      index:
        index: test-index
        id: "2"
        body:
          vector: [10.5, 10.9, 10.4]

  - do:
      indices.refresh: {}

# query vector of type integer
  - do:
      headers:
        Content-Type: application/json
      search:
        rest_total_hits_as_int: true
        index: test-index
        body:
          query:
            script_score:
              query: {match_all: {} }
              script:
                source: "cosineSimilarity(params.query_vector, 'vector')"
                params:
                  query_vector: [10, 10, 10]

  - match: {hits.total: 2}
  - match: {hits.hits.0._id: "1"}
  - match: {hits.hits.1._id: "2"}

# query vector of type float
  - do:
      headers:
        Content-Type: application/json
      search:
        rest_total_hits_as_int: true
        index: test-index
        body:
          query:
            script_score:
              query: {match_all: {} }
              script:
                source: "cosineSimilarity(params.query_vector, 'vector')"
                params:
                  query_vector: [10.0, 10.0, 10.0]

  - match: {hits.total: 2}
  - match: {hits.hits.0._id: "1"}
  - match: {hits.hits.1._id: "2"}


---
"Functions with query vectors with dims different from docs vectors should error":
  - do:
      index:
        index: test-index
        id: "1"
        body:
          vector: [1, 2, 3]

  - do:
      indices.refresh: {}

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        index: test-index
        body:
          query:
            script_score:
              query: {match_all: {} }
              script:
                source: "cosineSimilarity(params.query_vector, 'vector')"
                params:
                  query_vector: [1, 2, 3, 4]
  - match: { error.root_cause.0.type: "script_exception" }

  - do:
      catch: bad_request
      search:
        rest_total_hits_as_int: true
        index: test-index
        body:
          query:
            script_score:
              query: {match_all: {} }
              script:
                source: "dotProduct(params.query_vector, 'vector')"
                params:
                  query_vector: [1, 2, 3, 4]
  - match: { error.root_cause.0.type: "script_exception" }

---
"Documents missing a vector field":
- do:
    index:
      index: test-index
      id: "1"
      body:
        vector: [10, 10, 10]

- do:
    index:
      index: test-index
      id: "2"
      body:
        some_other_field: "random_value"

- do:
    indices.refresh: {}

# expect an error when documents miss a vector field
- do:
    catch: bad_request
    headers:
      Content-Type: application/json
    search:
      rest_total_hits_as_int: true
      index: test-index
      body:
        query:
          script_score:
            query: {match_all: {} }
            script:
              source: "cosineSimilarity(params.query_vector, 'vector')"
              params:
                query_vector: [10.0, 10.0, 10.0]
- match: { error.root_cause.0.type: "script_exception" }

- do:
    catch: bad_request
    headers:
      Content-Type: application/json
    search:
      rest_total_hits_as_int: true
      index: test-index
      body:
        query:
          script_score:
            query: {match_all: {} }
            script:
              source: "cosineSimilarity(params.query_vector, 'indexed_vector')"
              params:
                query_vector: [10.0, 10.0, 10.0]
- match: { error.root_cause.0.type: "script_exception" }

# guard against missing values by checking size()
- do:
    headers:
      Content-Type: application/json
    search:
      rest_total_hits_as_int: true
      index: test-index
      body:
        query:
          script_score:
            query: {match_all: {} }
            script:
              source: "doc['vector'].size() == 0 ? 0 : cosineSimilarity(params.query_vector, 'vector')"
              params:
                query_vector: [10.0, 10.0, 10.0]

- match: {hits.total: 2}
- match: {hits.hits.0._id: "1"}
- match: {hits.hits.1._id: "2"}
- match: {hits.hits.1._score: 0.0}

- do:
    headers:
      Content-Type: application/json
    search:
      rest_total_hits_as_int: true
      index: test-index
      body:
        query:
          script_score:
            query: {match_all: {} }
            script:
              source: "doc['indexed_vector'].size() == 0 ? 0 : cosineSimilarity(params.query_vector, 'indexed_vector')"
              params:
                query_vector: [10.0, 10.0, 10.0]

- match: {hits.total: 2}
- match: {hits.hits.0._id: "1"}
- match: {hits.hits.1._id: "2"}
- match: {hits.hits.1._score: 0.0}

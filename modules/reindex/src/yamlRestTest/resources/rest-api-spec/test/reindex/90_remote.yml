---
"Basic reindex from remote":
  - do:
      index:
        index:   source
        id:      "1"
        body:    { "text": "test" }
        refresh: true

  # Fetch the http host. We use the host of the master because we know there will always be a master.
  - do:
      cluster.state: {}
  - set: { master_node: master }
  - do:
      nodes.info:
        metric: [ http ]
  - is_true: nodes.$master.http.publish_address
  - set: {nodes.$master.http.publish_address: host}
  - do:
      reindex:
        refresh: true
        body:
          source:
            remote:
              host: http://${host}
            index: source
          dest:
            index: dest
  - match: {created: 1}
  - match: {updated: 0}
  - match: {version_conflicts: 0}
  - match: {batches: 1}
  - match: {failures: []}
  - match: {throttled_millis: 0}
  - gte: { took: 0 }
  - is_false: task
  - is_false: deleted

  - do:
      search:
        rest_total_hits_as_int: true
        index: dest
        body:
          query:
            match:
              text: test
  - match: {hits.total: 1}

  # Make sure reindex closed all the scroll contexts
  - do:
      indices.stats:
        index: source
        metric: search
  - match: {indices.source.total.search.open_contexts: 0}

---
"Reindex from remote with query":
  - do:
      index:
        index:   source
        id:      "1"
        body:    { "text": "test" }
  - do:
      index:
        index:   source
        id:      "2"
        body:    { "text": "test2" }
  - do:
      indices.refresh: {}

  # Fetch the http host. We use the host of the master because we know there will always be a master.
  - do:
      cluster.state: {}
  - set: { master_node: master }
  - do:
      nodes.info:
        metric: [ http ]
  - is_true: nodes.$master.http.publish_address
  - set: {nodes.$master.http.publish_address: host}
  - do:
      reindex:
        refresh: true
        body:
          source:
            remote:
              host: http://${host}
            index: source
            query:
              match:
                text: test2
          dest:
            index: dest
  - match: {created: 1}

  - do:
      search:
        rest_total_hits_as_int: true
        index: dest
        body:
          query:
            match_all: {}
  - match: {hits.total: 1}

  # Make sure reindex closed all the scroll contexts
  - do:
      indices.stats:
        index: source
        metric: search
  - match: {indices.source.total.search.open_contexts: 0}

---
"Reindex from remote with routing":
  - do:
      index:
        index:   source
        id:      "1"
        body:    { "text": "test" }
        routing: foo
        refresh: true

  # Fetch the http host. We use the host of the master because we know there will always be a master.
  - do:
      cluster.state: {}
  - set: { master_node: master }
  - do:
      nodes.info:
        metric: [ http ]
  - is_true: nodes.$master.http.publish_address
  - set: {nodes.$master.http.publish_address: host}
  - do:
      reindex:
        refresh: true
        body:
          source:
            remote:
              host: http://${host}
            index: source
          dest:
            index: dest
  - match: {created: 1}

  - do:
      search:
        rest_total_hits_as_int: true
        index: dest
        routing: foo
        body:
          query:
            match:
              text: test
  - match: {hits.total: 1}

  # Make sure reindex closed all the scroll contexts
  - do:
      indices.stats:
        index: source
        metric: search
  - match: {indices.source.total.search.open_contexts: 0}


---
"Reindex from remote with timeouts":
  # Validates that you can configure the socket_timeout and connect_timeout,
  # not that they do anything.
  - do:
      index:
        index:   source
        id:      "1"
        body:    { "text": "test" }
        refresh: true

  # Fetch the http host. We use the host of the master because we know there will always be a master.
  - do:
      cluster.state: {}
  - set: { master_node: master }
  - do:
      nodes.info:
        metric: [ http ]
  - is_true: nodes.$master.http.publish_address
  - set: {nodes.$master.http.publish_address: host}
  - do:
      reindex:
        refresh: true
        body:
          source:
            remote:
              host: http://${host}
              socket_timeout: 1m
              connect_timeout: 1m
            index: source
          dest:
            index: dest
  - match: {created: 1}
  - match: {updated: 0}
  - match: {version_conflicts: 0}
  - match: {batches: 1}
  - match: {failures: []}
  - match: {throttled_millis: 0}
  - gte: { took: 0 }
  - is_false: task
  - is_false: deleted

  - do:
      search:
        rest_total_hits_as_int: true
        index: dest
        body:
          query:
            match:
              text: test
  - match: {hits.total: 1}

  # Make sure reindex closed all the scroll contexts
  - do:
      indices.stats:
        index: source
        metric: search
  - match: {indices.source.total.search.open_contexts: 0}

---
"Reindex from remote with max_docs":
  - skip:
      version: " - 7.2.99"
      reason: "max_docs introduced in 7.3.0"

  - do:
      index:
        index:   source
        id:      "1"
        body:    { "text": "test" }
        refresh: true
  - do:
      index:
        index:   source
        id:      "2"
        body:    { "text": "test" }
        refresh: true

  # Fetch the http host. We use the host of the master because we know there will always be a master.
  - do:
      cluster.state: {}
  - set: { master_node: master }
  - do:
      nodes.info:
        metric: [ http ]
  - is_true: nodes.$master.http.publish_address
  - set: {nodes.$master.http.publish_address: host}
  - do:
      reindex:
        refresh: true
        body:
          max_docs: 1
          source:
            remote:
              host: http://${host}
            index: source
          dest:
            index: dest
  - match: {created: 1}
  - match: {updated: 0}
  - match: {version_conflicts: 0}
  - match: {batches: 1}
  - match: {failures: []}
  - match: {throttled_millis: 0}
  - gte: { took: 0 }
  - is_false: task
  - is_false: deleted

  - do:
      search:
        rest_total_hits_as_int: true
        index: dest
        body:
          query:
            match:
              text: test
  - match: {hits.total: 1}

  # Make sure reindex closed all the scroll contexts
  - do:
      indices.stats:
        index: source
        metric: search
  - match: {indices.source.total.search.open_contexts: 0}

---
"Reindex from remote with broken query":
  - do:
      index:
        index:   source
        id:      "1"
        body:    { "text": "test" }
        refresh: true

  # Fetch the http host. We use the host of the master because we know there will always be a master.
  - do:
      cluster.state: {}
  - set: { master_node: master }
  - do:
      nodes.info:
        metric: [ http ]
  - is_true: nodes.$master.http.publish_address
  - set: {nodes.$master.http.publish_address: host}
  - do:
      catch: /query malformed, no start_object after query name/
      reindex:
        body:
          source:
            remote:
              host: http://${host}
            index: source
            query:
              garbage: not a query
          dest:
            index: dest

---
"Reindex from remote that you can't connect to":
  - do:
      index:
        index:   source
        id:      "1"
        body:    { "text": "test" }
        refresh: true

  - do:
      # sometimes IIS is listening on port 0. In that case we fail in other ways and this test isn't useful.
      catch: /connect_exception|IIS Windows Server/
      reindex:
        body:
          source:
            remote:
              host: http://127.0.0.1:0
            index: source
          dest:
            index: dest

---
"Reindex from remote with source filtering":
  - do:
      index:
        index:   source
        id:      "1"
        body:    { "text": "test", "filtered": "removed" }
        refresh: true

  # Fetch the http host. We use the host of the master because we know there will always be a master.
  - do:
      cluster.state: {}
  - set: { master_node: master }
  - do:
      nodes.info:
        metric: [ http ]
  - is_true: nodes.$master.http.publish_address
  - set: {nodes.$master.http.publish_address: host}
  - do:
      reindex:
        refresh: true
        body:
          source:
            remote:
              host: http://${host}
            index: source
            _source:
              excludes:
                - filtered
          dest:
            index: dest
  - match: {created: 1}
  - match: {updated: 0}
  - match: {version_conflicts: 0}
  - match: {batches: 1}
  - match: {failures: []}
  - match: {throttled_millis: 0}
  - gte: { took: 0 }
  - is_false: task
  - is_false: deleted

  - do:
      get:
        index: dest
        id: "1"
  - match: { _source.text: "test" }
  - is_false: _source.filtered

---
"Reindex from remote with rethrottle":
  # Throttling happens between each scroll batch so we need to control the size of the batch by using a single shard
  # and a small batch size on the request
  - do:
      indices.create:
        index: source
        body:
          settings:
            number_of_shards: "1"
            number_of_replicas: "0"
  - do:
      index:
        index:   source
        id:      "1"
        body:    { "text": "test" }
  - do:
      index:
        index:   source
        id:      "2"
        body:    { "text": "test" }
  - do:
      index:
        index:   source
        id:      "3"
        body:    { "text": "test" }
  - do:
      indices.refresh: {}


  # Fetch the http host. We use the host of the master because we know there will always be a master.
  - do:
      cluster.state: {}
  - set: { master_node: master }
  - do:
      nodes.info:
        metric: [ http ]
  - is_true: nodes.$master.http.publish_address
  - set: {nodes.$master.http.publish_address: host}
  - do:
      reindex:
        requests_per_second: .00000001 # About 9.5 years to complete the request
        wait_for_completion: false
        refresh: true
        body:
          source:
            remote:
              host: http://${host}
            index: source
            size: 1
          dest:
            index: dest
  - match: {task: '/.+:\d+/'}
  - set: {task: task}

  - do:
      reindex_rethrottle:
        requests_per_second: -1
        task_id: $task

  - do:
      tasks.get:
        wait_for_completion: true
        task_id: $task

  - do:
      search:
        rest_total_hits_as_int: true
        index: dest
        body:
          query:
            match:
              text: test
  - match: {hits.total: 3}

  # Make sure reindex closed all the scroll contexts
  - do:
      indices.stats:
        index: source
        metric: search
  - match: {indices.source.total.search.open_contexts: 0}

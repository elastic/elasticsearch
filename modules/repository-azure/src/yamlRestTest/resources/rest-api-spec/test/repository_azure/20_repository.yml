# Integration tests for repository-azure
---
setup:

  # Register repository
  - do:
      snapshot.create_repository:
        repository: repository
        body:
          type: azure
          settings:
            container: @container@
            client: "integration_test"
            base_path: @base_path@

  # Remove the snapshots, if a previous test failed to delete them. This is
  # useful for third party tests that runs the test against a real external service.
  - do:
      snapshot.delete:
        repository: repository
        snapshot: snapshot-one
        ignore: 404
  - do:
      snapshot.delete:
        repository: repository
        snapshot: snapshot-two
        ignore: 404

---
"Snapshot/Restore with repository-azure":

  # Get repository
  - do:
      snapshot.get_repository:
        repository: repository

  - match: { repository.settings.container: @container@ }
  - match: { repository.settings.client : "integration_test" }
  - match: { repository.settings.base_path : @base_path@ }

  # Index documents
  - do:
      bulk:
        refresh: true
        body:
          - index:
              _index: docs
              _id:    "1"
          - snapshot: one
          - index:
              _index: docs
              _id:    "2"
          - snapshot: one
          - index:
              _index: docs
              _id:    "3"
          - snapshot: one

  - do:
      count:
        index: docs

  - match: {count: 3}

  # Create a first snapshot
  - do:
      snapshot.create:
        repository: repository
        snapshot: snapshot-one
        wait_for_completion: true

  - match: { snapshot.snapshot: snapshot-one }
  - match: { snapshot.state : SUCCESS }
  - match: { snapshot.include_global_state: true }
  - match: { snapshot.shards.failed : 0 }

  - do:
      snapshot.status:
        repository: repository
        snapshot: snapshot-one

  - is_true: snapshots
  - match: { snapshots.0.snapshot: snapshot-one }
  - match: { snapshots.0.state : SUCCESS }

  # Index more documents
  - do:
      bulk:
        refresh: true
        body:
          - index:
              _index: docs
              _id:    "4"
          - snapshot: two
          - index:
              _index: docs
              _id:    "5"
          - snapshot: two
          - index:
              _index: docs
              _id:    "6"
          - snapshot: two
          - index:
              _index: docs
              _id:    "7"
          - snapshot: two

  - do:
      count:
        index: docs

  - match: {count: 7}

  # Create a second snapshot
  - do:
      snapshot.create:
        repository: repository
        snapshot: snapshot-two
        wait_for_completion: true

  - match: { snapshot.snapshot: snapshot-two }
  - match: { snapshot.state : SUCCESS }
  - match: { snapshot.shards.failed : 0 }

  - do:
      snapshot.get:
        repository: repository
        snapshot: snapshot-one,snapshot-two

  - is_true: snapshots
  - match: { snapshots.0.state : SUCCESS }
  - match: { snapshots.1.state : SUCCESS }

  # Delete the index
  - do:
      indices.delete:
        index: docs

  # Restore the second snapshot
  - do:
      snapshot.restore:
        repository: repository
        snapshot: snapshot-two
        wait_for_completion: true

  - do:
      count:
        index: docs

  - match: {count: 7}

  # Delete the index again
  - do:
      indices.delete:
        index: docs

  # Restore the first snapshot
  - do:
      snapshot.restore:
        repository: repository
        snapshot: snapshot-one
        wait_for_completion: true

  - do:
      count:
        index: docs

  - match: {count: 3}

  # Remove the snapshots
  - do:
      snapshot.delete:
        repository: repository
        snapshot: snapshot-two
        master_timeout: 5m

  - do:
      snapshot.delete:
        repository: repository
        snapshot: snapshot-one
        master_timeout: 5m

---
"Register a repository with a non existing container":

  - do:
      catch: /repository_verification_exception/
      snapshot.create_repository:
        repository: repository
        body:
          type: azure
          settings:
            container: zHHkfSqlbnBsbpSgvCYtxrEfFLqghXtyPvvvKPNBnRCicNHQLE
            client: integration_test

---
"Register a repository with a non existing client":

  - do:
      # TODO this should be a repository_exception
      catch: /settings_exception/
      snapshot.create_repository:
        repository: repository
        body:
          type: azure
          settings:
            bucket: repository
            client: unknown

---
"Get a non existing snapshot":

  - do:
      catch: /snapshot_missing_exception/
      snapshot.get:
        repository: repository
        snapshot: missing

---
"Delete a non existing snapshot":

  - do:
      catch: /snapshot_missing_exception/
      snapshot.delete:
        repository: repository
        snapshot: missing

---
"Restore a non existing snapshot":

  - do:
      catch: /snapshot_restore_exception/
      snapshot.restore:
        repository: repository
        snapshot: missing
        wait_for_completion: true

---
teardown:

  # Remove our repository
  - do:
     snapshot.delete_repository:
       repository: repository

# Integration tests for repository-s3

---
setup:

  # Register repository with permanent credentials
  - do:
      snapshot.create_repository:
        repository: repository_permanent
        body:
          type: s3
          settings:
            bucket: bucket
            client: integration_test_permanent
            base_path: base_path_integration_tests
            canned_acl: private
            storage_class: standard

  # Remove the snapshots, if a previous test failed to delete them. This is
  # useful for third party tests that runs the test against a real external service.
  - do:
      snapshot.delete:
        repository: repository_permanent
        snapshot: snapshot-one
        ignore: 404
  - do:
      snapshot.delete:
        repository: repository_permanent
        snapshot: snapshot-two
        ignore: 404

---
"Try to create repository with broken endpoint override and named client":
  # Register repository with broken endpoint setting
  - do:
      catch: /repository_verification_exception/
      snapshot.create_repository:
        repository: repository_broken
        body:
          type: s3
          settings:
            bucket: bucket
            client: integration_test_permanent
            base_path: base_path_integration_tests
            endpoint: 127.0.0.1:5
            canned_acl: private
            storage_class: standard

  # Turn of verification to be able to create the repo with broken endpoint setting
  - do:
      snapshot.create_repository:
        verify: false
        repository: repository_broken
        body:
          type: s3
          settings:
            bucket: bucket
            client: integration_test_permanent
            base_path: base_path_integration_tests
            endpoint: 127.0.0.1:5
            canned_acl: private
            storage_class: standard

  # Index documents
  - do:
      bulk:
        refresh: true
        body:
          - index:
              _index: docs
              _id:    "1"
          - snapshot: one
          - index:
              _index: docs
              _id:    "2"
          - snapshot: one
          - index:
              _index: docs
              _id:    "3"
          - snapshot: one

  - do:
      count:
        index: docs

  - match: {count: 3}

  # Creating snapshot with broken repo should fail
  - do:
      catch: /repository_exception/
      snapshot.create:
        repository: repository_broken
        snapshot: snapshot-one
        wait_for_completion: true

  # Creating snapshot with existing working repository should work
  - do:
      snapshot.create:
        repository: repository_permanent
        snapshot: snapshot-one
        wait_for_completion: true

  - match: { snapshot.snapshot: snapshot-one }
  - match: { snapshot.state: SUCCESS }
  - match: { snapshot.include_global_state: true }
  - match: { snapshot.shards.failed: 0 }

---
teardown:

  # Remove our repository
  - do:
     snapshot.delete_repository:
       repository: repository_permanent

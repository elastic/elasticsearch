# Integration tests for repository-s3

---
setup:

  # Register repository with sts credentials
  - do:
      snapshot.create_repository:
        repository: repository_sts
        body:
          type: s3
          settings:
            bucket: @sts_bucket@
            client: integration_test_sts
            base_path: "@sts_base_path@"
            canned_acl: private
            storage_class: standard
            disable_chunked_encoding: @disable_chunked_encoding@

---
"Snapshot and Restore repository-s3 using sts credentials":

  # Get repository
  - do:
      snapshot.get_repository:
        repository: repository_sts

  - match: { repository_sts.settings.bucket: @sts_bucket@ }
  - match: { repository_sts.settings.client: "integration_test_sts" }
  - match: { repository_sts.settings.base_path: "@sts_base_path@" }
  - match: { repository_sts.settings.canned_acl: "private" }
  - match: { repository_sts.settings.storage_class: "standard" }
  - is_false: repository_sts.settings.access_key
  - is_false: repository_sts.settings.secret_key
  - is_false: repository_sts.settings.session_token

  # Index documents
  - do:
      bulk:
        refresh: true
        body:
          - index:
              _index: docs
              _id: 1
          - snapshot: one
          - index:
              _index: docs
              _id: 2
          - snapshot: one
          - index:
              _index: docs
              _id: 3
          - snapshot: one

  - do:
      count:
        index: docs

  - match: { count: 3 }

  # Create a first snapshot
  - do:
      snapshot.create:
        repository: repository_sts
        snapshot: snapshot-one
        wait_for_completion: true

  - match: { snapshot.snapshot: snapshot-one }
  - match: { snapshot.state: SUCCESS }
  - match: { snapshot.include_global_state: true }
  - match: { snapshot.shards.failed: 0 }

  - do:
      snapshot.status:
        repository: repository_sts
        snapshot: snapshot-one

  - is_true: snapshots
  - match: { snapshots.0.snapshot: snapshot-one }
  - match: { snapshots.0.state: SUCCESS }

  # Index more documents
  - do:
      bulk:
        refresh: true
        body:
          - index:
              _index: docs
              _id: 4
          - snapshot: two
          - index:
              _index: docs
              _id: 5
          - snapshot: two
          - index:
              _index: docs
              _id: 6
          - snapshot: two
          - index:
              _index: docs
              _id: 7
          - snapshot: two

  - do:
      count:
        index: docs

  - match: { count: 7 }

  # Create a second snapshot
  - do:
      snapshot.create:
        repository: repository_sts
        snapshot: snapshot-two
        wait_for_completion: true

  - match: { snapshot.snapshot: snapshot-two }
  - match: { snapshot.state: SUCCESS }
  - match: { snapshot.shards.failed: 0 }

  - do:
      snapshot.get:
        repository: repository_sts
        snapshot: snapshot-one,snapshot-two

  - is_true: snapshots
  - match: { snapshots.0.state: SUCCESS }
  - match: { snapshots.1.state: SUCCESS }

  # Delete the index
  - do:
      indices.delete:
        index: docs

  # Restore the second snapshot
  - do:
      snapshot.restore:
        repository: repository_sts
        snapshot: snapshot-two
        wait_for_completion: true

  - do:
      count:
        index: docs

  - match: { count: 7 }

  # Delete the index again
  - do:
      indices.delete:
        index: docs

  # Restore the first snapshot
  - do:
      snapshot.restore:
        repository: repository_sts
        snapshot: snapshot-one
        wait_for_completion: true

  - do:
      count:
        index: docs

  - match: { count: 3 }

  # Remove the snapshots
  - do:
      snapshot.delete:
        repository: repository_sts
        snapshot: snapshot-two

  - do:
      snapshot.delete:
        repository: repository_sts
        snapshot: snapshot-one

---

"Register a repository with a non existing bucket":

  - do:
      catch: /repository_verification_exception/
      snapshot.create_repository:
        repository: repository_sts
        body:
          type: s3
          settings:
            bucket: zHHkfSqlbnBsbpSgvCYtxrEfFLqghXtyPvvvKPNBnRCicNHQLE
            client: integration_test_sts

---
"Register a repository with a non existing client":

  - do:
      catch: /illegal_argument_exception/
      snapshot.create_repository:
        repository: repository_sts
        body:
          type: s3
          settings:
            bucket: repository_sts
            client: unknown

---
"Register a read-only repository with a non existing bucket":

  - do:
      catch: /repository_verification_exception/
      snapshot.create_repository:
        repository: repository_sts
        body:
          type: s3
          settings:
            readonly: true
            bucket: zHHkfSqlbnBsbpSgvCYtxrEfFLqghXtyPvvvKPNBnRCicNHQLE
            client: integration_test_sts

---
"Register a read-only repository with a non existing client":

  - do:
      catch: /illegal_argument_exception/
      snapshot.create_repository:
        repository: repository_sts
        body:
          type: s3
          settings:
            readonly: true
            bucket: repository_sts
            client: unknown

---
"Get a non existing snapshot":

  - do:
      catch: /snapshot_missing_exception/
      snapshot.get:
        repository: repository_sts
        snapshot: missing

---
"Delete a non existing snapshot":

  - do:
      catch: /snapshot_missing_exception/
      snapshot.delete:
        repository: repository_sts
        snapshot: missing

---
"Restore a non existing snapshot":

  - do:
      catch: /snapshot_restore_exception/
      snapshot.restore:
        repository: repository_sts
        snapshot: missing
        wait_for_completion: true

---
"Usage stats":
  - requires:
      cluster_features:
        - repositories.supports_usage_stats
      reason: requires this feature

  - do:
      cluster.stats: {}

  - gte: { repositories.s3.count: 1 }
  - gte: { repositories.s3.read_write: 1 }

---
teardown:

  # Remove our repository
  - do:
      snapshot.delete_repository:
        repository: repository_sts

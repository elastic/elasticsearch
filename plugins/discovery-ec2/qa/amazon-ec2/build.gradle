/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import org.apache.tools.ant.filters.ReplaceTokens
import org.elasticsearch.gradle.internal.info.BuildParams
import org.elasticsearch.gradle.internal.test.AntFixture
import org.elasticsearch.gradle.internal.test.RestIntegTestTask
import org.elasticsearch.gradle.internal.test.rest.LegacyYamlRestTestPlugin

import static org.elasticsearch.gradle.PropertyNormalization.IGNORE_VALUE

apply plugin: 'elasticsearch.legacy-yaml-rest-test'

dependencies {
  yamlRestTestImplementation project(':plugins:discovery-ec2')
}

restResources {
  restApi {
    include '_common', 'cluster', 'nodes'
  }
}

final int ec2NumberOfNodes = 3

Map<String, Object> expansions = [
  'expected_nodes': ec2NumberOfNodes
]

tasks.named("processYamlRestTestResources").configure {
  inputs.properties(expansions)
  filter("tokens" : expansions.collectEntries {k, v -> [k, v.toString()]} /* must be a map of strings */, ReplaceTokens.class)
}

// disable default yamlRestTest task, use spezialized ones below
tasks.named("yamlRestTest").configure { enabled = false }

/*
 * Test using various credential providers (see also https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/credentials.html):
 * - Elasticsearch Keystore (secure settings discovery.ec2.access_key and discovery.ec2.secret_key)
 * - Java system properties (aws.accessKeyId and aws.secretAccessKey)
 * - Environment variables (AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY)
 * - ECS container credentials (loaded from ECS if the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI is set)
 * - Instance profile credentials (delivered through the EC2 metadata service)
 *
 * Notably missing is a test for the default credential profiles file, which is located at ~/.aws/credentials and would at least require a
 * custom Java security policy to work.
 */
['KeyStore', 'EnvVariables', 'SystemProperties', 'ContainerCredentials', 'InstanceProfile'].forEach { action ->
  TaskProvider<AntFixture> fixture = tasks.register("ec2Fixture${action}", AntFixture) {
    dependsOn project.sourceSets.yamlRestTest.runtimeClasspath
    env 'CLASSPATH', "${-> project.sourceSets.yamlRestTest.runtimeClasspath.asPath}"
    executable = "${BuildParams.runtimeJavaHome}/bin/java"
    args 'org.elasticsearch.discovery.ec2.AmazonEC2Fixture', baseDir, "${buildDir}/testclusters/yamlRestTest${action}-1/config/unicast_hosts.txt"
  }

  def yamlRestTestTask = tasks.register("yamlRestTest${action}", RestIntegTestTask) {
    dependsOn fixture
    SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);
    SourceSet yamlRestTestSourceSet = sourceSets.getByName(LegacyYamlRestTestPlugin.SOURCE_SET_NAME)
    testClassesDirs = yamlRestTestSourceSet.getOutput().getClassesDirs()
    classpath = yamlRestTestSourceSet.getRuntimeClasspath()
  }

  tasks.named("check").configure {
    dependsOn(yamlRestTestTask)
  }

  testClusters.matching { it.name == yamlRestTestTask.name}.configureEach {
    numberOfNodes = ec2NumberOfNodes
    plugin ':plugins:discovery-ec2'

    setting 'discovery.seed_providers', 'ec2'
    setting 'network.host', '_ec2_'
    setting 'discovery.ec2.endpoint', { "http://${-> fixture.get().addressAndPort}" }, IGNORE_VALUE

    systemProperty "com.amazonaws.sdk.ec2MetadataServiceEndpointOverride", { "http://${-> fixture.get().addressAndPort}" }, IGNORE_VALUE
  }
}

// Extra config for KeyStore
testClusters.matching { it.name == "yamlRestTestKeyStore" }.configureEach {
  keystore 'discovery.ec2.access_key', 'ec2_integration_test_access_key'
  keystore 'discovery.ec2.secret_key', 'ec2_integration_test_secret_key'
}

// Extra config for EnvVariables
testClusters.matching { it.name == "yamlRestTestEnvVariables" }.configureEach {
  environment 'AWS_ACCESS_KEY_ID', 'ec2_integration_test_access_key'
  environment 'AWS_SECRET_ACCESS_KEY', 'ec2_integration_test_secret_key'
}

// Extra config for SystemProperties
testClusters.matching { it.name == "yamlRestTestSystemProperties" }.configureEach {
  systemProperty 'aws.accessKeyId', 'ec2_integration_test_access_key'
  systemProperty 'aws.secretKey', 'ec2_integration_test_secret_key'
}

// Extra config for ContainerCredentials
tasks.named("ec2FixtureContainerCredentials").configure {
  env 'ACTIVATE_CONTAINER_CREDENTIALS', true
}

testClusters.matching { it.name == "yamlRestTestContainerCredentials" }.configureEach {
  environment 'AWS_CONTAINER_CREDENTIALS_FULL_URI',
    { "http://${-> tasks.findByName("ec2FixtureContainerCredentials").addressAndPort}/ecs_credentials_endpoint" }, IGNORE_VALUE
}

// Extra config for InstanceProfile
tasks.named("ec2FixtureInstanceProfile").configure {
  env 'ACTIVATE_INSTANCE_PROFILE', true
}

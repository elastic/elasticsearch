# Integration tests for repository-s3

---
setup:

  # Register repository with ec2 credentials
  - do:
      snapshot.create_repository:
        repository: repository_ec2
        body:
          type: s3
          settings:
            bucket: @ec2_bucket@
            client: integration_test_ec2
            base_path: "@ec2_base_path@"
            canned_acl: private
            storage_class: standard
            disable_chunked_encoding: @disable_chunked_encoding@

---
"Snapshot and Restore with repository-s3 using ec2 credentials":

  # Get repository
  - do:
      snapshot.get_repository:
        repository: repository_ec2

  - match: { repository_ec2.settings.bucket : @ec2_bucket@ }
  - match: { repository_ec2.settings.client : "integration_test_ec2" }
  - match: { repository_ec2.settings.base_path : "@ec2_base_path@" }
  - match: { repository_ec2.settings.canned_acl : "private" }
  - match: { repository_ec2.settings.storage_class : "standard" }
  - is_false: repository_ec2.settings.access_key
  - is_false: repository_ec2.settings.secret_key
  - is_false: repository_ec2.settings.session_token

  # Index documents
  - do:
      bulk:
        refresh: true
        body:
          - index:
              _index: docs
              _id:    "1"
          - snapshot: one
          - index:
              _index: docs
              _id:    "2"
          - snapshot: one
          - index:
              _index: docs
              _id:    "3"
          - snapshot: one

  - do:
      count:
        index: docs

  - match: {count: 3}

  # Create a first snapshot
  - do:
      snapshot.create:
        repository: repository_ec2
        snapshot: snapshot-one
        wait_for_completion: true

  - match: { snapshot.snapshot: snapshot-one }
  - match: { snapshot.state : SUCCESS }
  - match: { snapshot.include_global_state: true }
  - match: { snapshot.shards.failed : 0 }

  - do:
      snapshot.status:
        repository: repository_ec2
        snapshot: snapshot-one

  - is_true: snapshots
  - match: { snapshots.0.snapshot: snapshot-one }
  - match: { snapshots.0.state : SUCCESS }

  # Index more documents
  - do:
      bulk:
        refresh: true
        body:
          - index:
              _index: docs
              _id:    "4"
          - snapshot: two
          - index:
              _index: docs
              _id:    "5"
          - snapshot: two
          - index:
              _index: docs
              _id:    "6"
          - snapshot: two
          - index:
              _index: docs
              _id:    "7"
          - snapshot: two

  - do:
      count:
        index: docs

  - match: {count: 7}

  # Create a second snapshot
  - do:
      snapshot.create:
        repository: repository_ec2
        snapshot: snapshot-two
        wait_for_completion: true

  - match: { snapshot.snapshot: snapshot-two }
  - match: { snapshot.state : SUCCESS }
  - match: { snapshot.shards.failed : 0 }

  - do:
      snapshot.get:
        repository: repository_ec2
        snapshot: snapshot-one,snapshot-two

  - is_true: snapshots
  - match: { snapshots.0.state : SUCCESS }
  - match: { snapshots.1.state : SUCCESS }

  # Delete the index
  - do:
      indices.delete:
        index: docs

  # Restore the second snapshot
  - do:
      snapshot.restore:
        repository: repository_ec2
        snapshot: snapshot-two
        wait_for_completion: true

  - do:
      count:
        index: docs

  - match: {count: 7}

  # Delete the index again
  - do:
      indices.delete:
        index: docs

  # Restore the first snapshot
  - do:
      snapshot.restore:
        repository: repository_ec2
        snapshot: snapshot-one
        wait_for_completion: true

  - do:
      count:
        index: docs

  - match: {count: 3}

  # Remove the snapshots
  - do:
      snapshot.delete:
        repository: repository_ec2
        snapshot: snapshot-two

  - do:
      snapshot.delete:
        repository: repository_ec2
        snapshot: snapshot-one

---
"Register a repository with a non existing bucket":

  - do:
      catch: /repository_verification_exception/
      snapshot.create_repository:
        repository: repository_ec2
        body:
          type: s3
          settings:
            bucket: zHHkfSqlbnBsbpSgvCYtxrEfFLqghXtyPvvvKPNBnRCicNHQLE
            client: integration_test_temporary

---
"Register a repository with a non existing client":

  - do:
      catch: /illegal_argument_exception/
      snapshot.create_repository:
        repository: repository_ec2
        body:
          type: s3
          settings:
            bucket: repository_ec2
            client: unknown

---
"Register a read-only repository with a non existing bucket":

- do:
    catch: /repository_verification_exception/
    snapshot.create_repository:
      repository: repository_ec2
      body:
        type: s3
        settings:
          readonly: true
          bucket: zHHkfSqlbnBsbpSgvCYtxrEfFLqghXtyPvvvKPNBnRCicNHQLE
          client: integration_test_temporary

---
"Register a read-only repository with a non existing client":

- do:
    catch: /illegal_argument_exception/
    snapshot.create_repository:
      repository: repository_ec2
      body:
        type: s3
        settings:
          readonly: true
          bucket: repository_ec2
          client: unknown

---
"Get a non existing snapshot":

  - do:
      catch: /snapshot_missing_exception/
      snapshot.get:
        repository: repository_ec2
        snapshot: missing

---
"Delete a non existing snapshot":

  - do:
      catch: /snapshot_missing_exception/
      snapshot.delete:
        repository: repository_ec2
        snapshot: missing

---
"Restore a non existing snapshot":

  - do:
      catch: /snapshot_restore_exception/
      snapshot.restore:
        repository: repository_ec2
        snapshot: missing
        wait_for_completion: true

---
teardown:

  # Remove our repository
  - do:
     snapshot.delete_repository:
       repository: repository_ec2

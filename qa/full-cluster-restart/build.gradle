/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

import org.elasticsearch.gradle.Version
import org.elasticsearch.gradle.testclusters.StandaloneRestIntegTestTask

apply plugin: 'elasticsearch.internal-java-rest-test'
apply plugin: 'elasticsearch.internal-test-artifact'
apply plugin: 'elasticsearch.bwc-test'
apply plugin: 'elasticsearch.bc-upgrade-test'

buildParams.bwcVersions.withIndexCompatible { bwcVersion, baseName ->
  tasks.register(bwcTaskName(bwcVersion), StandaloneRestIntegTestTask) {
    usesBwcDistribution(bwcVersion)
    systemProperty("tests.old_cluster_version", bwcVersion)
  }
}

tasks.register("luceneBwcTest", StandaloneRestIntegTestTask) {
  project.gradle.taskGraph.whenReady { allTasks ->
    if (allTasks.hasTask(getPath())) {
      if (System.getProperty("tests.bwc.refspec.main") == null) {
        throw new GradleException("You must set the `tests.bwc.refspec.main` system property to run luceneBwcTest")
      }
      if (System.getProperty("tests.bwc.main.version") == null) {
        throw new GradleException("You must set the `tests.bwc.main.version` system property to run luceneBwcTest")
      }
    }
  }
  if (System.getProperty("tests.bwc.refspec.main") != null && System.getProperty("tests.bwc.main.version") != null) {
    usesBwcDistributionFromRef(System.getProperty("tests.bwc.refspec.main"), Version.fromString(System.getProperty("tests.bwc.main.version")))
    systemProperty("tests.old_cluster_version", System.getProperty("tests.bwc.main.version"))
  }
}

tasks.named("bcUpgradeTest").configure {
  filter {
    // Mute testSnapshotRestore: it uses string compare of Version (from the cluster, saved in the snapshot) with tests.bwc.main.version,
    // which does not work for SNAPSHOT builds
    excludeTestsMatching("org.elasticsearch.upgrades.FullClusterRestartIT.testSnapshotRestore")
    excludeTestsMatching("org.elasticsearch.upgrades.FullClusterRestartIT.testSnapshotRestore *")
  }
}

tasks.withType(Test).configureEach {
  // CI doesn't like it when there's multiple clusters running at once
  maxParallelForks = 1
}

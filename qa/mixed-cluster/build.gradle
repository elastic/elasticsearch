/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */


import org.elasticsearch.gradle.testclusters.StandaloneRestIntegTestTask

import static org.elasticsearch.gradle.internal.test.rest.RestTestUtil.registerTestTask

apply plugin: 'elasticsearch.internal-java-rest-test'
apply plugin: 'elasticsearch.internal-yaml-rest-test'
apply plugin: 'elasticsearch.rest-resources'
apply plugin: 'elasticsearch.bwc-test'

dependencies {
  restTestConfig project(path: ':modules:aggregations', configuration: 'restTests')
  restTestConfig project(path: ':modules:mapper-extras', configuration: 'restTests')
}

restResources {
  restTests {
    includeCore '*'
  }
}

def excludeList = []
// Excluding these cache aggregation tests from mixed cluster qa,
// because we can't hit the same node reliable. The qa cluster
// consists of 4 nodes. Two nodes are on old version and the
// other two nodes on the current version. The node selector skips
// the nodes on current version. The rest client then round robins
// between the two nodes on old version. In order to unmute this,
// we need a different node selector, that always consistently
// selects the same node.
excludeList.add('aggregations/adjacency_matrix/Terms lookup')
excludeList.add('aggregations/filter/Standard queries get cached')
excludeList.add('aggregations/filter/Terms lookup gets cached')
excludeList.add('aggregations/filters_bucket/cache hits')

// These tests check setting validations in the desired_node API.
// Validation (and associated tests) are supposed to be skipped/have
// different behaviour for versions before and after 8.10 but mixed
// cluster tests may not respect that - see the comment above.
// Same for node version, which has been deprecated (and made optional)
// starting from 8.13
excludeList.add('cluster.desired_nodes/11_old_format/Test settings are validated')
excludeList.add('cluster.desired_nodes/11_old_format/Test unknown settings are forbidden in known versions')
excludeList.add('cluster.desired_nodes/11_old_format/Test unknown settings are allowed in future versions')
excludeList.add('cluster.desired_nodes/11_old_format/Test some settings can be overridden')
excludeList.add('cluster.desired_nodes/11_old_format/Test node version must be at least the current master version')
excludeList.add('cluster.desired_nodes/11_old_format/Test node version is required')
excludeList.add('cluster.desired_nodes/11_old_format/Test node version must have content')
excludeList.add('cluster.desired_nodes/11_old_format/Test node version can not be null')
excludeList.add('cluster.desired_nodes/20_dry_run/Test validation works for dry run updates')

// Excluded because they create dot-prefixed indices on older versions
excludeList.add('indices.resolve_index/20_resolve_system_index/*')

// Excluded because the error has changed
excludeList.add('aggregations/percentiles_hdr_metric/Negative values test')

// sync_id is removed in 9.0
excludeList.add("cat.shards/10_basic/Help")

buildParams.bwcVersions.withWireCompatible { bwcVersion, baseName ->
  registerTestTask(project, sourceSets.yamlRestTest, "v${bwcVersion}#yamlBwcTest", StandaloneRestIntegTestTask).configure {
    usesBwcDistribution(bwcVersion)
    systemProperty("tests.old_cluster_version", bwcVersion)
    if (excludeList.isEmpty() == false) {
      systemProperty 'tests.rest.blacklist', excludeList.join(',')
    }
  }

  registerTestTask(project, sourceSets.javaRestTest, "v${bwcVersion}#javaBwcTest", StandaloneRestIntegTestTask).configure {
    usesBwcDistribution(bwcVersion)
    systemProperty("tests.old_cluster_version", bwcVersion)
  }

  tasks.register(bwcTaskName(bwcVersion)) {
    dependsOn "v${bwcVersion}#yamlBwcTest", "v${bwcVersion}#javaBwcTest"
  }

  tasks.withType(Test).configureEach {
    boolean bwcEnabled = project.bwc_tests_enabled
    onlyIf("BWC tests enabled") { bwcEnabled }
    nonInputProperties.systemProperty 'tests.bwc', 'true'
  }
}

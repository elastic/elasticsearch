---
"Index data and search on the mixed cluster":

  - do:
      indices.create:
        index: test_index
        body:
          settings:
            index:
              number_of_shards: 2
              number_of_replicas: 0

  - do:
      bulk:
        refresh: true
        body:
            - '{"index": {"_index": "test_index"}}'
            - '{"f1": "local_cluster", "animal": "dog", "filter_field": 0}'
            - '{"index": {"_index": "test_index"}}'
            - '{"f1": "local_cluster", "animal": "dog", "filter_field": 1}'
            - '{"index": {"_index": "test_index"}}'
            - '{"f1": "local_cluster", "animal": "dog", "filter_field": 0}'
            - '{"index": {"_index": "test_index"}}'
            - '{"f1": "local_cluster", "animal": "dog", "filter_field": 1}'
            - '{"index": {"_index": "test_index"}}'
            - '{"f1": "local_cluster", "animal": "pig", "filter_field": 0}'

  - do:
      search:
        rest_total_hits_as_int: true
        index: test_index,my_remote_cluster:test_index
        body:
          seq_no_primary_term: true
          aggs:
            cluster:
              terms:
                field: f1.keyword

  - match: { num_reduce_phases: 3 }
  - match: {_clusters.total: 2}
  - match: {_clusters.successful: 2}
  - match: {_clusters.skipped: 0}
  - match: {num}
  - match: { _shards.total: 5 }
  - match: { hits.total: 11 }
  - gte: { hits.hits.0._seq_no: 0 }
  - gte: { hits.hits.0._primary_term: 1 }
  - length: { aggregations.cluster.buckets: 2 }
  - match: { aggregations.cluster.buckets.0.key: "remote_cluster" }
  - match: { aggregations.cluster.buckets.0.doc_count: 6 }
  - match: { aggregations.cluster.buckets.1.key: "local_cluster" }
  - match: { aggregations.cluster.buckets.1.doc_count: 5 }

  - do:
      search:
        rest_total_hits_as_int: true
        index: test_index,my_remote_cluster:test_index
        body:
          query:
            term:
              f1: remote_cluster
          aggs:
            cluster:
              terms:
                field: f1.keyword

  - match: { num_reduce_phases: 3 }
  - match: {_clusters.total: 2}
  - match: {_clusters.successful: 2}
  - match: {_clusters.skipped: 0}
  - match: { _shards.total: 5 }
  - match: { hits.total: 6}
  - match: { hits.hits.0._index: "my_remote_cluster:test_index"}
  - length: { aggregations.cluster.buckets: 1 }
  - match: { aggregations.cluster.buckets.0.key: "remote_cluster" }
  - match: { aggregations.cluster.buckets.0.doc_count: 6 }

  - do:
      search:
        rest_total_hits_as_int: true
        index: my_remote_cluster:test_index
        body:
          aggs:
            cluster:
              terms:
                field: f1.keyword

  - is_false: num_reduce_phases
  - match: {_clusters.total: 1}
  - match: {_clusters.successful: 1}
  - match: {_clusters.skipped: 0}
  - match: { _shards.total: 3 }
  - match: { hits.total: 6}
  - match: { hits.hits.0._index: "my_remote_cluster:test_index"}
  - length: { aggregations.cluster.buckets: 1 }
  - match: { aggregations.cluster.buckets.0.key: "remote_cluster" }
  - match: { aggregations.cluster.buckets.0.doc_count: 6 }

  - do:
      search:
        rest_total_hits_as_int: true
        index: test_index
        body:
          aggs:
            cluster:
              terms:
                field: f1.keyword

  - is_false: num_reduce_phases
  - is_false: _clusters
  - match: { _shards.total: 2 }
  - match: { hits.total: 5}
  - match: { hits.hits.0._index: "test_index"}
  - length: { aggregations.cluster.buckets: 1 }
  - match: { aggregations.cluster.buckets.0.key: "local_cluster" }
  - match: { aggregations.cluster.buckets.0.doc_count: 5 }

  # once more, this time with a top level pipeline agg
  - do:
      search:
        rest_total_hits_as_int: true
        index: test_index,my_remote_cluster:test_index
        body:
          seq_no_primary_term: true
          aggs:
            cluster:
              terms:
                field: f1.keyword
              aggs:
                s:
                  sum:
                    field: filter_field
            average_sum:
              avg_bucket:
                buckets_path: cluster.s

  - match: { num_reduce_phases: 3 }
  - match: {_clusters.total: 2}
  - match: {_clusters.successful: 2}
  - match: {_clusters.skipped: 0}
  - match: { _shards.total: 5 }
  - match: { hits.total: 11 }
  - length: { aggregations.cluster.buckets: 2 }
  - match: { aggregations.cluster.buckets.0.key: "remote_cluster" }
  - match: { aggregations.cluster.buckets.0.doc_count: 6 }
  - match: { aggregations.cluster.buckets.0.s.value: 2 }
  - match: { aggregations.cluster.buckets.1.key: "local_cluster" }
  - match: { aggregations.cluster.buckets.1.s.value: 2 }
  - match: { aggregations.average_sum.value: 2 }

  # and now a non-top-level pipeline agg!
  - do:
      search:
        rest_total_hits_as_int: true
        index: test_index,my_remote_cluster:test_index
        body:
          seq_no_primary_term: true
          aggs:
            cluster:
              terms:
                field: f1.keyword
              aggs:
                animal:
                  terms:
                    field: animal.keyword
                  aggs:
                    s:
                      sum:
                        field: filter_field
                average_sum:
                  avg_bucket:
                    buckets_path: animal.s

  - match: { num_reduce_phases: 3 }
  - match: {_clusters.total: 2}
  - match: {_clusters.successful: 2}
  - match: {_clusters.skipped: 0}
  - match: { _shards.total: 5 }
  - match: { hits.total: 11 }
  - length: { aggregations.cluster.buckets: 2 }
  - match: { aggregations.cluster.buckets.0.key: "remote_cluster" }
  - match: { aggregations.cluster.buckets.0.doc_count: 6 }
  - match: { aggregations.cluster.buckets.0.animal.buckets.0.key: "chicken" }
  - match: { aggregations.cluster.buckets.0.animal.buckets.0.doc_count: 4 }
  - match: { aggregations.cluster.buckets.0.animal.buckets.0.s.value: 1 }
  - match: { aggregations.cluster.buckets.0.animal.buckets.1.key: "pig" }
  - match: { aggregations.cluster.buckets.0.animal.buckets.1.doc_count: 2 }
  - match: { aggregations.cluster.buckets.0.animal.buckets.1.s.value: 1 }
  - match: { aggregations.cluster.buckets.0.average_sum.value: 1 }
  - match: { aggregations.cluster.buckets.1.key: "local_cluster" }
  - match: { aggregations.cluster.buckets.1.animal.buckets.0.key: "dog" }
  - match: { aggregations.cluster.buckets.1.animal.buckets.0.doc_count: 4 }
  - match: { aggregations.cluster.buckets.1.animal.buckets.0.s.value: 2 }
  - match: { aggregations.cluster.buckets.1.animal.buckets.1.key: "pig" }
  - match: { aggregations.cluster.buckets.1.animal.buckets.1.doc_count: 1 }
  - match: { aggregations.cluster.buckets.1.animal.buckets.1.s.value: 0 }
  - match: { aggregations.cluster.buckets.1.average_sum.value: 1 }

  # scripted_metric
  - do:
      search:
        index: test_index,my_remote_cluster:test_index
        body:
          seq_no_primary_term: true
          aggs:
            cluster:
              terms:
                field: f1.keyword
              aggs:
                animal_length:
                  scripted_metric:
                    init_script: |
                      state.sum = 0
                    map_script: |
                      state.sum += doc['animal.keyword'].value.length()
                    combine_script: |
                      state.sum
                    reduce_script: |
                      long sum = 0;
                      for (s in states) {
                        sum += s;
                      }
                      return sum
  - match: { num_reduce_phases: 3 }
  - match: {_clusters.total: 2}
  - match: {_clusters.successful: 2}
  - match: {_clusters.skipped: 0}
  - match: { _shards.total: 5 }
  - match: { hits.total.value: 11 }
  - length: { aggregations.cluster.buckets: 2 }
  - match: { aggregations.cluster.buckets.0.key: "remote_cluster" }
  - match: { aggregations.cluster.buckets.0.doc_count: 6 }
  - match: { aggregations.cluster.buckets.0.animal_length.value: 34 }
  - match: { aggregations.cluster.buckets.1.key: "local_cluster" }
  - match: { aggregations.cluster.buckets.1.animal_length.value: 15 }

---
"Add persistent remote cluster based on the preset cluster":
  - do:
      cluster.get_settings:
        include_defaults: true

  - set: { defaults.cluster.remote.my_remote_cluster.seeds.0: remote_ip }

  - do:
      cluster.put_settings:
        flat_settings: true
        body:
          persistent:
            cluster.remote.test_remote_cluster.seeds: $remote_ip

  - match: {persistent.cluster\.remote\.test_remote_cluster\.seeds: $remote_ip}

  - do:
      search:
        rest_total_hits_as_int: true
        index: test_remote_cluster:test_index

  - is_false: num_reduce_phases
  - match: {_clusters.total: 1}
  - match: {_clusters.successful: 1}
  - match: {_clusters.skipped: 0}
  - match: { _shards.total: 3 }
  - match: { hits.total: 6 }
  - match: { hits.hits.0._index: "test_remote_cluster:test_index" }

---
"Test wildcard search":
  - do:
      cluster.get_settings:
        include_defaults: true

  - set: { defaults.cluster.remote.my_remote_cluster.seeds.0: remote_ip }

  - do:
      cluster.put_settings:
        flat_settings: true
        body:
          persistent:
            cluster.remote.test_remote_cluster.seeds: $remote_ip

  - match: {persistent: {cluster.remote.test_remote_cluster.seeds: $remote_ip}}

  - do:
      search:
        rest_total_hits_as_int: true
        index: "*:test_index"

  - match: { num_reduce_phases: 3 }
  - match: {_clusters.total: 2}
  - match: {_clusters.successful: 2}
  - match: {_clusters.skipped: 0}
  - match: { _shards.total: 6 }
  - match: { hits.total: 12 }

---
"Search a filtered alias on the remote cluster":

  - do:
      search:
        rest_total_hits_as_int: true
        index: my_remote_cluster:aliased_test_index

  - is_false: num_reduce_phases
  - match: {_clusters.total: 1}
  - match: {_clusters.successful: 1}
  - match: {_clusters.skipped: 0}
  - match: { _shards.total: 3 }
  - match: { hits.total: 2 }
  - match: { hits.hits.0._source.filter_field: 1 }
  - match: { hits.hits.0._index: "my_remote_cluster:test_index" }

---
"Search a filtered alias and empty index on the remote cluster":

  - do:
      search:
        rest_total_hits_as_int: true
        index: my_remote_cluster:aliased_test_index,my_remote_cluster:field_caps_empty_index

  - is_false: num_reduce_phases
  - match: {_clusters.total: 1}
  - match: {_clusters.successful: 1}
  - match: {_clusters.skipped: 0}
  - match: { _shards.total: 4 }
  - match: { hits.total: 2 }
  - match: { hits.hits.0._source.filter_field: 1 }
  - match: { hits.hits.0._index: "my_remote_cluster:test_index" }

---
"Single shard search gets properly proxied":

  - do:
      search:
        rest_total_hits_as_int: true
        index: "my_remote_cluster:single_doc_index"

  - is_false: num_reduce_phases
  - match: {_clusters.total: 1}
  - match: {_clusters.successful: 1}
  - match: {_clusters.skipped: 0}
  - match: { _shards.total: 1 }
  - match: { hits.total: 1 }
  - match: { hits.hits.0._index: "my_remote_cluster:single_doc_index"}

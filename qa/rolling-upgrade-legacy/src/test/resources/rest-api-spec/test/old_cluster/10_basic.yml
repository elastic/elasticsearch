---
"Create things in the cluster state that we'll validate are there after the upgrade":
  - do:
      snapshot.create_repository:
        repository: my_repo
        verify: false
        body:
          type: url
          settings:
            url: "http://snapshot.test"
  - match: { "acknowledged": true }

  - do:
      ingest.put_pipeline:
        id: "my_pipeline"
        body:  >
          {
            "description": "_description",
            "processors": [
            ]
          }
  - match: { "acknowledged": true }

  - do:
      bulk:
        refresh: true
        body:
          - '{"index": {"_index": "test_search_template"}}'
          - '{"f1": "v1_old"}'
          - '{"index": {"_index": "test_search_template"}}'
          - '{"f1": "v2_old"}'
          - '{"index": {"_index": "test_search_template"}}'
          - '{"f1": "v3_old"}'
          - '{"index": {"_index": "test_search_template"}}'
          - '{"f1": "v4_old"}'
          - '{"index": {"_index": "test_search_template"}}'
          - '{"f1": "v5_old"}'

  - do:
      put_script:
        id: test_search_template
        body:
          script:
            lang: mustache
            source:
              query:
                match:
                  f1: "{{f1}}"
  - match: { acknowledged: true }

  - do:
      search_template:
        rest_total_hits_as_int: true
        index: test_search_template
        body:
          id: test_search_template
          params:
            f1: v5_old
  - match: { hits.total: 1 }

---
"Index percolator queries and use the percolate query in old cluster":
  - do:
      indices.create:
        index: queries
        body:
          mappings:
            properties:
              id:
                type: keyword
              query:
                type: percolator
              field1:
                type: keyword
              field2:
                type: keyword
              field3:
                type: keyword

  - do:
       index:
         index: queries
         id: q1
         body:
          id: q1
          query:
            term:
              field1: value

  - do:
      index:
        index: queries
        id: q2
        body:
          id: q2
          query:
            bool:
              must:
                - term:
                    field1: value
                - term:
                    field2: value

  - do:
      index:
        index: queries
        id: q3
        body:
          id: q3
          query:
            bool:
              minimum_should_match: 2
              should:
                - term:
                    field2: value
                - term:
                    field3: value

  - do:
      indices.refresh:
        index: queries

  - do:
      search:
        rest_total_hits_as_int: true
        index: queries
        body:
          query:
            percolate:
              field: query
              document:
                field1: value
  - match: { hits.total: 1 }
  - match: { hits.hits.0._id: q1 }

  - do:
      search:
        rest_total_hits_as_int: true
        index: queries
        body:
          sort: id
          query:
            percolate:
              field: query
              document:
                field1: value
                field2: value
  - match: { hits.total: 2 }
  - match: { hits.hits.0._id: q1 }
  - match: { hits.hits.1._id: q2 }

  - do:
      search:
        rest_total_hits_as_int: true
        index: queries
        body:
          sort: id
          query:
            percolate:
              field: query
              document:
                field2: value
                field3: value
  - match: { hits.total: 1 }
  - match: { hits.hits.0._id: q3 }

---
"Create a task result record in the old cluster":
  - do:
      indices.create:
        index: reindexed_index
        body:
          settings:
            index:
              number_of_replicas: 0
  - do:
      bulk:
        refresh: true
        body:
          - '{"index": {"_index": "reindexed_index"}}'
          - '{"f1": "1"}'
          - '{"index": {"_index": "reindexed_index"}}'
          - '{"f1": "2"}'
          - '{"index": {"_index": "reindexed_index"}}'
          - '{"f1": "3"}'
          - '{"index": {"_index": "reindexed_index"}}'
          - '{"f1": "4"}'
          - '{"index": {"_index": "reindexed_index"}}'
          - '{"f1": "5"}'

  - do:
      reindex:
        wait_for_completion: false
        body:
          source:
            index: reindexed_index
            size: 1
          dest:
            index: reindexed_index_copy
  - match: {task: '/.+:\d+/'}
  - set: {task: task}

  - do:
      tasks.get:
        wait_for_completion: true
        task_id: $task

---
"Component and composable template validation":
  - skip:
      features: allowed_warnings

  - do:
      cluster.put_component_template:
        name: my-ct
        body:
          template:
            settings:
              number_of_shards:   1
              number_of_replicas: 0
            mappings:
              dynamic: false
            aliases:
              aliasname: {}
          version: 2
          _meta:
            foo: bar
            baz:
              eggplant: true

  - do:
      allowed_warnings:
        - "index template [my-it] has index patterns [test-*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [my-it] will take precedence during new index creation"
      indices.put_index_template:
        name: my-it
        body:
          index_patterns: [test-*]
          composed_of: ["my-ct"]
          template:
            settings:
              number_of_shards:   1
              number_of_replicas: 0
            mappings:
              properties:
                field:
                  type: text
            aliases:
              test_alias: {}
              test_blias: { routing: b }
              test_clias: { filter: { term: { user: kimchy }}}

  - do:
      cluster.get_component_template:
        name: my-ct

  - do:
      indices.get_index_template:
        name: my-it

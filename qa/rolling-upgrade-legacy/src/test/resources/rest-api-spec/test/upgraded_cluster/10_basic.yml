---
"Verify that we can still find things with the template":

  - do:
      search_template:
        rest_total_hits_as_int: true
        index: test_search_template
        body:
          id: test_search_template
          params:
            f1: v5_old
  - match: { hits.total: 1 }

---
"Verify custom cluster metadata still exists after rolling upgrade":
  - do:
      snapshot.get_repository:
        repository: my_repo
  - is_true: my_repo

  - do:
      ingest.get_pipeline:
        id: "my_pipeline"
  - match: { my_pipeline.description: "_description" }

---
"Index percolator query and use the percolate query in upgraded cluster":
  - do:
      index:
        index: queries
        id: q4
        refresh: true
        body:
          id: q4
          query:
            bool:
              minimum_should_match: 2
              should:
                - term:
                    field1: value
                - term:
                    field2: value

  - do:
      search:
        rest_total_hits_as_int: true
        index: queries
        body:
          query:
            percolate:
              field: query
              document:
                field1: value
  - match: { hits.total: 1 }
  - match: { hits.hits.0._id: q1 }

  - do:
      search:
        rest_total_hits_as_int: true
        index: queries
        body:
          sort: id
          query:
            percolate:
              field: query
              document:
                field1: value
                field2: value
  - match: { hits.total: 3 }
  - match: { hits.hits.0._id: q1 }
  - match: { hits.hits.1._id: q2 }
  - match: { hits.hits.2._id: q4 }

  - do:
      search:
        rest_total_hits_as_int: true
        index: queries
        body:
          query:
            percolate:
              field: query
              document:
                field2: value
                field3: value
  - match: { hits.total: 1 }
  - match: { hits.hits.0._id: q3 }

---
"Find a task result record from the old cluster":
  - skip:
      features:
        - headers
        - warnings

  - do:
      warnings:
        - "this request accesses system indices: [.tasks], but in a future major version, direct access to system indices will be prevented by default"
      search:
        rest_total_hits_as_int: true
        index: .tasks
        body:
          query:
            match:
              task.description:
                query: 'reindexed_index_copy'
  - match: { hits.total: 1 }
  - match: { hits.hits.0._id: '/.+:\d+/' }
  - set: {hits.hits.0._id: task_id}

  - do:
      tasks.get:
        task_id: $task_id

  - is_false: node_failures
  - is_true: task

  - do:
      headers: { "X-Opaque-Id": "Reindexing Again" }
      reindex:
        wait_for_completion: false
        body:
          source:
            index: reindexed_index_copy
            size: 1
          dest:
            index: reindexed_index_another_copy
  - match: { task: '/.+:\d+/' }
  - set: { task: task_id }

  - do:
      tasks.get:
        wait_for_completion: true
        task_id: $task_id
  - match: { task.headers.X-Opaque-Id: "Reindexing Again" }

---
"Component and composable templates can be retrieved and updated":
  - do:
      cluster.get_component_template:
        name: my-ct

  - match: {component_templates.0.name: my-ct}
  - match: {component_templates.0.component_template.version: 2}
  - match: {component_templates.0.component_template._meta: {foo: bar, baz: {eggplant: true}}}
  - match: {component_templates.0.component_template.template.settings: {index: {number_of_shards: '1', number_of_replicas: '0'}}}
  - match: {component_templates.0.component_template.template.mappings: {dynamic: false}}
  - match: {component_templates.0.component_template.template.aliases: {aliasname: {}}}

  - do:
      indices.get_index_template:
        name: my-it

  - match: {index_templates.0.index_template.index_patterns: ["test-*"]}
  - match: {index_templates.0.index_template.template.settings.index: {number_of_shards: '1', number_of_replicas: '0'}}
  - is_true: index_templates.0.index_template.template.mappings
  - length: {index_templates.0.index_template.template.aliases: 3}
  - is_true: index_templates.0.index_template.template.aliases.test_alias
  - match: {index_templates.0.index_template.template.aliases.test_blias.index_routing: "b" }
  - match: {index_templates.0.index_template.template.aliases.test_blias.search_routing: "b" }
  - match: {index_templates.0.index_template.template.aliases.test_clias.filter.term.user: "kimchy" }
  - do:
      cluster.put_component_template:
        name: my-ct
        body:
          template:
            settings:
              number_of_shards:   1
              number_of_replicas: 0
            mappings:
              dynamic: true
            aliases:
              aliasname: {}
          version: 2
          _meta:
            foo: bar
            baz:
              eggplant: true

  - do:
      cluster.get_component_template:
        name: my-ct

  - match: {component_templates.0.name: my-ct}
  - match: {component_templates.0.component_template.version: 2}
  - match: {component_templates.0.component_template._meta: {foo: bar, baz: {eggplant: true}}}
  - match: {component_templates.0.component_template.template.settings: {index: {number_of_shards: '1', number_of_replicas: '0'}}}
  - is_true: component_templates.0.component_template.template.mappings
  - match: {component_templates.0.component_template.template.aliases: {aliasname: {}}}

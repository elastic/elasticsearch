/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */


import org.elasticsearch.gradle.Version
import org.elasticsearch.gradle.internal.info.BuildParams
import org.elasticsearch.gradle.testclusters.StandaloneRestIntegTestTask

apply plugin: 'elasticsearch.testclusters'
apply plugin: 'elasticsearch.standalone-rest-test'
apply plugin: 'elasticsearch.bwc-test'

for (Version bwcVersion : BuildParams.bwcVersions.indexCompatible) {
  if (bwcVersion.before('6.3.0')) {
    // explicitly running restart on the current node does not work in step 2
    // below when plugins are installed, wihch is the case for x-pack as a plugin
    // prior to 6.3.0
    continue
  }
  String baseName = "v${bwcVersion}"

  testClusters {
    "${baseName}" {
      versions = [bwcVersion.toString(), project.version]
      numberOfNodes = 2
      setting 'http.content_type.required', 'true'
    }
  }

  tasks.register("${baseName}#Step1OldClusterTest", StandaloneRestIntegTestTask) {
    useCluster testClusters."${baseName}"
    mustRunAfter(precommit)
    systemProperty 'tests.test_step', 'step1'
    systemProperty 'tests.is_old_cluster', 'true'
  }

  tasks.register("${baseName}#Step2OldClusterTest", StandaloneRestIntegTestTask) {
    useCluster testClusters."${baseName}"
    dependsOn "${baseName}#Step1OldClusterTest"
    doFirst {
      testClusters."${baseName}".fullRestart()
    }
    systemProperty 'tests.test_step', 'step2'
    systemProperty 'tests.is_old_cluster', 'true'
  }

  tasks.register("${baseName}#Step3NewClusterTest", StandaloneRestIntegTestTask) {
    useCluster testClusters."${baseName}"
    dependsOn "${baseName}#Step2OldClusterTest"
    doFirst {
      testClusters."${baseName}".goToNextVersion()
    }
    systemProperty 'tests.test_step', 'step3'
    systemProperty 'tests.is_old_cluster', 'false'
  }

  tasks.register("${baseName}#Step4NewClusterTest", StandaloneRestIntegTestTask) {
    useCluster testClusters."${baseName}"
    dependsOn "${baseName}#Step3NewClusterTest"
    doFirst {
      testClusters."${baseName}".fullRestart()
    }
    systemProperty 'tests.test_step', 'step4'
    systemProperty 'tests.is_old_cluster', 'false'
  }

  String oldVersion = bwcVersion.toString().minus("-SNAPSHOT")
  tasks.matching { it.name.startsWith(baseName) && it.name.endsWith("ClusterTest") }.configureEach {
    it.systemProperty 'tests.old_cluster_version', oldVersion
    it.nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    it.nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
  }

  tasks.register(bwcTaskName(bwcVersion)) {
    dependsOn tasks.named("${baseName}#Step4NewClusterTest")
  }
}

configurations {
  testArtifacts.extendsFrom testRuntime
}

def testJar = tasks.register("testJar", Jar) {
  archiveAppendix.set('test')
  from sourceSets.test.output
}

artifacts {
  testArtifacts testJar
}

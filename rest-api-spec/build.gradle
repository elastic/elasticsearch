apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.publish'
apply plugin: 'elasticsearch.rest-resources'
apply plugin: 'elasticsearch.validate-rest-spec'
apply plugin: 'elasticsearch.internal-yaml-rest-test'
apply plugin: 'elasticsearch.yaml-rest-compat-test'
apply plugin: 'elasticsearch.internal-test-artifact'

restResources {
  restTests {
    includeCore '*'
  }
}

// REST API specifications are published under the Apache 2.0 License
ext.projectLicenses.set(['The Apache Software License, Version 2.0': 'http://www.apache.org/licenses/LICENSE-2.0'])
licenseFile.set(rootProject.file('licenses/APACHE-LICENSE-2.0.txt'))

configurations {
  // configuration to make use by external yaml rest test plugin in our examples
  // easy and efficient
  basicRestSpecs {
    attributes {
      attribute(ArtifactTypeDefinition.ARTIFACT_TYPE_ATTRIBUTE, ArtifactTypeDefinition.DIRECTORY_TYPE)
    }
  }
}

artifacts {
  basicRestSpecs(new File(projectDir, "src/main/resources"))
  restSpecs(new File(projectDir, "src/main/resources/rest-api-spec/api"))
  restTests(new File(projectDir, "src/yamlRestTest/resources/rest-api-spec/test"))
}

dependencies {
  clusterModules project(":modules:mapper-extras")
  clusterModules project(":modules:rest-root")
  clusterModules project(":modules:reindex")
  clusterModules project(':modules:analysis-common')
  clusterModules project(':modules:health-shards-availability')
  clusterModules project(':modules:data-streams')
}

tasks.register('enforceYamlTestConvention').configure {
  def tree = fileTree('src/main/resources/rest-api-spec/test')
  doLast {
    if (tree.files) {
      throw new GradleException("There are YAML tests in src/main source set. These should be moved to src/yamlRestTest.")
    }
  }
}

tasks.named("precommit").configure {
  dependsOn 'enforceYamlTestConvention'
}

tasks.named("yamlRestCompatTestTransform").configure({task ->
    task.skipTest("indices.sort/10_basic/Index Sort", "warning does not exist for compatibility")
    task.skipTest("search/330_fetch_fields/Test search rewrite", "warning does not exist for compatibility")
    task.skipTest("tsdb/20_mapping/disabled source", "temporary until backported")
    task.skipTest("logsdb/20_source_mapping/disabled _source is not supported", "temporary until backported")
    task.skipTest("tsdb/20_mapping/regular source", "temporary until backported")
    task.skipTest("logsdb/20_source_mapping/stored _source mode is not supported", "temporary until backported")
})

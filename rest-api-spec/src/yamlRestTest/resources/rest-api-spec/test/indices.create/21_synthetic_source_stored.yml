---
object param - object array:
  - requires:
      cluster_features: ["mapper.track_ignored_source"]
      reason: requires tracking ignored source

  - do:
      indices.create:
        index: test
        body:
          mappings:
            _source:
              mode: synthetic
            properties:
              id:
                type: integer
              regular:
                properties:
                  span:
                    properties:
                      id:
                        type: keyword
                  trace:
                    properties:
                      id:
                        type: keyword
              stored:
                store_array_source: true
                properties:
                  span:
                    properties:
                      id:
                        type: keyword
                  trace:
                    properties:
                      id:
                        type: keyword

  - do:
      bulk:
        index: test
        refresh: true
        body:
          - '{ "create": { } }'
          - '{  "id": 1, "regular": [ { "trace": { "id": "a" }, "span": { "id": "1" } }, { "trace": { "id": "b" }, "span": { "id": "1" } } ] }'
          - '{ "create": { } }'
          - '{  "id": 2, "stored": [ { "trace": { "id": "a" }, "span": { "id": "1" } }, { "trace": { "id": "b" }, "span": { "id": "1" } } ] }'

  - do:
      search:
        index: test
        sort: id

  - length: { hits.hits.0._source.regular: 2 }
  - match: { hits.hits.0._source.regular.span.id: "1" }
  - match: { hits.hits.0._source.regular.trace.id: [ "a", "b" ] }

  - length: { hits.hits.1._source.stored: 2 }
  - match: { hits.hits.1._source.stored.0.trace.id: a  }
  - match: { hits.hits.1._source.stored.0.span.id: "1"  }
  - match: { hits.hits.1._source.stored.1.trace.id: b }
  - match: { hits.hits.1._source.stored.1.span.id: "1" }


---
object param - object array within array:
  - requires:
      cluster_features: ["mapper.track_ignored_source"]
      reason: requires tracking ignored source

  - do:
      indices.create:
        index: test
        body:
          mappings:
            _source:
              mode: synthetic
            properties:
              stored:
                store_array_source: true
                properties:
                  path:
                    store_array_source: true
                    properties:
                      to:
                        properties:
                          trace:
                            type: keyword

  - do:
      bulk:
        index: test
        refresh: true
        body:
          - '{ "create": { } }'
          - '{ "stored": [ { "path": [{ "to": { "trace": "A" } }, { "to": { "trace": "B" } } ] }, { "path": { "to": { "trace": "C" } } } ] }'

  - do:
      search:
        index: test

  - length: { hits.hits.0._source.stored: 2 }
  - match: { hits.hits.0._source.stored.0.path.0.to.trace: A }
  - match: { hits.hits.0._source.stored.0.path.1.to.trace: B }
  - match: { hits.hits.0._source.stored.1.path.to.trace: C }


---
object param - no object array:
  - requires:
      cluster_features: ["mapper.track_ignored_source"]
      reason: requires tracking ignored source

  - do:
      indices.create:
        index: test
        body:
          mappings:
            _source:
              mode: synthetic
            properties:
              stored:
                store_array_source: true
                properties:
                  span:
                    properties:
                      id:
                        type: keyword
                  trace:
                    properties:
                      id:
                        type: keyword

  - do:
      bulk:
        index: test
        refresh: true
        body:
          - '{ "create": { } }'
          - '{ "stored": { "trace": { "id": "a" }, "span": { "id": "b" } } }'

  - do:
      search:
        index: test

  - match: { hits.hits.0._source.stored.trace.id: a  }
  - match: { hits.hits.0._source.stored.span.id: b  }


---
object param - field ordering in object array:
  - requires:
      cluster_features: ["mapper.track_ignored_source"]
      reason: requires tracking ignored source

  - do:
      indices.create:
        index: test
        body:
          mappings:
            _source:
              mode: synthetic
            properties:
              a:
                type: keyword
              b:
                store_array_source: true
                properties:
                  aa:
                    type: keyword
                  bb:
                    type: keyword
              c:
                type: keyword
              d:
                store_array_source: true
                properties:
                  aa:
                    type: keyword
                  bb:
                    type: keyword

  - do:
      bulk:
        index: test
        refresh: true
        body:
          - '{ "create": { } }'
          - '{ "c": 1, "d": [ { "bb": 10, "aa": 20 }, { "aa": 30, "bb": 40 } ], "a": 2, "b": [ { "bb": 100, "aa": 200 }, { "aa": 300, "bb": 400 } ] }'

  - do:
      search:
        index: test

  - length: { hits.hits.0._source: 4 }
  - match: { hits.hits.0._source: { "a": "2", "b": [ { "bb": 100, "aa": 200 }, { "aa": 300, "bb": 400 } ], "c": "1", "d": [ { "bb": 10, "aa": 20 }, { "aa": 30, "bb": 40 } ] } }


---
object param - nested object array next to other fields:
  - requires:
      cluster_features: ["mapper.track_ignored_source"]
      reason: requires tracking ignored source

  - do:
      indices.create:
        index: test
        body:
          mappings:
            _source:
              mode: synthetic
            properties:
              a:
                type: keyword
              b:
                properties:
                  c:
                    store_array_source: true
                    properties:
                      aa:
                        type: keyword
                      bb:
                        type: keyword
                  d:
                    properties:
                      aa:
                        type: keyword
                      bb:
                        type: keyword
                  e:
                    type: keyword
              f:
                type: keyword

  - do:
      bulk:
        index: test
        refresh: true
        body:
          - '{ "create": { } }'
          - '{ "a": 1, "b": { "c": [ { "bb": 10, "aa": 20 }, { "aa": 30, "bb": 40 } ], "d": [ { "bb": 100, "aa": 200 }, { "aa": 300, "bb": 400 } ], "e": 1000 }, "f": 2000 }'

  - do:
      search:
        index: test

  - match: { hits.hits.0._source.a: "1" }
  - match: { hits.hits.0._source.b.c:  [{ "bb": 10, "aa": 20 }, { "aa": 30, "bb": 40 }] }
  - match: { hits.hits.0._source.b.d.aa: [ "200", "300" ] }
  - match: { hits.hits.0._source.b.d.bb: [ "100", "400" ] }
  - match: { hits.hits.0._source.b.e: "1000" }
  - match: { hits.hits.0._source.f: "2000" }


---
object param - nested object with stored array:
  - requires:
      cluster_features: ["mapper.track_ignored_source"]
      reason: requires tracking ignored source

  - do:
      indices.create:
        index: test
        body:
          mappings:
            _source:
              mode: synthetic
            properties:
              name:
                type: keyword
              nested_array_regular:
                type: nested
              nested_array_stored:
                type: nested
                store_array_source: true

  - do:
      bulk:
        index: test
        refresh: true
        body:
          - '{ "create": { } }'
          - '{ "name": "A", "nested_array_regular": [ { "b": [ { "c": 10 }, { "c": 100 } ] }, { "b": [ { "c": 20 }, { "c": 200 } ] } ] }'
          - '{ "create": { } }'
          - '{ "name": "B", "nested_array_stored": [ { "b": [ { "c": 10 }, { "c": 100 } ] }, { "b": [ { "c": 20 }, { "c": 200 } ] } ] }'

  - match: { errors: false }

  - do:
      search:
        index: test
        sort: name
  - match:  { hits.total.value: 2 }
  - match:  { hits.hits.0._source.name: A }
  - match: { hits.hits.0._source.nested_array_regular.0.b.c: [ 10, 100] }
  - match: { hits.hits.0._source.nested_array_regular.1.b.c: [ 20, 200] }
  - match: { hits.hits.1._source.name: B }
  - match: { hits.hits.1._source.nested_array_stored.0.b.0.c: 10 }
  - match: { hits.hits.1._source.nested_array_stored.0.b.1.c: 100 }
  - match: { hits.hits.1._source.nested_array_stored.1.b.0.c: 20 }
  - match: { hits.hits.1._source.nested_array_stored.1.b.1.c: 200 }


---
# 112156
stored field under object with store_array_source:
  - requires:
      cluster_features: ["mapper.source.synthetic_source_stored_fields_advance_fix"]
      reason: requires bug fix to be implemented

  - do:
      indices.create:
        index: test
        body:
          settings:
            index:
              sort.field: "name"
              sort.order: "asc"
          mappings:
            _source:
              mode: synthetic
            properties:
              name:
                type: keyword
              obj:
                store_array_source: true
                properties:
                  foo:
                    type: keyword
                    store: true

  - do:
      bulk:
        index: test
        refresh: true
        body:
          - '{ "create": { } }'
          - '{ "name": "B", "obj": null }'
          - '{ "create": { } }'
          - '{ "name": "A", "obj": [ { "foo": "hello_from_the_other_side" } ] }'

  - match: { errors: false }

  - do:
      search:
        index: test
        sort: name

  - match:  { hits.total.value: 2 }
  - match: { hits.hits.0._source.name: A }
  - match: { hits.hits.0._source.obj: [ { "foo": "hello_from_the_other_side" } ] }
  - match: { hits.hits.1._source.name: B }
  - match: { hits.hits.1._source.obj: null }


---
index param - root arrays:
  - requires:
      cluster_features: ["mapper.synthetic_source_keep"]
      reason: requires tracking ignored source

  - do:
      indices.create:
        index: test
        body:
          settings:
            index:
              mapping:
                synthetic_source_keep: arrays
          mappings:
            _source:
              mode: synthetic
            properties:
              id:
                type: integer
              leaf:
                type: integer
              obj:
                properties:
                  span:
                    properties:
                      id:
                        type: keyword
                  trace:
                    properties:
                      id:
                        type: keyword

  - do:
      bulk:
        index: test
        refresh: true
        body:
          - '{ "create": { } }'
          - '{  "id": 1, "leaf": [30, 20, 10], "obj": [ { "trace": { "id": "a" }, "span": { "id": "1" } }, { "trace": { "id": "b" }, "span": { "id": "1" } } ] }'
          - '{ "create": { } }'
          - '{  "id": 2, "leaf": [130, 120, 110], "obj": [ { "trace": { "id": "aa" }, "span": { "id": "2" } }, { "trace": { "id": "bb" }, "span": { "id": "2" } } ] }'

  - do:
      search:
        index: test
        sort: id

  - match: { hits.hits.0._source.id: 1  }
  - match: { hits.hits.0._source.leaf: [30, 20, 10]  }
  - length: { hits.hits.0._source.obj: 2 }
  - match: { hits.hits.0._source.obj.0.trace.id: a  }
  - match: { hits.hits.0._source.obj.0.span.id: "1"  }
  - match: { hits.hits.0._source.obj.1.trace.id: b }
  - match: { hits.hits.0._source.obj.1.span.id: "1" }

  - match: { hits.hits.1._source.id: 2 }
  - match: { hits.hits.1._source.leaf: [ 130, 120, 110 ] }
  - length: { hits.hits.1._source.obj: 2 }
  - match: { hits.hits.1._source.obj.0.trace.id: aa }
  - match: { hits.hits.1._source.obj.0.span.id: "2" }
  - match: { hits.hits.1._source.obj.1.trace.id: bb }
  - match: { hits.hits.1._source.obj.1.span.id: "2" }


---
index param - dynamic root arrays:
  - requires:
      cluster_features: ["mapper.synthetic_source_keep"]
      reason: requires tracking ignored source

  - do:
      indices.create:
        index: test
        body:
          settings:
            index:
              mapping:
                synthetic_source_keep: arrays
          mappings:
            _source:
              mode: synthetic
            properties:
              id:
                type: integer

  - do:
      bulk:
        index: test
        refresh: true
        body:
          - '{ "create": { } }'
          - '{  "id": 1, "leaf": [30, 20, 10], "obj": [ { "trace": { "id": "a" }, "span": { "id": "1" } }, { "trace": { "id": "b" }, "span": { "id": "1" } } ] }'
          - '{ "create": { } }'
          - '{  "id": 2, "leaf": [130, 120, 110], "obj": [ { "trace": { "id": "aa" }, "span": { "id": "2" } }, { "trace": { "id": "bb" }, "span": { "id": "2" } } ] }'

  - do:
      search:
        index: test
        sort: id

  - match: { hits.hits.0._source.id: 1  }
  - match: { hits.hits.0._source.leaf: [30, 20, 10]  }
  - length: { hits.hits.0._source.obj: 2 }
  - match: { hits.hits.0._source.obj.0.trace.id: a  }
  - match: { hits.hits.0._source.obj.0.span.id: "1"  }
  - match: { hits.hits.0._source.obj.1.trace.id: b }
  - match: { hits.hits.0._source.obj.1.span.id: "1" }

  - match: { hits.hits.1._source.id: 2 }
  - match: { hits.hits.1._source.leaf: [ 130, 120, 110 ] }
  - length: { hits.hits.1._source.obj: 2 }
  - match: { hits.hits.1._source.obj.0.trace.id: aa }
  - match: { hits.hits.1._source.obj.0.span.id: "2" }
  - match: { hits.hits.1._source.obj.1.trace.id: bb }
  - match: { hits.hits.1._source.obj.1.span.id: "2" }


---
index param - object array within array:
  - requires:
      cluster_features: ["mapper.synthetic_source_keep"]
      reason: requires tracking ignored source

  - do:
      indices.create:
        index: test
        body:
          settings:
            index:
              mapping:
                synthetic_source_keep: arrays
          mappings:
            _source:
              mode: synthetic
            properties:
              stored:
                properties:
                  path:
                    properties:
                      to:
                        properties:
                          trace:
                            type: keyword
                          values:
                            type: integer

  - do:
      bulk:
        index: test
        refresh: true
        body:
          - '{ "create": { } }'
          - '{ "stored": [ { "path": [{ "to": { "trace": "A", "values": [2, 1] } }, { "to": { "trace": "B", "values": [2, 1] } } ] }, { "path": { "to": { "trace": "C", "values": 3 } } } ] }'

  - do:
      search:
        index: test

  - length: { hits.hits.0._source.stored: 2 }
  - match: { hits.hits.0._source.stored.0.path.0.to.trace: A }
  - match: { hits.hits.0._source.stored.0.path.0.to.values: [2, 1] }
  - match: { hits.hits.0._source.stored.0.path.1.to.trace: B }
  - match: { hits.hits.0._source.stored.0.path.1.to.values: [2, 1] }
  - match: { hits.hits.0._source.stored.1.path.to.trace: C }
  - match: { hits.hits.0._source.stored.1.path.to.values: 3 }


---
index param - no object array:
  - requires:
      cluster_features: ["mapper.synthetic_source_keep"]
      reason: requires tracking ignored source

  - do:
      indices.create:
        index: test
        body:
          settings:
            index:
              mapping:
                synthetic_source_keep: arrays
          mappings:
            _source:
              mode: synthetic
            properties:
              stored:
                properties:
                  span:
                    properties:
                      id:
                        type: keyword
                  trace:
                    properties:
                      id:
                        type: keyword

  - do:
      bulk:
        index: test
        refresh: true
        body:
          - '{ "create": { } }'
          - '{ "stored": { "trace": { "id": "a" }, "span": { "id": "b" } } }'

  - do:
      search:
        index: test

  - match: { hits.hits.0._source.stored.trace.id: a  }
  - match: { hits.hits.0._source.stored.span.id: b  }


---
index param - field ordering:
  - requires:
      cluster_features: ["mapper.synthetic_source_keep"]
      reason: requires tracking ignored source

  - do:
      indices.create:
        index: test
        body:
          settings:
            index:
              mapping:
                synthetic_source_keep: arrays
          mappings:
            _source:
              mode: synthetic
            properties:
              a:
                type: keyword
              b:
                properties:
                  aa:
                    type: keyword
                  bb:
                    type: keyword
              c:
                type: keyword
              d:
                properties:
                  aa:
                    type: keyword
                  bb:
                    type: keyword

  - do:
      bulk:
        index: test
        refresh: true
        body:
          - '{ "create": { } }'
          - '{ "c": [30, 20, 10], "d": [ { "bb": 10, "aa": 20 }, { "aa": 30, "bb": 40 } ], "a": 2, "b": [ { "bb": 100, "aa": 200 }, { "aa": 300, "bb": 400 } ] }'

  - do:
      search:
        index: test

  - length: { hits.hits.0._source: 4 }
  - match: { hits.hits.0._source: { "a": "2", "b": [ { "bb": 100, "aa": 200 }, { "aa": 300, "bb": 400 } ], "c": [30, 20, 10], "d": [ { "bb": 10, "aa": 20 }, { "aa": 30, "bb": 40 } ] } }


---
index param - nested arrays:
  - requires:
      cluster_features: ["mapper.synthetic_source_keep"]
      reason: requires tracking ignored source

  - do:
      indices.create:
        index: test
        body:
          settings:
            index:
              mapping:
                synthetic_source_keep: arrays
          mappings:
            _source:
              mode: synthetic
            properties:
              a:
                type: keyword
              b:
                properties:
                  c:
                    properties:
                      aa:
                        type: keyword
                      bb:
                        type: keyword
                  d:
                    type: integer
                  e:
                    type: keyword
              f:
                type: keyword

  - do:
      bulk:
        index: test
        refresh: true
        body:
          - '{ "create": { } }'
          - '{ "a": 1, "b": { "c": [ { "bb": 10, "aa": 20 }, { "aa": 30, "bb": 40 } ], "d": [ 300, 200, 100 ], "e": 1000 }, "f": 2000 }'
          - '{ "create": { } }'
          - '{ "a": 11, "b": { "c": [ { "bb": 110, "aa": 120 }, { "aa": 130, "bb": 140 } ], "d": [ 1300, 1200, 1100 ], "e": 11000 }, "f": 12000 }'


  - do:
      search:
        index: test
        sort: a

  - match: { hits.hits.0._source.a: "1" }
  - match: { hits.hits.0._source.b.c:  [{ "bb": 10, "aa": 20 }, { "aa": 30, "bb": 40 }] }
  - match: { hits.hits.0._source.b.d:  [ 300, 200, 100 ] }
  - match: { hits.hits.0._source.b.e: "1000" }
  - match: { hits.hits.0._source.f: "2000" }

  - match: { hits.hits.1._source.a: "11" }
  - match: { hits.hits.1._source.b.c: [ { "bb": 110, "aa": 120 }, { "aa": 130, "bb": 140 } ] }
  - match: { hits.hits.1._source.b.d: [ 1300, 1200, 1100 ] }
  - match: { hits.hits.1._source.b.e: "11000" }
  - match: { hits.hits.1._source.f: "12000" }

---
index param - nested object with stored array:
  - requires:
      cluster_features: ["mapper.synthetic_source_keep"]
      reason: requires tracking ignored source

  - do:
      indices.create:
        index: test
        body:
          settings:
            index:
              mapping:
                synthetic_source_keep: arrays
          mappings:
            _source:
              mode: synthetic
            properties:
              name:
                type: keyword
              nested:
                type: nested

  - do:
      bulk:
        index: test
        refresh: true
        body:
          - '{ "create": { } }'
          - '{ "name": "A", "nested": [ { "b": [ { "c": 10 }, { "c": 100 } ] }, { "b": [ { "c": 20 }, { "c": 200 } ] } ] }'
          - '{ "create": { } }'
          - '{ "name": "B", "nested": [ { "b": [ { "c": 30 }, { "c": 300 } ] }, { "b": [ { "c": 40 }, { "c": 400 } ] } ] }'

  - match: { errors: false }

  - do:
      search:
        index: test
        sort: name
  - match:  { hits.total.value: 2 }
  - match:  { hits.hits.0._source.name: A }
  - match: { hits.hits.0._source.nested.0.b.0.c: 10 }
  - match: { hits.hits.0._source.nested.0.b.1.c: 100 }
  - match: { hits.hits.0._source.nested.1.b.0.c: 20 }
  - match: { hits.hits.0._source.nested.1.b.1.c: 200 }
  - match: { hits.hits.1._source.name: B }
  - match: { hits.hits.1._source.nested.0.b.0.c: 30 }
  - match: { hits.hits.1._source.nested.0.b.1.c: 300 }
  - match: { hits.hits.1._source.nested.1.b.0.c: 40 }
  - match: { hits.hits.1._source.nested.1.b.1.c: 400 }

---
"Metric - blank":
  - skip:
      features: [arbitrary_key]
  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: {}

  - is_true:  nodes.$node_id.indices.docs
  - is_true:  nodes.$node_id.indices.store
  - is_true:  nodes.$node_id.indices.indexing
  - is_true:  nodes.$node_id.indices.get
  - is_true:  nodes.$node_id.indices.search
  - is_true:  nodes.$node_id.indices.merges
  - is_true:  nodes.$node_id.indices.refresh
  - is_true:  nodes.$node_id.indices.flush
  - is_true:  nodes.$node_id.indices.warmer
  - is_true:  nodes.$node_id.indices.query_cache
  - is_true:  nodes.$node_id.indices.fielddata
  - is_true:  nodes.$node_id.indices.completion
  - is_true:  nodes.$node_id.indices.segments
  - is_true:  nodes.$node_id.indices.translog
  - is_true:  nodes.$node_id.indices.recovery

---
"Metric - _all":
  - skip:
      features: [arbitrary_key]
  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: { metric: _all }

  - is_true:  nodes.$node_id.indices.docs
  - is_true:  nodes.$node_id.indices.store
  - is_true:  nodes.$node_id.indices.indexing
  - is_true:  nodes.$node_id.indices.get
  - is_true:  nodes.$node_id.indices.search
  - is_true:  nodes.$node_id.indices.merges
  - is_true:  nodes.$node_id.indices.refresh
  - is_true:  nodes.$node_id.indices.flush
  - is_true:  nodes.$node_id.indices.warmer
  - is_true:  nodes.$node_id.indices.query_cache
  - is_true:  nodes.$node_id.indices.fielddata
  - is_true:  nodes.$node_id.indices.completion
  - is_true:  nodes.$node_id.indices.segments
  - is_true:  nodes.$node_id.indices.translog
  - is_true:  nodes.$node_id.indices.recovery

---
"Metric - indices _all":
  - skip:
      features: [arbitrary_key]
  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: { metric: indices, index_metric: _all }

  - is_true:  nodes.$node_id.indices.docs
  - is_true:  nodes.$node_id.indices.store
  - is_true:  nodes.$node_id.indices.indexing
  - is_true:  nodes.$node_id.indices.get
  - is_true:  nodes.$node_id.indices.search
  - is_true:  nodes.$node_id.indices.merges
  - is_true:  nodes.$node_id.indices.refresh
  - is_true:  nodes.$node_id.indices.flush
  - is_true:  nodes.$node_id.indices.warmer
  - is_true:  nodes.$node_id.indices.query_cache
  - is_true:  nodes.$node_id.indices.fielddata
  - is_true:  nodes.$node_id.indices.completion
  - is_true:  nodes.$node_id.indices.segments
  - is_true:  nodes.$node_id.indices.translog
  - is_true:  nodes.$node_id.indices.recovery

---
"Metric - one":
  - skip:
      features: [arbitrary_key]
  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: { metric: indices, index_metric: docs }

  - is_true:   nodes.$node_id.indices.docs
  - is_false:  nodes.$node_id.indices.store
  - is_false:  nodes.$node_id.indices.indexing
  - is_false:  nodes.$node_id.indices.get
  - is_false:  nodes.$node_id.indices.search
  - is_false:  nodes.$node_id.indices.merges
  - is_false:  nodes.$node_id.indices.refresh
  - is_false:  nodes.$node_id.indices.flush
  - is_false:  nodes.$node_id.indices.warmer
  - is_false:  nodes.$node_id.indices.query_cache
  - is_false:  nodes.$node_id.indices.fielddata
  - is_false:  nodes.$node_id.indices.completion
  - is_false:  nodes.$node_id.indices.segments
  - is_false:  nodes.$node_id.indices.translog
  - is_false:  nodes.$node_id.indices.recovery
  - is_false:  nodes.$node_id.indices.shard_stats
  - is_false:  nodes.$node_id.indices.mappings

---
"Metric - multi":
  - skip:
      features: [arbitrary_key]
  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: { metric: indices, index_metric: [ store, get, merge ] }

  - is_false:  nodes.$node_id.indices.docs
  - is_true:   nodes.$node_id.indices.store
  - is_false:  nodes.$node_id.indices.indexing
  - is_true:   nodes.$node_id.indices.get
  - is_false:  nodes.$node_id.indices.search
  - is_true:   nodes.$node_id.indices.merges
  - is_false:  nodes.$node_id.indices.refresh
  - is_false:  nodes.$node_id.indices.flush
  - is_false:  nodes.$node_id.indices.warmer
  - is_false:  nodes.$node_id.indices.query_cache
  - is_false:  nodes.$node_id.indices.fielddata
  - is_false:  nodes.$node_id.indices.completion
  - is_false:  nodes.$node_id.indices.segments
  - is_false:  nodes.$node_id.indices.translog
  - is_false:  nodes.$node_id.indices.recovery
  - is_false:  nodes.$node_id.indices.shard_stats
  - is_false:  nodes.$node_id.indices.mappings

---
"Metric - recovery":
  - skip:
      features: [arbitrary_key]
  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: { metric: indices, index_metric: [ recovery ] }

  - is_false:  nodes.$node_id.indices.docs
  - is_false:  nodes.$node_id.indices.store
  - is_false:  nodes.$node_id.indices.indexing
  - is_false:  nodes.$node_id.indices.get
  - is_false:  nodes.$node_id.indices.search
  - is_false:  nodes.$node_id.indices.merges
  - is_false:  nodes.$node_id.indices.refresh
  - is_false:  nodes.$node_id.indices.flush
  - is_false:  nodes.$node_id.indices.warmer
  - is_false:  nodes.$node_id.indices.query_cache
  - is_false:  nodes.$node_id.indices.fielddata
  - is_false:  nodes.$node_id.indices.completion
  - is_false:  nodes.$node_id.indices.segments
  - is_false:  nodes.$node_id.indices.translog
  - is_true:   nodes.$node_id.indices.recovery
  - is_false:  nodes.$node_id.indices.shard_stats
  - is_false:  nodes.$node_id.indices.mappings

---
"Metric - _all include_segment_file_sizes":
  - skip:
      features: [arbitrary_key]
  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: { metric: indices, index_metric: _all, include_segment_file_sizes: true }

  - is_true:   nodes.$node_id.indices.docs
  - is_true:   nodes.$node_id.indices.store
  - is_true:   nodes.$node_id.indices.indexing
  - is_true:   nodes.$node_id.indices.get
  - is_true:   nodes.$node_id.indices.search
  - is_true:   nodes.$node_id.indices.merges
  - is_true:   nodes.$node_id.indices.refresh
  - is_true:   nodes.$node_id.indices.flush
  - is_true:   nodes.$node_id.indices.warmer
  - is_true:   nodes.$node_id.indices.query_cache
  - is_true:   nodes.$node_id.indices.fielddata
  - is_true:   nodes.$node_id.indices.completion
  - is_true:   nodes.$node_id.indices.segments
  - is_true:   nodes.$node_id.indices.translog
  - is_true:   nodes.$node_id.indices.recovery
  - is_true:   nodes.$node_id.indices.segments.file_sizes

---
"Metric - segments include_segment_file_sizes":
  - skip:
      features: [arbitrary_key]
  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: { metric: indices, index_metric: segments, include_segment_file_sizes: true }

  - is_false:  nodes.$node_id.indices.docs
  - is_false:  nodes.$node_id.indices.store
  - is_false:  nodes.$node_id.indices.indexing
  - is_false:  nodes.$node_id.indices.get
  - is_false:  nodes.$node_id.indices.search
  - is_false:  nodes.$node_id.indices.merges
  - is_false:  nodes.$node_id.indices.refresh
  - is_false:  nodes.$node_id.indices.flush
  - is_false:  nodes.$node_id.indices.warmer
  - is_false:  nodes.$node_id.indices.query_cache
  - is_false:  nodes.$node_id.indices.fielddata
  - is_false:  nodes.$node_id.indices.completion
  - is_true:   nodes.$node_id.indices.segments
  - is_false:  nodes.$node_id.indices.translog
  - is_false:  nodes.$node_id.indices.recovery
  - is_false:  nodes.$node_id.indices.shard_stats
  - is_false:  nodes.$node_id.indices.mappings
  - is_true:   nodes.$node_id.indices.segments.file_sizes

---
"Metric - segments include_unloaded_segments":
  - skip:
      features: [arbitrary_key]
      version: " - 7.12.99"
      reason: "support for include_unloaded_segments only added in 7.13"
  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: { metric: indices, index_metric: segments, include_unloaded_segments: true }

  - is_false:  nodes.$node_id.indices.docs
  - is_false:  nodes.$node_id.indices.store
  - is_false:  nodes.$node_id.indices.indexing
  - is_false:  nodes.$node_id.indices.get
  - is_false:  nodes.$node_id.indices.search
  - is_false:  nodes.$node_id.indices.merges
  - is_false:  nodes.$node_id.indices.refresh
  - is_false:  nodes.$node_id.indices.flush
  - is_false:  nodes.$node_id.indices.warmer
  - is_false:  nodes.$node_id.indices.query_cache
  - is_false:  nodes.$node_id.indices.fielddata
  - is_false:  nodes.$node_id.indices.completion
  - is_true:   nodes.$node_id.indices.segments
  - is_false:  nodes.$node_id.indices.translog
  - is_false:  nodes.$node_id.indices.recovery
  - is_false:  nodes.$node_id.indices.shard_stats
  - is_false:  nodes.$node_id.indices.mappings

---
"Metric - _all include_unloaded_segments":
  - skip:
      features: [arbitrary_key]
      version: " - 7.12.99"
      reason: "support for include_unloaded_segments only added in 7.13"
  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: { metric: indices, index_metric: _all, include_unloaded_segments: true }

  - is_true:   nodes.$node_id.indices.docs
  - is_true:   nodes.$node_id.indices.store
  - is_true:   nodes.$node_id.indices.indexing
  - is_true:   nodes.$node_id.indices.get
  - is_true:   nodes.$node_id.indices.search
  - is_true:   nodes.$node_id.indices.merges
  - is_true:   nodes.$node_id.indices.refresh
  - is_true:   nodes.$node_id.indices.flush
  - is_true:   nodes.$node_id.indices.warmer
  - is_true:   nodes.$node_id.indices.query_cache
  - is_true:   nodes.$node_id.indices.fielddata
  - is_true:   nodes.$node_id.indices.completion
  - is_true:   nodes.$node_id.indices.segments
  - is_true:   nodes.$node_id.indices.translog
  - is_true:   nodes.$node_id.indices.recovery

---
"Metric - http":
  - skip:
      features: [arbitrary_key]
      version: " - 7.12.99"
      reason: "HTTP client stats added in 7.13.0"
  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: { metric: http }

  - is_true:  nodes.$node_id
  # in rare test scenarios, the value of current_open can be zero
  - gte: { nodes.$node_id.http.current_open: 0 }
  - gte: { nodes.$node_id.http.total_opened: 1 }
  - is_true:  nodes.$node_id.http.clients
  - gte: { nodes.$node_id.http.clients.0.id: 1 }
  - match: { nodes.$node_id.http.clients.0.agent: "/.*/" }
  - match: { nodes.$node_id.http.clients.0.local_address: "/.*/" }
  - match: { nodes.$node_id.http.clients.0.remote_address: "/.*/" }
  - is_true:  nodes.$node_id.http.clients.0.last_uri
  - gte: { nodes.$node_id.http.clients.0.opened_time_millis: 1614028911317 }
  - gte: { nodes.$node_id.http.clients.0.last_request_time_millis: 1614028911317 }
  - gte: { nodes.$node_id.http.clients.0.request_count: 1 }
  - gte: { nodes.$node_id.http.clients.0.request_size_bytes: 0 }
  # values for clients.0.closed_time_millis, clients.0.x_forwarded_for, and clients.0.x_opaque_id are often
  # null and cannot be tested here

---
"Metric - blank for indices shard_stats":
  - skip:
      features: [arbitrary_key]
      version: " - 7.15.0"
      reason:  "total shard count added in version 7.15.0, and fixed in 7.15.1"
  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: {}

  - is_true:  nodes.$node_id.indices.shard_stats
  - match: { nodes.$node_id.indices.shard_stats.total_count: 0 }

---
"Metric - _all for indices shard_stats":
  - skip:
      features: [arbitrary_key]
      version: " - 7.15.0"
      reason:  "total shard count added in version 7.15.0, and fixed in 7.15.1"
  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: { metric: _all }

  - is_true:  nodes.$node_id.indices.shard_stats
  - match: { nodes.$node_id.indices.shard_stats.total_count: 0 }


---
"indices shard_stats total count test":

  - skip:
      features: ["allowed_warnings", arbitrary_key]
      version: " - 7.15.0"
      reason:  "total shard count added in version 7.15.0, and fixed in 7.15.1"

  - do:
      indices.create:
        index: index1
        body:
          settings:
            number_of_shards: "5"
            number_of_replicas: "0"

  - do:
      indices.create:
        index: index2
        body:
          settings:
            number_of_shards: "3"
            number_of_replicas: "1"

  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: { metric: _all }

  - gte: { nodes.$node_id.indices.shard_stats.total_count: 1 }

---
"Metric - blank for indices mappings":
  - skip:
      features: [arbitrary_key]
      version: " - 8.4.99"
      reason:  "mappings added in version 8.5.0"
  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: {}

  - is_true:  nodes.$node_id.indices.mappings
  - match: { nodes.$node_id.indices.mappings.total_count: 0 }
  - match: { nodes.$node_id.indices.mappings.total_estimated_overhead_in_bytes: 0 }

---
"indices mappings exact count test for indices level":

  - skip:
      features: [arbitrary_key]
      version: " - 8.4.99"
      reason:  "mappings added in version 8.5.0"

  - do:
      indices.create:
        index: index1
        body:
          settings:
            number_of_shards: 4
            number_of_replicas: 0
          mappings:
            runtime:
              a_source_field:
                type: keyword
            properties:
              "@timestamp":
                type: date
              authors:
                properties:
                  age:
                    type: long
                  company:
                    type: text
                    fields:
                      keyword:
                        type: keyword
                        ignore_above: 256
                  name:
                    properties:
                      first_name:
                        type: keyword
                      full_name:
                        type: text
                      last_name:
                        type: keyword
              link:
                type: alias
                path: url
              title:
                type: text
              url:
                type: keyword

  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: { metric: _all, level: "indices", human: true }

  # In the below assertions, we expect a field count of 26 because the above mapping expects the following:
  # Field mappers (incl. alias fields and object mappers' flattened leaves):
  # 1.  _data_stream_timestamp
  # 2.  _doc_count
  # 3.  _feature
  # 4. _field_names
  # 5. _id
  # 6. _ignored
  # 7. _index
  # 8. _nested_path
  # 9. _routing
  # 10. _seq_no
  # 11. _source
  # 12. _tier
  # 13. _version
  # 14. @timestamp
  # 15. authors.age
  # 16. authors.company
  # 17. authors.company.keyword
  # 18. authors.name.last_name
  # 19. authors.name.first_name
  # 20. authors.name.full_name
  # 21. link
  # 22. title
  # 23. url
  # Object mappers:
  # 24. authors
  # 25. authors.name
  # Runtime field mappers:
  # 26. a_source_field

  - gte: { nodes.$node_id.indices.mappings.total_count: 26 }
  - is_true: nodes.$node_id.indices.mappings.total_estimated_overhead
  - gte: { nodes.$node_id.indices.mappings.total_estimated_overhead_in_bytes: 26624 }
  - match: { nodes.$node_id.indices.indices.index1.mappings.total_count: 26 }
  - is_true: nodes.$node_id.indices.indices.index1.mappings.total_estimated_overhead
  - match: { nodes.$node_id.indices.indices.index1.mappings.total_estimated_overhead_in_bytes: 26624 }

---
"indices mappings does not exist in shards level":

  - skip:
      features: [arbitrary_key]
      version: " - 8.4.99"
      reason:  "mappings added in version 8.5.0"

  - do:
      indices.create:
        index: index1
        body:
          settings:
            number_of_shards: 4
            number_of_replicas: 0
          mappings:
            properties:
              prop1:
                type: "keyword"
              prop2:
                type: "keyword"

  - do:
      nodes.info: {}
  - set:
      nodes._arbitrary_key_: node_id

  - do:
      nodes.stats: { metric: _all, level: "shards", human: true }

  # We assert that there are at least two fields (for the mapping above), and that each accounts for at least 1 byte estimated overhead
  - gte: { nodes.$node_id.indices.mappings.total_count: 2 }
  - is_true: nodes.$node_id.indices.mappings.total_estimated_overhead
  - gte: { nodes.$node_id.indices.mappings.total_estimated_overhead_in_bytes: 2 }
  - is_false: nodes.$node_id.indices.shards.index1.0.mappings

# test how knn query interacts with filters
setup:
  - skip:
      version: ' - 8.11.99'
      reason: 'knn as query added in 8.12'

  - do:
      indices.create:
        index: my_index
        body:
          settings:
            number_of_shards: 1
          mappings:
            dynamic: false
            properties:
              my_vector:
                type: dense_vector
                dims: 4
                index : true
                similarity : l2_norm
              my_name:
                type: keyword
                store: true
          aliases:
            my_alias:
              filter:
                term:
                  my_name: v2
            my_alias1:
              filter:
                term:
                  my_name: v1

  - do:
      bulk:
        refresh: true
        index: my_index
        body:
          - '{"index": {"_id": "1"}}'
          - '{"my_vector": [1, 1, 1, 1], "my_name": "v1"}'
          - '{"index": {"_id": "2"}}'
          - '{"my_vector": [1, 1, 1, 2], "my_name": "v2"}'
          - '{"index": {"_id": "3"}}'
          - '{"my_vector": [1, 1, 1, 3], "my_name": "v1"}'
          - '{"index": {"_id": "4"}}'
          - '{"my_vector": [1, 1, 1, 4], "my_name": "v2"}'
          - '{"index": {"_id": "5"}}'
          - '{"my_vector": [1, 1, 1, 5], "my_name": "v1"}'
          - '{"index": {"_id": "6"}}'
          - '{"my_vector": [1, 1, 1, 6], "my_name": "v2"}'
          - '{"index": {"_id": "7"}}'
          - '{"my_vector": [1, 1, 1, 7], "my_name": "v1"}'
          - '{"index": {"_id": "8"}}'
          - '{"my_vector": [1, 1, 1, 8], "my_name": "v2"}'
          - '{"index": {"_id": "9"}}'
          - '{"my_vector": [1, 1, 1, 9], "my_name": "v1"}'
          - '{"index": {"_id": "10"}}'
          - '{"my_vector": [1, 1, 1, 10], "my_name": "v2"}'

---
"Simple knn query":

  - do:
      search:
        index: my_index
        body:
          size: 3
          fields: [ my_name ]
          query:
            knn:
              field: my_vector
              query_vector: [1, 1, 1, 1]
              num_candidates: 5

  - match: { hits.total.value: 5 } # collector sees num_candidates docs
  - length: {hits.hits: 3}
  - match: { hits.hits.0._id: "1" }
  - match: { hits.hits.0.fields.my_name.0: v1 }
  - match: { hits.hits.1._id: "2" }
  - match: { hits.hits.1.fields.my_name.0: v2 }
  - match: { hits.hits.2._id: "3" }
  - match: { hits.hits.2.fields.my_name.0: v1 }
---
"PRE_FILTER: knn query with alias filter as pre-filter":
  - do:
      search:
        index: my_alias
        body:
          size: 3
          fields: [ my_name ]
          query:
            knn:
              field: my_vector
              query_vector: [1, 1, 1, 1]
              num_candidates: 5

  - match: { hits.total.value: 5 } # collector sees num_candidates docs
  - length: {hits.hits: 3}
  - match: { hits.hits.0._id: "2" }
  - match: { hits.hits.0.fields.my_name.0: v2 }
  - match: { hits.hits.1._id: "4" }
  - match: { hits.hits.1.fields.my_name.0: v2 }
  - match: { hits.hits.2._id: "6" }
  - match: { hits.hits.2.fields.my_name.0: v2 }

  # alias prefilter is combined with internal filter
  - do:
      search:
        index: my_alias
        body:
          size: 3
          fields: [ my_name ]
          query:
            knn:
              field: my_vector
              query_vector: [ 1, 1, 1, 1 ]
              num_candidates: 5
              filter:
                term:
                  my_name: v1

  # both alias filter and internal filter are applied as pre-filter resulting in 0 hits for knn search
  - match: { hits.total.value: 0 }
  - length: { hits.hits: 0 }

  # alias prefilter is applied when knn is a part of another query
  - do:
      search:
        index: my_alias
        body:
          size: 3
          fields: [ my_name ]
          query:
            bool:
              should:
                - wildcard:
                    my_name:
                      value: "v*"
                - knn:
                    field: my_vector
                    query_vector: [1, 1, 1, 1]
                    num_candidates: 5

  - match: { hits.total.value: 5 }
  - length: { hits.hits: 3 }
  - match: { hits.hits.0._id: "2" }
  - match: { hits.hits.0.fields.my_name.0: v2 }
  - match: { hits.hits.1._id: "4" }
  - match: { hits.hits.1.fields.my_name.0: v2 }
  - match: { hits.hits.2._id: "6" }
  - match: { hits.hits.2.fields.my_name.0: v2 }

---
"PRE_FILTER: pre-filter across multiple internal filters":
- do:
    search:
      index: my_index
      body:
        size: 3
        fields: [ my_name ]
        query:
          knn:
            field: my_vector
            query_vector: [ 1, 1, 1, 1 ]
            num_candidates: 5
            filter:
              - term:
                  my_name: v1
              - term:
                  my_name: v2
- match: { hits.total.value: 0 }
- length: { hits.hits: 0 }

---
"PRE_FILTER: pre-filter across multiple aliases":
  - do:
      search:
        index: my_alias,my_alias1
        body:
          size: 6
          fields: [ my_name ]
          query:
            knn:
              field: my_vector
              query_vector: [1, 1, 1, 1]
              num_candidates: 100

  - match: { hits.total.value: 10 } # 5 docs from each alias
  - length: {hits.hits: 6}
  - match: { hits.hits.0._id: "1" }
  - match: { hits.hits.0.fields.my_name.0: v1 }
  - match: { hits.hits.1._id: "2" }
  - match: { hits.hits.1.fields.my_name.0: v2 }
  - match: { hits.hits.2._id: "3" }
  - match: { hits.hits.2.fields.my_name.0: v1 }
  - match: { hits.hits.3._id: "4" }
  - match: { hits.hits.3.fields.my_name.0: v2 }
  - match: { hits.hits.4._id: "5" }
  - match: { hits.hits.4.fields.my_name.0: v1 }
  - match: { hits.hits.5._id: "6" }
  - match: { hits.hits.5.fields.my_name.0: v2 }

---
"PRE_FILTER: knn query with internal filter as pre-filter":
  - do:
      search:
        index: my_index
        body:
          size: 3
          fields: [ my_name ]
          query:
            knn:
              field: my_vector
              query_vector: [1, 1, 1, 1]
              num_candidates: 5
              filter:
                term:
                  my_name: v2

  - match: { hits.total.value: 5 }
  - length: {hits.hits: 3}
  - match: { hits.hits.0._id: "2" }
  - match: { hits.hits.0.fields.my_name.0: v2 }
  - match: { hits.hits.1._id: "4" }
  - match: { hits.hits.1.fields.my_name.0: v2 }
  - match: { hits.hits.2._id: "6" }
  - match: { hits.hits.2.fields.my_name.0: v2 }

---
"POST_FILTER: knn query with filter from a parent bool query as post-filter":
  - do:
      search:
        index: my_index
        body:
          size: 3
          fields: [ my_name ]
          query:
            bool:
              must:
                - term:
                    my_name: v2
                - knn:
                    field: my_vector
                    query_vector: [1, 1, 1, 1]
                    num_candidates: 5

  - match: { hits.total.value: 2 }
  - length: {hits.hits: 2} # knn query returns top 5 docs, but they are post-filtered to 2 docs
  - match: { hits.hits.0._id: "2" }
  - match: { hits.hits.0.fields.my_name.0: v2 }
  - match: { hits.hits.1._id: "4" }
  - match: { hits.hits.1.fields.my_name.0: v2 }

  - do:
      search:
        index: my_index
        body:
          size: 3
          fields: [ my_name ]
          query:
            bool:
              must:
                - term:
                    my_name: v2
                - knn:
                    field: my_vector
                    query_vector: [ 1, 1, 1, 1 ]
                    num_candidates: 5
                    filter:
                      term:
                        my_name: v1

  - match: { hits.total.value:  0}
  - length: { hits.hits: 0 } # knn query returns top 5 docs, but they are post-filtered to 0 docs

# test how knn query interacts with filters
setup:
  - requires:
      cluster_features: "gte_v8.12.0"
      reason: 'knn as query added in 8.12'
      test_runner_features: "close_to"

  - do:
      indices.create:
        index: my_index
        body:
          settings:
            number_of_shards: 2
          mappings:
            dynamic: false
            properties:
              my_vector:
                type: dense_vector
                dims: 4
                index : true
                similarity : l2_norm
                index_options:
                  type: hnsw
                  m: 16
                  ef_construction: 200
              my_name:
                type: keyword
                store: true

  - do:
      bulk:
        refresh: true
        index: my_index
        body:
          - '{"index": {"_id": "1"}}'
          - '{"my_vector": [1, 1, 1, 1], "my_name": "v1"}'
          - '{"index": {"_id": "2"}}'
          - '{"my_vector": [1, 1, 1, 2], "my_name": "v2"}'
          - '{"index": {"_id": "3"}}'
          - '{"my_vector": [1, 1, 1, 3], "my_name": "v1"}'
          - '{"index": {"_id": "4"}}'
          - '{"my_vector": [1, 1, 1, 4], "my_name": "v2"}'
          - '{"index": {"_id": "5"}}'
          - '{"my_vector": [1, 1, 1, 5], "my_name": "v1"}'
          - '{"index": {"_id": "6"}}'
          - '{"my_vector": [1, 1, 1, 6], "my_name": "v2"}'
          - '{"index": {"_id": "7"}}'
          - '{"my_vector": [1, 1, 1, 7], "my_name": "v1"}'
          - '{"index": {"_id": "8"}}'
          - '{"my_vector": [1, 1, 1, 8], "my_name": "v2"}'
          - '{"index": {"_id": "9"}}'
          - '{"my_vector": [1, 1, 1, 9], "my_name": "v1"}'
          - '{"index": {"_id": "10"}}'
          - '{"my_vector": [1, 1, 1, 10], "my_name": "v2"}'
          - '{"index": {"_id": "11"}}'
          - '{"my_vector": [1, 1, 1, 11], "my_name": "v1"}'
          - '{"index": {"_id": "12"}}'
          - '{"my_vector": [1, 1, 1, 12], "my_name": "v2"}'


---
"Search for 2 knn queries combines scores from them":
  - do:
      search:
        index: my_index
        body:
          size: 6
          query:
            bool:
              should:
                - knn:
                    field: my_vector
                    query_vector: [ 1, 1, 1, 1 ]
                    num_candidates: 100
                    boost: 1.1
                - knn:
                    field: my_vector
                    query_vector: [ 1, 1, 1, 12 ]
                    num_candidates: 100

  - length: {hits.hits: 6}
  - match: {hits.total.value: 12}
  - match: {hits.hits.0._id: '1'}
  - match: {hits.hits.1._id: '12'}
  - match: {hits.hits.2._id: '2'}
  - match: { hits.hits.3._id: '11' }
  - match: { hits.hits.4._id: '3' }
  - match: { hits.hits.5._id: '10' }


---
"Hybrid search combines scores from knn and other queries":
  - do:
      search:
        include_named_queries_score: true
        index: my_index
        body:
          size: 3
          query:
            bool:
              should:
                - wildcard:
                    my_name:
                      value: "v*" # produces scores 1.0
                      _name: "bm25_query"
                - knn:
                    field: my_vector
                    query_vector: [ 1, 1, 1, 1 ]
                    num_candidates: 3
                    _name: "knn_query"

  - length: {hits.hits: 3}
  - match: {hits.total.value: 12}
  - match: {hits.hits.0._id: '1'}
  - match: {hits.hits.1._id: '2'}
  - match: {hits.hits.2._id: '3'}

  - close_to: {hits.hits.0._score: { value: 2.0, error: 0.00001 } }
  - close_to: {hits.hits.0.matched_queries.bm25_query: { value: 1.0, error: 0.00001 } }
  - close_to: {hits.hits.0.matched_queries.knn_query: { value: 1.0, error: 0.00001 } }

  - close_to: {hits.hits.1._score: { value: 1.5, error: 0.00001 } }
  - close_to: { hits.hits.1.matched_queries.bm25_query: { value: 1.0, error: 0.00001 } }
  - close_to: { hits.hits.1.matched_queries.knn_query: { value: 0.5, error: 0.00001 } }

  - close_to: {hits.hits.2._score: { value: 1.2, error: 0.00001 } }
  - close_to: { hits.hits.2.matched_queries.bm25_query: { value: 1.0, error: 0.00001 } }
  - close_to: { hits.hits.2.matched_queries.knn_query: { value: 0.2, error: 0.00001 } }

  # the same query with boosts
  - do:
      search:
        include_named_queries_score: true
        index: my_index
        body:
          size: 3
          query:
            bool:
              should:
                - wildcard:
                    my_name:
                      value: "v*" # produces scores 1.0
                      boost: 100
                      _name: "bm25_query"
                - knn:
                    field: my_vector
                    query_vector: [ 1, 1, 1, 1 ]
                    num_candidates: 3
                    boost: 100
                    _name: "knn_query"

  - length: { hits.hits: 3 }
  - match: { hits.total.value: 12 }
  - match: { hits.hits.0._id: '1' }
  - match: { hits.hits.1._id: '2' }
  - match: { hits.hits.2._id: '3' }

  - close_to: { hits.hits.0._score: { value: 200.0, error: 0.00001 } }
  - close_to: { hits.hits.0.matched_queries.bm25_query: { value: 100.0, error: 0.00001 } }
  - close_to: { hits.hits.0.matched_queries.knn_query: { value: 100.0, error: 0.00001 } }

  - close_to: { hits.hits.1._score: { value: 150.0, error: 0.00001 } }
  - close_to: { hits.hits.1.matched_queries.bm25_query: { value: 100.0, error: 0.00001 } }
  - close_to: { hits.hits.1.matched_queries.knn_query: { value: 50.0, error: 0.00001 } }

  - close_to: { hits.hits.2._score: { value: 120, error: 0.00001 } }
  - close_to: { hits.hits.2.matched_queries.bm25_query: { value: 100.0, error: 0.00001 } }
  - close_to: { hits.hits.2.matched_queries.knn_query: { value: 20.0, error: 0.00001 } }

---
"Aggregations with collected number of docs depends on num_candidates":
  - do:
      search:
        index: my_index
        body:
          size: 2
          query:
            knn:
              field: my_vector
              query_vector: [1, 1, 1, 1]
              num_candidates: 100 # collect up to 100 candidates from each shard
          aggs:
            my_agg:
              terms:
                field: my_name
                order:
                  _key: asc

  - length: {hits.hits: 2}
  - match: {hits.total.value: 12}
  - match: {aggregations.my_agg.buckets.0.key: 'v1'}
  - match: {aggregations.my_agg.buckets.1.key: 'v2'}
  - match: {aggregations.my_agg.buckets.0.doc_count: 6}
  - match: {aggregations.my_agg.buckets.1.doc_count: 6}

  - do:
      search:
        index: my_index
        body:
          size: 2
          query:
            knn:
              field: my_vector
              query_vector: [ 1, 1, 1, 1 ]
              num_candidates: 3 # collect 3 candidates from each shard
          aggs:
            my_agg2:
              terms:
                field: my_name
                order:
                  _key: asc
            my_sum_buckets:
              sum_bucket:
                buckets_path: "my_agg2>_count"

  - length: { hits.hits: 2 }
  - match: { hits.total.value: 6 }
  - match: { aggregations.my_agg2.buckets.0.key: 'v1' }
  - match: { aggregations.my_agg2.buckets.1.key: 'v2' }
  - match: { aggregations.my_sum_buckets.value: 6.0 }

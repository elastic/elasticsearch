setup:
  - do:
      indices.create:
        index: hnsw_byte_quantized
        body:
          settings:
            index:
              number_of_shards: 1
          mappings:
            properties:
              name:
                type: keyword
              vector:
                type: dense_vector
                dims: 4
                index: true
                similarity: l2_norm
                index_options:
                  type: int4_hnsw
              another_vector:
                type: dense_vector
                dims: 4
                index: true
                similarity: l2_norm
                index_options:
                  type: int4_hnsw

  - do:
      index:
        index: hnsw_byte_quantized
        id: "1"
        body:
          name: cow.jpg
          vector: [230.0, 300.33, -34.8988, 15.555]
          another_vector: [130.0, 115.0, -1.02, 15.555]

  # Flush in order to provoke a merge later
  - do:
      indices.flush: { }

  - do:
      index:
        index: hnsw_byte_quantized
        id: "2"
        body:
          name: moose.jpg
          vector: [-0.5, 100.0, -13, 14.8]
          another_vector: [-0.5, 50.0, -1, 1]

  # Flush in order to provoke a merge later
  - do:
      indices.flush: { }

  - do:
      index:
        index: hnsw_byte_quantized
        id: "3"
        body:
          name: rabbit.jpg
          vector: [0.5, 111.3, -13.0, 14.8]
          another_vector: [-0.5, 11.0, 0, 12]

  - do:
      indices.forcemerge:
        index: hnsw_byte_quantized
        max_num_segments: 1

  - do:
      indices.refresh: {}

---
"kNN search only":
  - do:
      search:
        index: hnsw_byte_quantized
        body:
          fields: [ "name" ]
          knn:
            field: vector
            query_vector: [-0.5, 90.0, -10, 14.8]
            k: 2
            num_candidates: 3

  - match: {hits.hits.0._id: "2"}
  - match: {hits.hits.0.fields.name.0: "moose.jpg"}

  - match: {hits.hits.1._id: "3"}
  - match: {hits.hits.1.fields.name.0: "rabbit.jpg"}
---
"kNN multi-field search only":
  - do:
      search:
        index: hnsw_byte_quantized
        body:
          fields: [ "name" ]
          knn:
           - {field: vector, query_vector: [-0.5, 90.0, -10, 14.8], k: 2, num_candidates: 3}
           - {field: another_vector, query_vector: [-0.5, 11.0, 0, 12], k: 2, num_candidates: 3}

  - match: {hits.hits.0._id: "3"}
  - match: {hits.hits.0.fields.name.0: "rabbit.jpg"}

  - match: {hits.hits.1._id: "2"}
  - match: {hits.hits.1.fields.name.0: "moose.jpg"}
---
"kNN search plus query":
  - do:
      search:
        index: hnsw_byte_quantized
        body:
          fields: [ "name" ]
          knn:
            field: vector
            query_vector: [-0.5, 90.0, -10, 14.8]
            k: 2
            num_candidates: 3
          query:
            term:
              name:
                value: cow.jpg
                boost: 1.5

  - match: {hits.hits.0._id: "1"}
  - match: {hits.hits.0.fields.name.0: "cow.jpg"}

  - match: {hits.hits.1._id: "2"}
  - match: {hits.hits.1.fields.name.0: "moose.jpg"}

  - match: {hits.hits.2._id: "3"}
  - match: {hits.hits.2.fields.name.0: "rabbit.jpg"}
---
"kNN multi-field search with query":
  - do:
      search:
        index: hnsw_byte_quantized
        body:
          fields: [ "name" ]
          knn:
            - {field: vector, query_vector: [-0.5, 90.0, -10, 14.8], k: 2, num_candidates: 3}
            - {field: another_vector, query_vector: [-0.5, 11.0, 0, 12], k: 2, num_candidates: 3, boost: 2.0}
          query:
            term:
              name:
                value: cow.jpg
                boost: 2.0

  - match: {hits.hits.0._id: "3"}
  - match: {hits.hits.0.fields.name.0: "rabbit.jpg"}

  - match: {hits.hits.1._id: "1"}
  - match: {hits.hits.1.fields.name.0: "cow.jpg"}

  - match: {hits.hits.2._id: "2"}
  - match: {hits.hits.2.fields.name.0: "moose.jpg"}
---
"kNN search with filter":
  - do:
      search:
        index: hnsw_byte_quantized
        body:
          fields: [ "name" ]
          knn:
            field: vector
            query_vector: [-0.5, 90.0, -10, 14.8]
            k: 2
            num_candidates: 3
            filter:
              term:
                name: "rabbit.jpg"

  - match: {hits.total.value: 1}
  - match: {hits.hits.0._id: "3"}
  - match: {hits.hits.0.fields.name.0: "rabbit.jpg"}

  - do:
      search:
        index: hnsw_byte_quantized
        body:
          fields: [ "name" ]
          knn:
            field: vector
            query_vector: [-0.5, 90.0, -10, 14.8]
            k: 2
            num_candidates: 3
            filter:
              - term:
                  name: "rabbit.jpg"
              - term:
                  _id: 2

  - match: {hits.total.value: 0}

---
"KNN Vector similarity search only":
  - do:
      search:
        index: hnsw_byte_quantized
        body:
          fields: [ "name" ]
          knn:
            num_candidates: 3
            k: 3
            field: vector
            similarity: 17
            query_vector: [-0.5, 90.0, -10, 14.8]

  - length: {hits.hits: 1}

  - match: {hits.hits.0._id: "2"}
  - match: {hits.hits.0.fields.name.0: "moose.jpg"}
---
"Vector similarity with filter only":
  - do:
      search:
        index: hnsw_byte_quantized
        body:
          fields: [ "name" ]
          knn:
            num_candidates: 3
            k: 3
            field: vector
            similarity: 17
            query_vector: [-0.5, 90.0, -10, 14.8]
            filter: {"term": {"name": "moose.jpg"}}

  - length: {hits.hits: 1}

  - match: {hits.hits.0._id: "2"}
  - match: {hits.hits.0.fields.name.0: "moose.jpg"}

  - do:
      search:
        index: hnsw_byte_quantized
        body:
          fields: [ "name" ]
          knn:
            num_candidates: 3
            k: 3
            field: vector
            similarity: 110
            query_vector: [-0.5, 90.0, -10, 14.8]
            filter: {"term": {"name": "cow.jpg"}}

  - length: {hits.hits: 0}
---
"Knn search with mip":
  - do:
      indices.create:
        index: mip
        body:
          settings:
            index:
              number_of_shards: 1
          mappings:
            properties:
              name:
                type: keyword
              vector:
                type: dense_vector
                dims: 6
                index: true
                similarity: max_inner_product
                index_options:
                  type: int4_hnsw

  - do:
      index:
        index: mip
        id: "1"
        body:
          name: cow.jpg
          vector: [1, 2, 3, 4, 5, 0]

  # Flush in order to provoke a merge later
  - do:
      indices.flush: { }

  - do:
      index:
        index: mip
        id: "2"
        body:
          name: moose.jpg
          vector: [1, 1, 1, 1, 1, 0]

  # Flush in order to provoke a merge later
  - do:
      indices.flush: { }

  - do:
      index:
        index: mip
        id: "3"
        body:
          name: rabbit.jpg
          vector: [1, 2, 2, 2, 2, 0]

  # We force merge into a single segment to make sure scores are more uniform
  # Each segment can have a different quantization error, which can affect scores and mip is especially sensitive to this
  - do:
      indices.forcemerge:
        index: mip
        max_num_segments: 1

  - do:
      indices.refresh: {}

  - do:
      search:
        index: mip
        body:
          fields: [ "name" ]
          knn:
            num_candidates: 3
            k: 3
            field: vector
            query_vector: [1, 2, 3, 4, 5, 0]


  - length: {hits.hits: 3}
  - match: {hits.hits.0._id: "1"}
  - match: {hits.hits.1._id: "3"}
  - match: {hits.hits.2._id: "2"}

  - do:
      search:
        index: mip
        body:
          fields: [ "name" ]
          knn:
            num_candidates: 3
            k: 3
            field: vector
            query_vector: [1, 2, 3, 4, 5, 0]
            filter: { "term": { "name": "moose.jpg" } }



  - length: {hits.hits: 1}
  - match: {hits.hits.0._id: "2"}
---
"Cosine similarity with indexed vector":
  - skip:
      features: "headers"
  - do:
      headers:
        Content-Type: application/json
      search:
        rest_total_hits_as_int: true
        body:
          query:
            script_score:
              query: {match_all: {} }
              script:
                source: "cosineSimilarity(params.query_vector, 'vector')"
                params:
                  query_vector: [0.5, 111.3, -13.0, 14.8]

  - match: {hits.total: 3}

  - match: {hits.hits.0._id: "3"}
  - gte: {hits.hits.0._score: 0.999}
  - lte: {hits.hits.0._score: 1.001}

  - match: {hits.hits.1._id: "2"}
  - gte: {hits.hits.1._score: 0.998}
  - lte: {hits.hits.1._score: 1.0}

  - match: {hits.hits.2._id: "1"}
  - gte: {hits.hits.2._score: 0.78}
  - lte: {hits.hits.2._score: 0.80}
---
"Test bad quantization parameters":
  - do:
      catch: bad_request
      indices.create:
        index: bad_hnsw_quantized
        body:
          mappings:
            properties:
              vector:
                type: dense_vector
                dims: 6
                element_type: byte
                index: true
                index_options:
                  type: int4_hnsw

  - do:
      catch: bad_request
      indices.create:
        index: bad_hnsw_quantized
        body:
          mappings:
            properties:
              vector:
                type: dense_vector
                dims: 6
                index: false
                index_options:
                  type: int4_hnsw
---
"Test create, merge, and search cosine":
  - do:
      indices.create:
        index: hnsw_byte_quantized_merge_cosine
        body:
          settings:
            index:
              number_of_shards: 1
  - do:
      indices.put_mapping:
        index: hnsw_byte_quantized_merge_cosine
        body:
          properties:
            embedding:
              type: dense_vector
              element_type: float
              similarity: cosine
              index_options:
                type: int4_hnsw

  - do:
      index:
        index: hnsw_byte_quantized_merge_cosine
        id: "1"
        body:
          embedding: [0.5, 0.5, 0.5, 0.5, 0.5, 1.0]

  # Flush in order to provoke a merge later
  - do:
      indices.flush: { }

  - do:
      index:
        index: hnsw_byte_quantized_merge_cosine
        id: "2"
        body:
          embedding: [0.0, 0.0, 0.0, 1.0, 1.0, 0.5]

  # Flush in order to provoke a merge later
  - do:
      indices.flush: { }

  - do:
      index:
        index: hnsw_byte_quantized_merge_cosine
        id: "3"
        body:
          embedding: [0.0, 0.0, 0.0, 0.0, 0.0, 10.5]

  - do:
      indices.forcemerge:
        index: hnsw_byte_quantized_merge_cosine
        max_num_segments: 1

  - do:
      indices.refresh: {}

  - do:
      search:
        index: hnsw_byte_quantized_merge_cosine
        body:
          size: 3
          query:
            knn:
              field: embedding
              query_vector: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
              num_candidates: 10

  - length: { hits.hits: 3 }
  - match: { hits.hits.0._id: "1"}
  - match: { hits.hits.1._id: "2"}
  - match: { hits.hits.2._id: "3"}
---
"Test create, merge, and search dot_product":
  - do:
      indices.create:
        index: hnsw_byte_quantized_merge_dot_product
        body:
          settings:
            index:
              number_of_shards: 1
  - do:
      indices.put_mapping:
        index: hnsw_byte_quantized_merge_dot_product
        body:
          properties:
            embedding:
              type: dense_vector
              element_type: float
              similarity: dot_product
              index_options:
                type: int4_hnsw

  - do:
      index:
        index: hnsw_byte_quantized_merge_dot_product
        id: "1"
        body:
          embedding: [0.6, 0.8]

  # Flush in order to provoke a merge later
  - do:
      indices.flush: { }

  - do:
      index:
        index: hnsw_byte_quantized_merge_dot_product
        id: "2"
        body:
          embedding: [0.8, 0.6]

  # Flush in order to provoke a merge later
  - do:
      indices.flush: { }

  - do:
      index:
        index: hnsw_byte_quantized_merge_dot_product
        id: "3"
        body:
          embedding: [-0.6, -0.8]

  - do:
      indices.forcemerge:
        index: hnsw_byte_quantized_merge_dot_product
        max_num_segments: 1

  - do:
      indices.refresh: {}

  - do:
      search:
        index: hnsw_byte_quantized_merge_dot_product
        body:
          size: 3
          query:
            knn:
              field: embedding
              query_vector: [0.6, 0.8]
              num_candidates: 10

  - length: { hits.hits: 3 }
  - match: { hits.hits.0._id: "1"}
  - match: { hits.hits.1._id: "2"}
  - match: { hits.hits.2._id: "3"}
---
"Vector rescoring has the same scoring as exact search for kNN section":
  - requires:
      reason: 'Quantized vector rescoring is required'
      test_runner_features: [capabilities]
      capabilities:
        - method: GET
          path: /_search
          capabilities: [knn_quantized_vector_rescore_oversample]
  - skip:
      features: "headers"

  # Rescore
  - do:
      headers:
        Content-Type: application/json
      search:
        index: hnsw_byte_quantized
        rest_total_hits_as_int: true
        body:
          fields: [ "name" ]
          knn:
            field: vector
            query_vector: [-0.5, 90.0, -10, 14.8]
            k: 3
            num_candidates: 3
            rescore_vector:
              oversample: 1.5

  # Get rescoring scores - hit ordering may change depending on how things are distributed
  - match: { hits.total: 3 }
  - set: { hits.hits.0._score: rescore_score0 }
  - set: { hits.hits.1._score: rescore_score1 }
  - set: { hits.hits.2._score: rescore_score2 }

  # Exact knn via script score
  - do:
      headers:
        Content-Type: application/json
      search:
        rest_total_hits_as_int: true
        body:
          query:
            script_score:
              query: {match_all: {} }
              script:
                source: "1.0 / (1.0 + Math.pow(l2norm(params.query_vector, 'vector'), 2.0))"
                params:
                  query_vector: [-0.5, 90.0, -10, 14.8]

  # Compare scores as hit IDs may change depending on how things are distributed
  - match: { hits.total: 3 }
  - match: { hits.hits.0._score: $rescore_score0 }
  - match: { hits.hits.1._score: $rescore_score1 }
  - match: { hits.hits.2._score: $rescore_score2 }

---
"Test odd dimensions fail indexing":
  - do:
      catch: bad_request
      indices.create:
        index: bad_hnsw_quantized
        body:
          mappings:
            properties:
              vector:
                type: dense_vector
                dims: 5
                index: true
                index_options:
                  type: int4_hnsw

  - do:
      indices.create:
        index: dynamic_dim_hnsw_quantized
        body:
          mappings:
            properties:
              vector:
                type: dense_vector
                index: true
                similarity: l2_norm
                index_options:
                  type: int4_hnsw

  - do:
      catch: bad_request
      index:
        index: dynamic_dim_hnsw_quantized
        body:
          vector: [1.0, 2.0, 3.0, 4.0, 5.0]

  - do:
      index:
        index: dynamic_dim_hnsw_quantized
        body:
          vector: [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
---
"Test index configured rescore vector":
  - requires:
      cluster_features: ["mapper.dense_vector.rescore_vector"]
      reason: Needs rescore_vector feature
  - skip:
      features: "headers"
  - do:
      indices.create:
        index: int4_rescore_hnsw
        body:
          settings:
            index:
              number_of_shards: 1
          mappings:
            properties:
              vector:
                type: dense_vector
                dims: 64
                index: true
                similarity: max_inner_product
                index_options:
                  type: int4_hnsw
                  rescore_vector:
                    oversample: 1.5

  - do:
      bulk:
        index: int4_rescore_hnsw
        refresh: true
        body: |
          { "index": {"_id": "1"}}
          { "vector": [0.077,  0.32 , -0.205,  0.63 ,  0.032,  0.201,  0.167, -0.313, 0.176,  0.531, -0.375,  0.334, -0.046,  0.078, -0.349,  0.272, 0.307, -0.083,  0.504,  0.255, -0.404,  0.289, -0.226, -0.132, -0.216,  0.49 ,  0.039,  0.507, -0.307,  0.107,  0.09 , -0.265, -0.285,  0.336, -0.272,  0.369, -0.282,  0.086, -0.132,  0.475, -0.224,  0.203,  0.439,  0.064,  0.246, -0.396,  0.297,  0.242, -0.028,  0.321, -0.022, -0.009, -0.001  ,  0.031, -0.533,  0.45, -0.683,  1.331,  0.194, -0.157, -0.1  , -0.279, -0.098, -0.176] }
          { "index": {"_id": "2"}}
          { "vector": [0.196,  0.514,  0.039,  0.555, -0.042,  0.242,  0.463, -0.348, -0.08 ,  0.442, -0.067, -0.05 , -0.001,  0.298, -0.377,  0.048, 0.307,  0.159,  0.278,  0.119, -0.057,  0.333, -0.289, -0.438, -0.014,  0.361, -0.169,  0.292, -0.229,  0.123,  0.031, -0.138, -0.139,  0.315, -0.216,  0.322, -0.445, -0.059,  0.071,  0.429, -0.602, -0.142,  0.11 ,  0.192,  0.259, -0.241,  0.181, -0.166, 0.082,  0.107, -0.05 ,  0.155,  0.011,  0.161, -0.486,  0.569, -0.489,  0.901,  0.208,  0.011, -0.209, -0.153, -0.27 , -0.013] }
          { "index": {"_id": "3"}}
          { "vector": [0.196,  0.514,  0.039,  0.555, -0.042,  0.242,  0.463, -0.348, -0.08 ,  0.442, -0.067, -0.05 , -0.001,  0.298, -0.377,  0.048, 0.307,  0.159,  0.278,  0.119, -0.057,  0.333, -0.289, -0.438, -0.014,  0.361, -0.169,  0.292, -0.229,  0.123,  0.031, -0.138, -0.139,  0.315, -0.216,  0.322, -0.445, -0.059,  0.071,  0.429, -0.602, -0.142,  0.11 ,  0.192,  0.259, -0.241,  0.181, -0.166, 0.082,  0.107, -0.05 ,  0.155,  0.011,  0.161, -0.486,  0.569, -0.489,  0.901,  0.208,  0.011, -0.209, -0.153, -0.27 , -0.013] }

  - do:
      headers:
        Content-Type: application/json
      search:
        rest_total_hits_as_int: true
        index: int4_rescore_hnsw
        body:
          knn:
            field: vector
            query_vector: [0.128,  0.067, -0.08 ,  0.395, -0.11 , -0.259,  0.473, -0.393,
                           0.292,  0.571, -0.491,  0.444, -0.288,  0.198, -0.343,  0.015,
                           0.232,  0.088,  0.228,  0.151, -0.136,  0.236, -0.273, -0.259,
                           -0.217,  0.359, -0.207,  0.352, -0.142,  0.192, -0.061, -0.17 ,
                           -0.343,  0.189, -0.221,  0.32 , -0.301, -0.1  ,  0.005,  0.232,
                           -0.344,  0.136,  0.252,  0.157, -0.13 , -0.244,  0.193, -0.034,
                           -0.12 , -0.193, -0.102,  0.252, -0.185, -0.167, -0.575,  0.582,
                           -0.426,  0.983,  0.212,  0.204,  0.03 , -0.276, -0.425, -0.158]
            k: 3
            num_candidates: 3

  - match: { hits.total: 3 }
  - set: { hits.hits.0._score: rescore_score0 }
  - set: { hits.hits.1._score: rescore_score1 }
  - set: { hits.hits.2._score: rescore_score2 }

  - do:
      headers:
        Content-Type: application/json
      search:
        rest_total_hits_as_int: true
        body:
          query:
            script_score:
              query: {match_all: {} }
              script:
                source: "double similarity = dotProduct(params.query_vector, 'vector'); return similarity < 0 ? 1 / (1 + -1 * similarity) : similarity + 1"
                params:
                  query_vector: [0.128,  0.067, -0.08 ,  0.395, -0.11 , -0.259,  0.473, -0.393,
                                 0.292,  0.571, -0.491,  0.444, -0.288,  0.198, -0.343,  0.015,
                                 0.232,  0.088,  0.228,  0.151, -0.136,  0.236, -0.273, -0.259,
                                 -0.217,  0.359, -0.207,  0.352, -0.142,  0.192, -0.061, -0.17 ,
                                 -0.343,  0.189, -0.221,  0.32 , -0.301, -0.1  ,  0.005,  0.232,
                                 -0.344,  0.136,  0.252,  0.157, -0.13 , -0.244,  0.193, -0.034,
                                 -0.12 , -0.193, -0.102,  0.252, -0.185, -0.167, -0.575,  0.582,
                                 -0.426,  0.983,  0.212,  0.204,  0.03 , -0.276, -0.425, -0.158]

  # Compare scores as hit IDs may change depending on how things are distributed
  - match: { hits.total: 3 }
  - match: { hits.hits.0._score: $rescore_score0 }
  - match: { hits.hits.1._score: $rescore_score1 }
  - match: { hits.hits.2._score: $rescore_score2 }

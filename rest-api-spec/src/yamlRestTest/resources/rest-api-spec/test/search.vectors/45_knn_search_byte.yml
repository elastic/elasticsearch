setup:
  - requires:
      cluster_features: "gte_v8.6.0"
      reason: 'byte-sized kNN search added in 8.6'

  - do:
      indices.create:
        index: test
        body:
          mappings:
            properties:
              name:
                type: keyword
              vector:
                type: dense_vector
                element_type: byte
                dims: 5
                index: true
                similarity: cosine

  - do:
      index:
        index: test
        id: "1"
        body:
          name: cow.jpg
          vector: [2, -1, 1, 4, -3]

  - do:
      index:
        index: test
        id: "2"
        body:
          name: moose.jpg
          vector: [127.0, -128.0, 0.0, 1.0, -1.0]

  - do:
      index:
        index: test
        id: "3"
        body:
          name: rabbit.jpg
          vector: [5, 4.0, 3, 2.0, 127]

  - do:
      indices.refresh: {}

---
"kNN search only":
  - do:
      search:
        index: test
        body:
          fields: [ "name" ]
          knn:
            field: vector
            query_vector: [127, 127, -128, -128, 127]
            k: 2
            num_candidates: 3

  - match: {hits.hits.0._id: "3"}
  - match: {hits.hits.0.fields.name.0: "rabbit.jpg"}

  - match: {hits.hits.1._id: "2"}
  - match: {hits.hits.1.fields.name.0: "moose.jpg"}

---
"kNN search plus query":
  - do:
      search:
        index: test
        body:
          fields: [ "name" ]
          knn:
            field: vector
            query_vector: [127.0, -128.0, 0.0, 1.0, -1.0]
            k: 2
            num_candidates: 3
          query:
            term:
              name: rabbit.jpg

  - match: {hits.hits.0._id: "2"}
  - match: {hits.hits.0.fields.name.0: "moose.jpg"}

  - match: {hits.hits.1._id: "3"}
  - match: {hits.hits.1.fields.name.0: "rabbit.jpg"}

  - match: {hits.hits.2._id: "1"}
  - match: {hits.hits.2.fields.name.0: "cow.jpg"}

---
"kNN search with filter":
  - do:
      search:
        index: test
        body:
          fields: [ "name" ]
          knn:
            field: vector
            query_vector: [5.0, 4, 3.0, 2, 127.0]
            k: 2
            num_candidates: 3

            filter:
              term:
                name: "rabbit.jpg"

  - match: {hits.total.value: 1}
  - match: {hits.hits.0._id: "3"}
  - match: {hits.hits.0.fields.name.0: "rabbit.jpg"}

  - do:
      search:
        index: test
        body:
          fields: [ "name" ]
          knn:
            field: vector
            query_vector: [2, -1, 1, 4, -3]
            k: 2
            num_candidates: 3
            filter:
              - term:
                  name: "rabbit.jpg"
              - term:
                  _id: 2

  - match: {hits.total.value: 0}

---
"kNN search with explicit search_type":
  - do:
      catch: bad_request
      search:
        index: test
        search_type: query_then_fetch
        body:
          fields: [ "name" ]
          knn:
            field: vector
            query_vector: [-0.5, 90.0, -10, 14.8, -156.0]
            k: 2
            num_candidates: 3

  - match: { error.root_cause.0.type: "illegal_argument_exception" }
  - match: { error.root_cause.0.reason: "cannot set [search_type] when using [knn] search, since the search type is determined automatically" }

---
"Test nonexistent field is match none":
  - requires:
      cluster_features: 'gte_v8.16.0'
      reason: 'non-existent field handling improved in 8.16'
  - do:
      search:
        index: test
        body:
          fields: [ "name" ]
          knn:
            field: nonexistent
            query_vector: [ 1, 0, 0, 0, -1 ]
            k: 2
            num_candidates: 3

  - length: {hits.hits: 0}

  - do:
      indices.create:
        index: test_nonexistent
        body:
          mappings:
            properties:
              name:
                type: keyword
              vector:
                type: dense_vector
                element_type: byte
                dims: 5
                index: true
                similarity: cosine
          settings:
            index.query.parse.allow_unmapped_fields: false

  - do:
      catch: bad_request
      search:
        index: test_nonexistent
        body:
          fields: [ "name" ]
          knn:
            field: nonexistent
            query_vector: [ 1, 0, 0, 0, -1 ]
            k: 2
            num_candidates: 3

  - match: { error.root_cause.0.type: "query_shard_exception" }
  - match: { error.root_cause.0.reason: "No field mapping can be found for the field with name [nonexistent]" }

---
"Vector similarity search only":
  - requires:
      cluster_features: "gte_v8.8.0"
      reason: 'kNN similarity added in 8.8'
  - do:
      search:
        index: test
        body:
          fields: [ "name" ]
          knn:
            num_candidates: 3
            k: 3
            field: vector
            similarity: 1.0
            query_vector: [5, 4.0, 3, 2.0, 127]

  - length: {hits.hits: 1}

  - match: {hits.hits.0._id: "3"}
  - match: {hits.hits.0.fields.name.0: "rabbit.jpg"}
---
"Vector similarity with filter only":
  - requires:
      cluster_features: "gte_v8.8.0"
      reason: 'kNN similarity added in 8.8'
  - do:
      search:
        index: test
        body:
          fields: [ "name" ]
          knn:
            num_candidates: 3
            k: 3
            field: vector
            similarity: 1.0
            query_vector: [5, 4.0, 3, 2.0, 127]
            filter: {"term": {"name": "rabbit.jpg"}}

  - length: {hits.hits: 1}

  - match: {hits.hits.0._id: "3"}
  - match: {hits.hits.0.fields.name.0: "rabbit.jpg"}

  - do:
      search:
        index: test
        body:
          fields: [ "name" ]
          knn:
            num_candidates: 3
            k: 3
            field: vector
            similarity: 1
            query_vector: [5, 4.0, 3, 2.0, 127]
            filter: {"term": {"name": "cow.jpg"}}

  - length: {hits.hits: 0}

---
"Vector rescoring has no effect for non-quantized vectors and provides same results as non-rescored knn":
  - requires:
      reason: 'Quantized vector rescoring is required'
      test_runner_features: [capabilities]
      capabilities:
        - method: GET
          path: /_search
          capabilities: [knn_quantized_vector_rescore]
  - skip:
      features: "headers"

  # Non-rescored knn
  - do:
      headers:
        Content-Type: application/json
      search:
        rest_total_hits_as_int: true
        index: test
        body:
          fields: [ "name" ]
          knn:
            field: vector
            query_vector: [127, 127, -128, -128, 127]
            k: 3
            num_candidates: 3

  # Get scores - hit ordering may change depending on how things are distributed
  - match: { hits.total: 3 }
  - set: { hits.hits.0._score: knn_score0 }
  - set: { hits.hits.1._score: knn_score1 }
  - set: { hits.hits.2._score: knn_score2 }

  # Rescored knn
  - do:
      headers:
        Content-Type: application/json
      search:
        rest_total_hits_as_int: true
        index: test
        body:
          fields: [ "name" ]
          knn:
            field: vector
            query_vector: [127, 127, -128, -128, 127]
            k: 3
            num_candidates: 3
            rescore_vector:
              num_candidates_factor: 1.5

  # Compare scores as hit IDs may change depending on how things are distributed
  - match: { hits.total: 3 }
  - match: { hits.hits.0._score: $knn_score0 }
  - match: { hits.hits.1._score: $knn_score1 }
  - match: { hits.hits.2._score: $knn_score2 }


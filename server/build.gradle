import org.elasticsearch.gradle.internal.info.BuildParams

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.publish'
apply plugin: 'elasticsearch.internal-cluster-test'

publishing {
  publications {
    elastic {
      artifactId 'elasticsearch'
    }
  }
}

base {
  archivesName = 'elasticsearch'
}

// we want to keep the JDKs in our IDEs set to JDK 8 until minimum JDK is bumped to 11 so we do not include this source set in our IDEs
if (!isEclipse) {
  sourceSets {
    java11 {
      java {
        srcDirs = ['src/main/java11']
      }
    }
  }

  configurations {
    java11Implementation.extendsFrom(api)
  }

  dependencies {
    java11Implementation sourceSets.main.output
  }

  tasks.named("compileJava11Java").configure {
    sourceCompatibility = 11
    targetCompatibility = 11
  }

  tasks.named('forbiddenApisJava11').configure {
    doFirst {
      if (BuildParams.runtimeJavaVersion < JavaVersion.VERSION_11) {
        targetCompatibility = JavaVersion.VERSION_11.getMajorVersion()
      }
    }
  }

  tasks.named("jar").configure {
    metaInf {
      into 'versions/11'
      from sourceSets.java11.output
    }
    manifest.attributes('Multi-Release': 'true')
  }
}

dependencies {

  api project(':libs:elasticsearch-core')
  api project(':libs:elasticsearch-secure-sm')
  api project(':libs:elasticsearch-x-content')
  api project(":libs:elasticsearch-geo")
  api project(":libs:elasticsearch-lz4")

  implementation project(':libs:elasticsearch-plugin-classloader')

  // lucene
  api "org.apache.lucene:lucene-core:${versions.lucene}"
  api "org.apache.lucene:lucene-analyzers-common:${versions.lucene}"
  api "org.apache.lucene:lucene-backward-codecs:${versions.lucene}"
  api "org.apache.lucene:lucene-grouping:${versions.lucene}"
  api "org.apache.lucene:lucene-highlighter:${versions.lucene}"
  api "org.apache.lucene:lucene-join:${versions.lucene}"
  api "org.apache.lucene:lucene-memory:${versions.lucene}"
  api "org.apache.lucene:lucene-misc:${versions.lucene}"
  api "org.apache.lucene:lucene-queries:${versions.lucene}"
  api "org.apache.lucene:lucene-queryparser:${versions.lucene}"
  api "org.apache.lucene:lucene-sandbox:${versions.lucene}"
  api "org.apache.lucene:lucene-spatial3d:${versions.lucene}"
  api "org.apache.lucene:lucene-suggest:${versions.lucene}"

  // utilities
  api project(":libs:elasticsearch-cli")
  api 'com.carrotsearch:hppc:0.8.1'

  // time handling, remove with java 8 time
  api "joda-time:joda-time:${versions.joda}"

  // percentiles aggregation
  api 'com.tdunning:t-digest:3.2'
  // precentil ranks aggregation
  api 'org.hdrhistogram:HdrHistogram:2.1.9'

  // logging
  api "org.apache.logging.log4j:log4j-api:${versions.log4j}"
  api "org.apache.logging.log4j:log4j-core:${versions.log4j}"

  api "net.java.dev.jna:jna:${versions.jna}"

  testImplementation(project(":test:framework")) {
    // tests use the locally compiled version of server
    exclude group: 'org.elasticsearch', module: 'server'
  }
  internalClusterTestImplementation(project(":test:framework")) {
    exclude group: 'org.elasticsearch', module: 'server'
  }
}

tasks.named("forbiddenPatterns").configure {
    exclude '**/*.json'
    exclude '**/*.jmx'
    exclude '**/*.dic'
    exclude '**/*.binary'
    exclude '**/*.st'
}

tasks.named('internalClusterTestTestingConventions').configure {
    baseClass "org.elasticsearch.test.AbstractMultiClustersTestCase"
    baseClass "org.elasticsearch.test.ESIntegTestCase"
    baseClass "org.elasticsearch.test.ESSingleNodeTestCase"
}

def generateModulesList = tasks.register("generateModulesList") {
    List<String> modules = project(':modules').subprojects.collect { it.name }
    modules.add('x-pack')
    File modulesFile = new File(buildDir, 'generated-resources/modules.txt')
    processResources.from(modulesFile)
    inputs.property('modules', modules)
    outputs.file(modulesFile)
    doLast {
        modulesFile.parentFile.mkdirs()
        modulesFile.setText(modules.join('\n'), 'UTF-8')
    }
}

def generatePluginsList = tasks.register("generatePluginsList") {
    Set<String> plugins = new TreeSet<>(project(':plugins').childProjects.keySet())
    plugins.remove('example')

    File pluginsFile = new File(buildDir, 'generated-resources/plugins.txt')
    processResources.from(pluginsFile)
    inputs.property('plugins', plugins)
    outputs.file(pluginsFile)
    doLast {
        pluginsFile.parentFile.mkdirs()
        pluginsFile.setText(plugins.join('\n'), 'UTF-8')
    }
}

tasks.named("processResources").configure {
    dependsOn generateModulesList, generatePluginsList
}

tasks.named("thirdPartyAudit").configure {
    ignoreMissingClasses(
            // from com.fasterxml.jackson.dataformat.yaml.YAMLMapper (jackson-dataformat-yaml)
            'com.fasterxml.jackson.databind.ObjectMapper',

            // from log4j
            'com.conversantmedia.util.concurrent.SpinPolicy',
            'com.fasterxml.jackson.annotation.JsonInclude$Include',
            'com.fasterxml.jackson.databind.DeserializationContext',
            'com.fasterxml.jackson.databind.DeserializationFeature',
            'com.fasterxml.jackson.databind.JsonMappingException',
            'com.fasterxml.jackson.databind.JsonNode',
            'com.fasterxml.jackson.databind.Module$SetupContext',
            'com.fasterxml.jackson.databind.ObjectReader',
            'com.fasterxml.jackson.databind.ObjectWriter',
            'com.fasterxml.jackson.databind.SerializerProvider',
            'com.fasterxml.jackson.databind.deser.std.StdDeserializer',
            'com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer',
            'com.fasterxml.jackson.databind.module.SimpleModule',
            'com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter',
            'com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider',
            'com.fasterxml.jackson.databind.ser.std.StdScalarSerializer',
            'com.fasterxml.jackson.databind.ser.std.StdSerializer',
            'com.fasterxml.jackson.dataformat.xml.JacksonXmlModule',
            'com.fasterxml.jackson.dataformat.xml.XmlMapper',
            'com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter',
            'org.fusesource.jansi.Ansi',
            'org.fusesource.jansi.AnsiRenderer$Code',
            'com.lmax.disruptor.EventFactory',
            'com.lmax.disruptor.EventTranslator',
            'com.lmax.disruptor.EventTranslatorTwoArg',
            'com.lmax.disruptor.EventTranslatorVararg',
            'com.lmax.disruptor.ExceptionHandler',
            'com.lmax.disruptor.LifecycleAware',
            'com.lmax.disruptor.RingBuffer',
            'com.lmax.disruptor.Sequence',
            'com.lmax.disruptor.SequenceReportingEventHandler',
            'com.lmax.disruptor.WaitStrategy',
            'com.lmax.disruptor.dsl.Disruptor',
            'com.lmax.disruptor.dsl.ProducerType',
            'javax.jms.Connection',
            'javax.jms.ConnectionFactory',
            'javax.jms.Destination',
            'javax.jms.JMSException',
            'javax.jms.MapMessage',
            'javax.jms.Message',
            'javax.jms.MessageConsumer',
            'javax.jms.MessageProducer',
            'javax.jms.Session',
            'javax.mail.Authenticator',
            'javax.mail.Message$RecipientType',
            'javax.mail.PasswordAuthentication',
            'javax.mail.Session',
            'javax.mail.Transport',
            'javax.mail.internet.InternetAddress',
            'javax.mail.internet.InternetHeaders',
            'javax.mail.internet.MimeMessage',
            'javax.mail.internet.MimeMultipart',
            'javax.mail.internet.MimeUtility',
            'org.apache.commons.compress.compressors.CompressorStreamFactory',
            'org.apache.commons.compress.utils.IOUtils',
            'org.apache.commons.csv.CSVFormat',
            'org.apache.commons.csv.QuoteMode',
            'org.apache.kafka.clients.producer.Producer',
            'org.apache.kafka.clients.producer.RecordMetadata',
            'org.codehaus.stax2.XMLStreamWriter2',
            'org.jctools.queues.MpscArrayQueue',
            'org.osgi.framework.Bundle',
            'org.osgi.framework.BundleActivator',
            'org.osgi.framework.BundleContext',
            'org.osgi.framework.BundleEvent',
            'org.osgi.framework.BundleReference',
            'org.osgi.framework.FrameworkUtil',
            'org.osgi.framework.ServiceRegistration',
            'org.osgi.framework.SynchronousBundleListener',
            'org.osgi.framework.wiring.BundleWire',
            'org.osgi.framework.wiring.BundleWiring',
            'org.zeromq.ZMQ$Context',
            'org.zeromq.ZMQ$Socket',
            'org.zeromq.ZMQ',
    )

    if (BuildParams.runtimeJavaVersion > JavaVersion.VERSION_1_8) {
        ignoreMissingClasses 'javax.xml.bind.DatatypeConverter'
    }
}

tasks.named("dependencyLicenses").configure {
    mapping from: /lucene-.*/, to: 'lucene'

    configureDependencies(
      project.configurations.runtimeClasspath, project.configurations.resolveableCompileOnly, identifier -> {
      return identifier instanceof ModuleComponentIdentifier
        (identifier.moduleIdentifier.name == 'jna' || identifier.moduleIdentifier.name == 'securesm')
    })
}

tasks.named("licenseHeaders").configure {
    // Ignore our vendored version of Google Guice
    excludes << 'org/elasticsearch/common/inject/**/*'
    // Ignore temporary copies of impending 8.7 Lucene classes
    excludes << 'org/apache/lucene/search/RegExp87*'
    excludes << 'org/apache/lucene/search/RegexpQuery87*'
    excludes << 'org/elasticsearch/client/documentation/placeholder.txt'
}

tasks.named('splitPackagesAudit').configure {
    // Lucene packages should be owned by Lucene!
  ignoreClasses 'org.apache.lucene.analysis.miscellaneous.DeDuplicatingTokenFilter',
    'org.apache.lucene.analysis.miscellaneous.DisableGraphAttribute',
    'org.apache.lucene.analysis.miscellaneous.DisableGraphAttributeImpl',
    'org.apache.lucene.analysis.miscellaneous.DuplicateByteSequenceSpotter',
    'org.apache.lucene.analysis.miscellaneous.DuplicateSequenceAttribute',
    'org.apache.lucene.analysis.miscellaneous.DuplicateSequenceAttributeImpl',
    'org.apache.lucene.document.BinaryRange',
    'org.apache.lucene.queryparser.classic.XQueryParser',
    'org.apache.lucene.queries.BinaryDocValuesRangeQuery',
    'org.apache.lucene.queries.BlendedTermQuery',
    'org.apache.lucene.queries.ExtendedCommonTermsQuery',
    'org.apache.lucene.queries.MinDocQuery',
    'org.apache.lucene.queries.SearchAfterSortedDocQuery',
    'org.apache.lucene.queries.SpanMatchNoDocsQuery',
    'org.apache.lucene.search.grouping.CollapseTopFieldDocs',
    'org.apache.lucene.search.grouping.CollapsingDocValuesSource',
    'org.apache.lucene.search.grouping.CollapsingTopDocsCollector',
    'org.apache.lucene.search.uhighlight.BoundedBreakIteratorScanner',
    'org.apache.lucene.search.uhighlight.CustomFieldHighlighter',
    'org.apache.lucene.search.uhighlight.CustomPassageFormatter',
    'org.apache.lucene.search.uhighlight.CustomUnifiedHighlighter',
    'org.apache.lucene.search.uhighlight.Snippet',
    'org.apache.lucene.util.CombinedBitSet',
    'org.apache.lucene.search.vectorhighlight.CustomFieldQuery',

    // These are tricky because Lucene itself splits the index package,
    // but this should be fixed in Lucene 9
    'org.apache.lucene.index.LazySoftDeletesDirectoryReaderWrapper',
    'org.apache.lucene.index.OneMergeHelper',
    'org.apache.lucene.index.ShuffleForcedMergePolicy',

    // Joda should own its own packages! This should be a simple move.
    'org.joda.time.format.StrictISODateTimeFormat',

    // cli is owned by the libs/cli, so these should be moved to o.e.server.cli
    'org.elasticsearch.cli.CommandLoggingConfigurator',
    'org.elasticsearch.cli.EnvironmentAwareCommand',
    'org.elasticsearch.cli.KeyStoreAwareCommand',
    'org.elasticsearch.cli.LoggingAwareCommand',
    'org.elasticsearch.cli.LoggingAwareMultiCommand'
}

tasks.withType(Checkstyle.class).configureEach { t -> t.getMaxHeapSize().set("2g") }

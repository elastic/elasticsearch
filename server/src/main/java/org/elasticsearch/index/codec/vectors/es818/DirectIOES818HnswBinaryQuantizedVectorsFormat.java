/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

package org.elasticsearch.index.codec.vectors.es818;

import java.util.concurrent.ExecutorService;

import static org.apache.lucene.codecs.lucene99.Lucene99HnswVectorsFormat.DEFAULT_BEAM_WIDTH;
import static org.apache.lucene.codecs.lucene99.Lucene99HnswVectorsFormat.DEFAULT_MAX_CONN;
import static org.apache.lucene.codecs.lucene99.Lucene99HnswVectorsFormat.DEFAULT_NUM_MERGE_WORKER;

public class DirectIOES818HnswBinaryQuantizedVectorsFormat extends ES818HnswBinaryQuantizedVectorsFormat {

    public static final String NAME = "DirectIOES818HnswBinaryQuantizedVectorsFormat";

    /** Constructs a format using default graph construction parameters */
    public DirectIOES818HnswBinaryQuantizedVectorsFormat() {
        this(DEFAULT_MAX_CONN, DEFAULT_BEAM_WIDTH, DEFAULT_NUM_MERGE_WORKER, null);
    }

    /**
     * Constructs a format using the given graph construction parameters.
     *
     * @param maxConn the maximum number of connections to a node in the HNSW graph
     * @param beamWidth the size of the queue maintained during graph construction.
     */
    public DirectIOES818HnswBinaryQuantizedVectorsFormat(int maxConn, int beamWidth) {
        this(maxConn, beamWidth, DEFAULT_NUM_MERGE_WORKER, null);
    }

    /**
     * Constructs a format using the given graph construction parameters and scalar quantization.
     *
     * @param maxConn the maximum number of connections to a node in the HNSW graph
     * @param beamWidth the size of the queue maintained during graph construction.
     * @param numMergeWorkers number of workers (threads) that will be used when doing merge. If
     *     larger than 1, a non-null {@link ExecutorService} must be passed as mergeExec
     * @param mergeExec the {@link ExecutorService} that will be used by ALL vector writers that are
     *     generated by this format to do the merge
     */
    public DirectIOES818HnswBinaryQuantizedVectorsFormat(int maxConn, int beamWidth, int numMergeWorkers, ExecutorService mergeExec) {
        super(NAME, maxConn, beamWidth, numMergeWorkers, new DirectIOES818BinaryQuantizedVectorsFormat(), mergeExec);
    }
}

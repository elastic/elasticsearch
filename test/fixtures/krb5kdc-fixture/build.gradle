/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
apply plugin: 'elasticsearch.test.fixtures'

List<String> services = ["peppa", "hdfs"]

tasks.named("preProcessFixture").configure {
  doLast {
    // We need to create these up-front because if docker creates them they will be owned by root and we won't be
    // able to clean them up
    services.each { file("${testFixturesDir}/shared/${it}").mkdirs() }
  }
}

tasks.named("postProcessFixture").configure {
  inputs.dir("${testFixturesDir}/shared")
  services.each { service ->
    File confTemplate = file("${testFixturesDir}/shared/${service}/krb5.conf.template")
    File confFile = file("${testFixturesDir}/shared/${service}/krb5.conf")
    outputs.file(confFile)
    doLast {
      assert confTemplate.exists()
      String confContents = confTemplate.text
        .replace("\${MAPPED_PORT}", "${ext."test.fixtures.${service}.udp.88"}")
      confFile.text = confContents
    }
  }
}


project.ext.krb5Conf = { service -> file("$testFixturesDir/shared/${service}/krb5.conf") }
project.ext.krb5Keytabs = { service, fileName -> file("$testFixturesDir/shared/${service}/keytabs/${fileName}") }

configurations {
  krb5ConfHdfsFile {
    canBeConsumed = true
    canBeResolved = false
  }
  krb5KeytabsHdfsDir {
    canBeConsumed = true
    canBeResolved = false
  }
}

artifacts {
  krb5ConfHdfsFile(krb5Conf('hdfs')) {
    builtBy("postProcessFixture")
  }
  krb5KeytabsHdfsDir(file("$testFixturesDir/shared/hdfs/keytabs/")) {
    builtBy("postProcessFixture")
  }
}

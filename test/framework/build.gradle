/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
import org.elasticsearch.gradle.internal.info.BuildParams;

apply plugin: 'elasticsearch.build'
apply plugin: 'elasticsearch.publish'

dependencies {
  api project(":client:rest")
  api project(":client:sniffer")
  api project(':libs:elasticsearch-nio')
  api project(':libs:elasticsearch-ssl-config')
  api project(":server")
  api project(":libs:elasticsearch-cli")
  api "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  api "junit:junit:${versions.junit}"
  api "org.hamcrest:hamcrest:${versions.hamcrest}"
  api "org.apache.lucene:lucene-test-framework:${versions.lucene}"
  api "org.apache.lucene:lucene-codecs:${versions.lucene}"
  api "commons-logging:commons-logging:${versions.commonslogging}"
  api "commons-codec:commons-codec:${versions.commonscodec}"

  // mockito
  api 'org.mockito:mockito-core:4.4.0'
  api 'net.bytebuddy:byte-buddy:1.12.9'
  api 'org.objenesis:objenesis:3.2'

  api "org.elasticsearch:mocksocket:${versions.mocksocket}"
  api "io.github.nik9000:mapmatcher:0.0.3"

  // json schema validation dependencies
  api "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
  api "com.networknt:json-schema-validator:${versions.networknt_json_schema_validator}"
  api "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
  api "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
  api "org.apache.commons:commons-compress:1.21"
  api "org.apache.commons:commons-lang3:${versions.commons_lang3}"
}

sourceSets {
  integTest {
    compileClasspath += sourceSets["main"].output + configurations["testRuntimeClasspath"]
    runtimeClasspath += output + compileClasspath
  }
}

// the main files are actually test files, so use the appropriate forbidden api sigs
tasks.named('forbiddenApisMain').configure {
  replaceSignatureFiles 'jdk-signatures', 'es-all-signatures', 'es-test-signatures'
}

// TODO: should we have licenses for our test deps?
tasks.named("dependencyLicenses").configure { enabled = false }
tasks.named("dependenciesInfo").configure { enabled = false }
tasks.named("thirdPartyAudit").configure {
  ignoreMissingClasses(
          // classes are missing
          'com.github.luben.zstd.BufferPool',
          'com.github.luben.zstd.ZstdInputStream',
          'com.github.luben.zstd.ZstdOutputStream',
          'javax.servlet.ServletContextEvent',
          'javax.servlet.ServletContextListener',
          'org.apache.avalon.framework.logger.Logger',
          'org.apache.log.Hierarchy',
          'org.apache.log.Logger',
          'org.apache.log4j.Category',
          'org.apache.log4j.Level',
          'org.apache.log4j.Logger',
          'org.apache.log4j.Priority',
          'org.brotli.dec.BrotliInputStream',
          'org.jcodings.specific.UTF8Encoding',
          'org.joni.Matcher',
          'org.joni.Regex',
          'org.joni.Syntax',
          'org.objectweb.asm.AnnotationVisitor',
          'org.objectweb.asm.Attribute',
          'org.objectweb.asm.ClassReader',
          'org.objectweb.asm.ClassVisitor',
          'org.objectweb.asm.FieldVisitor',
          'org.objectweb.asm.Label',
          'org.objectweb.asm.MethodVisitor',
          'org.objectweb.asm.Type',
          'org.slf4j.Logger',
          'org.slf4j.LoggerFactory',
          'org.tukaani.xz.DeltaOptions',
          'org.tukaani.xz.FilterOptions',
          'org.tukaani.xz.LZMA2InputStream',
          'org.tukaani.xz.LZMA2Options',
          'org.tukaani.xz.LZMAInputStream',
          'org.tukaani.xz.LZMAOutputStream',
          'org.tukaani.xz.MemoryLimitException',
          'org.tukaani.xz.UnsupportedOptionsException',
          'org.tukaani.xz.XZ',
          'org.tukaani.xz.XZOutputStream',

          // mockito
          'net.bytebuddy.agent.ByteBuddyAgent',
          'org.mockito.internal.creation.bytebuddy.inject.MockMethodDispatcher',
          'org.opentest4j.AssertionFailedError'
  )

  ignoreViolations(
    'org.objenesis.instantiator.sun.UnsafeFactoryInstantiator',
    'org.objenesis.instantiator.util.UnsafeUtils'
  )
}

tasks.named("test").configure {
  systemProperty 'tests.gradle_index_compat_versions', BuildParams.bwcVersions.indexCompatible.join(',')
  systemProperty 'tests.gradle_wire_compat_versions', BuildParams.bwcVersions.wireCompatible.join(',')
  systemProperty 'tests.gradle_unreleased_versions', BuildParams.bwcVersions.unreleased.join(',')
}

tasks.register("integTest", Test) {
  testClassesDirs = sourceSets.integTest.output.classesDirs
  classpath = sourceSets.integTest.runtimeClasspath
}

tasks.named('check').configure {
  dependsOn 'integTest'
}

tasks.register("verifyVersions") {
  dependsOn "test"
}

tasks.named('splitPackagesAudit').configure {
  // for now we always run tests with the classpath, so we are ok with split packages for tests
  onlyIf { false }
}

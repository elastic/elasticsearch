import org.elasticsearch.gradle.internal.test.RestIntegTestTask
import org.elasticsearch.gradle.testclusters.TestClusterValueSource
import org.elasticsearch.gradle.testclusters.TestClustersPlugin
import org.elasticsearch.gradle.testclusters.TestClustersRegistry
import org.elasticsearch.gradle.util.GradleUtils

import static org.elasticsearch.gradle.PropertyNormalization.IGNORE_VALUE

apply plugin: 'elasticsearch.internal-testclusters'
apply plugin: 'elasticsearch.standalone-rest-test'

dependencies {
  testImplementation(testArtifact(project(xpackModule('core'))))
  testImplementation project(xpackModule('ccr'))
  testImplementation project(':x-pack:plugin:ccr:qa')
}

def clusterPath = getPath()

def leaderCluster = testClusters.register("leader-cluster") {
  testDistribution = 'DEFAULT'
  setting 'xpack.license.self_generated.type', 'trial'
  setting 'xpack.security.enabled', 'true'
  user username: 'admin', password: 'admin-password', role: 'superuser'
}

def followCluster = testClusters.register("follow-cluster") {
  testDistribution = 'DEFAULT'
  setting 'xpack.monitoring.collection.enabled', 'true'
  setting 'xpack.license.self_generated.type', 'trial'
  setting 'xpack.security.enabled', 'true'
  user username: 'admin', password: 'admin-password', role: 'superuser'
  Provider<TestClustersRegistry> serviceProvider = GradleUtils.getBuildService(
    project.gradle.sharedServices,
    TestClustersPlugin.REGISTRY_SERVICE_NAME
  )
  def leaderInfo = project.getProviders().of(TestClusterValueSource.class) {
    it.parameters.path.set(clusterPath)
    it.parameters.clusterName.set("leader-cluster")
    it.parameters.service = serviceProvider
  }
  def leaderUris = leaderInfo.map { it.getAllTransportPortURI() }

  setting 'cluster.remote.leader_cluster.seeds',
    { "\"${leaderUris.get().join(",")}\"" }, IGNORE_VALUE
}

tasks.register("leader-cluster", RestIntegTestTask) {
  mustRunAfter("precommit")
  systemProperty 'tests.target_cluster', 'leader'
}

File policyFile = file("${buildDir}/tmp/java.policy")
tasks.register("writeJavaPolicy") {
  doLast {
    if (policyFile.parentFile.exists() == false && policyFile.parentFile.mkdirs() == false) {
      throw new GradleException("failed to create temporary directory [${tmp}]")
    }
    policyFile.write(
      [
        "grant {",
        "  permission java.io.FilePermission \"${-> followCluster.map { it.getFirstNode().getServerLog() }.get()}\", \"read\";",
        "};"
      ].join("\n")
    )
  }
}

tasks.register("follow-cluster", RestIntegTestTask) {
  dependsOn 'writeJavaPolicy', "leader-cluster"
  useCluster leaderCluster
  systemProperty 'tests.target_cluster', 'follow'
  nonInputProperties.systemProperty 'java.security.policy', "file://${policyFile}"
  Provider<TestClustersRegistry> serviceProvider = GradleUtils.getBuildService(
    project.gradle.sharedServices,
    TestClustersPlugin.REGISTRY_SERVICE_NAME
  )
  def leaderInfo = project.getProviders().of(TestClusterValueSource.class) {
    it.parameters.path.set(clusterPath)
    it.parameters.clusterName.set("leader-cluster")
    it.parameters.service = serviceProvider
  }
  def followInfo = project.getProviders().of(TestClusterValueSource.class) {
    it.parameters.path.set(clusterPath)
    it.parameters.clusterName.set("follow-cluster")
    it.parameters.service = serviceProvider
  }
  def leaderUri = leaderInfo.map { it.getAllHttpSocketURI().get(0) }
  def followerUri = followInfo.map { it.getAllHttpSocketURI().get(0) }

  nonInputProperties.systemProperty 'tests.leader_host', leaderUri
  nonInputProperties.systemProperty 'log', followCluster.map(c -> c.getFirstNode().getServerLog())
}

tasks.named("check").configure { dependsOn "follow-cluster" }

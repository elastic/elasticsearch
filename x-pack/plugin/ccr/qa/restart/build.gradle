import org.elasticsearch.gradle.internal.test.RestIntegTestTask
import org.elasticsearch.gradle.testclusters.StandaloneRestIntegTestTask
import static org.elasticsearch.gradle.PropertyNormalization.IGNORE_VALUE

apply plugin: 'elasticsearch.internal-testclusters'
apply plugin: 'elasticsearch.standalone-rest-test'

dependencies {
  testImplementation project(':x-pack:plugin:ccr:qa')
}

def leaderCluster = testClusters.register('leader-cluster') {
  testDistribution = 'DEFAULT'
  setting 'xpack.license.self_generated.type', 'trial'
  setting 'xpack.security.enabled', 'true'
  user username: 'admin', password: 'admin-password', role: 'superuser'
}

def followCluster = testClusters.register('follow-cluster') {
  testDistribution = 'DEFAULT'
  setting 'xpack.monitoring.collection.enabled', 'true'
  setting 'xpack.license.self_generated.type', 'trial'
  setting 'xpack.security.enabled', 'true'
  user username: 'admin', password: 'admin-password', role: 'superuser'
  setting 'cluster.remote.leader_cluster.seeds',
          { "\"${leaderCluster.get().getAllTransportPortURI().get(0)}\"" }, IGNORE_VALUE
  nameCustomization = { 'follow' }
}


tasks.register('leader-cluster', RestIntegTestTask) {
  mustRunAfter("precommit")
  systemProperty 'tests.target_cluster', 'leader'
}

tasks.register('follow-cluster', RestIntegTestTask) {
  dependsOn 'leader-cluster'
  useCluster leaderCluster
  systemProperty 'tests.target_cluster', 'follow'
  nonInputProperties.systemProperty 'tests.leader_host',
          "${-> leaderCluster.get().getAllHttpSocketURI().get(0)}"
}

tasks.register("followClusterRestartTest", StandaloneRestIntegTestTask) {
  dependsOn 'follow-cluster'
  useCluster leaderCluster
  useCluster followCluster

  systemProperty 'tests.rest.load_packaged', 'false'
  systemProperty 'tests.target_cluster', 'follow-restart'
  doFirst {
    followCluster.get().restart()
    nonInputProperties.systemProperty 'tests.leader_host', leaderCluster.map(c-> c.getAllHttpSocketURI().get(0))
    nonInputProperties.systemProperty 'tests.rest.cluster', followCluster.map(c -> c.getAllHttpSocketURI().join(","))
  }
}

tasks.named("check").configure { dependsOn "followClusterRestartTest" }

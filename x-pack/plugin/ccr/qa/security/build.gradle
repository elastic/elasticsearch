import org.elasticsearch.gradle.internal.test.RestIntegTestTask
import org.elasticsearch.gradle.testclusters.TestClusterValueSource
import org.elasticsearch.gradle.testclusters.TestClustersPlugin
import org.elasticsearch.gradle.testclusters.TestClustersRegistry
import org.elasticsearch.gradle.util.GradleUtils

import static org.elasticsearch.gradle.PropertyNormalization.IGNORE_VALUE

apply plugin: 'elasticsearch.internal-testclusters'
apply plugin: 'elasticsearch.standalone-rest-test'

dependencies {
  testImplementation(testArtifact(project(xpackModule('core'))))
  testImplementation project(path: xpackModule('ccr'))
  testImplementation project(':x-pack:plugin:ccr:qa')
}

def clusterPath = getPath()

def leadCluster = testClusters.register('leader-cluster') {
  testDistribution = 'DEFAULT'
  setting 'xpack.license.self_generated.type', 'trial'
  setting 'xpack.security.enabled', 'true'
  extraConfigFile 'roles.yml', file('leader-roles.yml')
  user username: "test_admin", role: "superuser"
  user username: "test_ccr", role: "ccruser"
}

testClusters.register('follow-cluster') {
  testDistribution = 'DEFAULT'
  Provider<TestClustersRegistry> serviceProvider = GradleUtils.getBuildService(
    project.gradle.sharedServices,
    TestClustersPlugin.REGISTRY_SERVICE_NAME
  )
  def leaderUris = project.getProviders().of(TestClusterValueSource.class) {
    it.parameters.path.set(clusterPath)
    it.parameters.clusterName.set("leader-cluster")
    it.parameters.service = serviceProvider
  }.map { it.AllTransportPortURI }

  setting 'cluster.remote.leader_cluster.seeds', {
    "\"${leaderUris.get().join(",")}\""
  }, IGNORE_VALUE
  setting 'xpack.license.self_generated.type', 'trial'
  setting 'xpack.security.enabled', 'true'
  setting 'xpack.monitoring.collection.enabled', 'false' // will be enabled by tests
  extraConfigFile 'roles.yml', file('follower-roles.yml')
  user username: "test_admin", role: "superuser"
  user username: "test_ccr", role: "ccruser"
}

tasks.register('leader-cluster', RestIntegTestTask) {
  mustRunAfter("precommit")
  systemProperty 'tests.target_cluster', 'leader'
}

def followerClusterTestTask = tasks.register('follow-cluster', RestIntegTestTask) {
  dependsOn 'leader-cluster'
  useCluster leadCluster
  systemProperty 'tests.target_cluster', 'follow'
  Provider<TestClustersRegistry> serviceProvider = GradleUtils.getBuildService(
    project.gradle.sharedServices,
    TestClustersPlugin.REGISTRY_SERVICE_NAME
  )
  def leaderUri = project.getProviders().of(TestClusterValueSource.class) {
    it.parameters.path.set(clusterPath)
    it.parameters.clusterName.set("leader-cluster")
    it.parameters.service = serviceProvider
  }.map { it.allHttpSocketURI.get(0) }

  nonInputProperties.systemProperty 'tests.leader_host', leaderUri
}

tasks.named("check").configure { dependsOn(followerClusterTestTask) }

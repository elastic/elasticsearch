import org.apache.tools.ant.filters.ReplaceTokens
import org.elasticsearch.gradle.internal.info.BuildParams

import java.nio.file.Paths

apply plugin: 'elasticsearch.internal-es-plugin'
apply plugin: 'elasticsearch.publish'
apply plugin: 'elasticsearch.internal-cluster-test'
apply plugin: 'elasticsearch.legacy-yaml-rest-test'
apply plugin: 'elasticsearch.legacy-java-rest-test'
apply plugin: 'elasticsearch.legacy-yaml-rest-compat-test'
apply plugin: 'elasticsearch.internal-test-artifact'

base {
  archivesName = 'x-pack-core'
}

esplugin {
  name 'x-pack-core'
  description 'Elasticsearch Expanded Pack Plugin - Core'
  classname 'org.elasticsearch.xpack.core.XPackPlugin'
  hasNativeController false
  requiresKeystore false
}

tasks.named("dependencyLicenses").configure {
  mapping from: /http.*/, to: 'httpclient' // pulled in by rest client
  mapping from: /commons-.*/, to: 'commons' // pulled in by rest client
}

configurations {
  signedCerts
  rootCert
}

dependencies {
  compileOnly project(":server")
  api project(':libs:elasticsearch-grok')
  api project(":libs:elasticsearch-ssl-config")
  api "org.apache.httpcomponents:httpclient:${versions.httpclient}"
  api "org.apache.httpcomponents:httpcore:${versions.httpcore}"
  api "org.apache.httpcomponents:httpcore-nio:${versions.httpcore}"
  api "org.apache.httpcomponents:httpasyncclient:${versions.httpasyncclient}"
  api "commons-logging:commons-logging:${versions.commonslogging}"
  api "org.apache.logging.log4j:log4j-1.2-api:${versions.log4j}"
  api "commons-codec:commons-codec:${versions.commonscodec}"
  testImplementation project(path: ':modules:aggregations')
  testImplementation project(path: ':modules:data-streams')

  // security deps
  api 'com.unboundid:unboundid-ldapsdk:6.0.3'
  api "com.nimbusds:nimbus-jose-jwt:9.23"

  implementation project(":x-pack:plugin:core:template-resources")

  testImplementation "org.elasticsearch:mocksocket:${versions.mocksocket}"
  testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:${versions.log4j}" // this might suffer from https://github.com/elastic/elasticsearch/issues/93714
  testImplementation "org.slf4j:slf4j-api:${versions.slf4j}"
  testImplementation project(path: ':modules:reindex')
  testImplementation project(path: ':modules:parent-join')
  testImplementation project(path: ':modules:lang-mustache')
  testImplementation project(path: ':modules:analysis-common')
  testImplementation project(path: ':modules:rest-root')
  testImplementation project(path: ':modules:health-shards-availability')
  // Needed for Fips140ProviderVerificationTests
  testCompileOnly('org.bouncycastle:bc-fips:1.0.2.4')

  testImplementation(project(':x-pack:license-tools')) {
    transitive = false
  }

  yamlRestTestImplementation project(':x-pack:plugin:core')
  javaRestTestImplementation(testArtifact(project(xpackModule('core'))))
  signedCerts fileTree("src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/nodes/ca-signed")
  rootCert files("src/test/resources/org/elasticsearch/xpack/security/transport/ssl/certs/simple/nodes/ca.crt")
}

ext.expansions = [
  'project.version': version
]

tasks.named("processResources").configure {
  from(sourceSets.main.resources.srcDirs) {
    // we need to have duplicate strategy here as
    // we cannot apply the filter on root level due
    // to wrong behaviour with binary files.
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    exclude '**/public.key'
    inputs.properties(expansions)
    filter("tokens" : expansions, ReplaceTokens.class)
  }
  String licenseKey = providers.systemProperty("license.key").getOrNull()
  if (licenseKey != null) {
    println "Using provided license key from ${licenseKey}"
  } else if (BuildParams.isSnapshotBuild()) {
    licenseKey = Paths.get(project.projectDir.path, 'snapshot.key')
  } else {
    throw new IllegalArgumentException('Property license.key must be set for release build')
  }
  File licenseKeyFile = rootProject.file(licenseKey)
  if (licenseKeyFile.exists() == false) {
    throw new IllegalArgumentException('license.key at specified path [' + licenseKey + '] does not exist')
  }
  from(licenseKeyFile) {
    rename { String filename -> 'public.key' }
  }
}

tasks.named("forbiddenPatterns").configure {
  exclude '**/*.key'
  exclude '**/*.p12'
  exclude '**/*.der'
  exclude '**/*.zip'
}

tasks.named('forbiddenApisMain').configure {
  signaturesFiles += files('forbidden/hasher-signatures.txt')
}


// make LicenseSigner available for testing signed licenses
sourceSets.test.resources {
  srcDir 'src/main/config'
}

tasks.named("thirdPartyAudit").configure {
  ignoreMissingClasses(
          //commons-logging optional dependencies
          'org.apache.avalon.framework.logger.Logger',
          'org.apache.log.Hierarchy',
          'org.apache.log.Logger',
          //commons-logging provided dependencies
          'javax.servlet.ServletContextEvent',
          'javax.servlet.ServletContextListener',
          'javax.jms.Message',
          // Optional dependency of nimbus-jose-jwt for handling Ed25519 signatures and ECDH with X25519 (RFC 8037)
          'com.google.crypto.tink.subtle.Ed25519Sign',
          'com.google.crypto.tink.subtle.Ed25519Sign$KeyPair',
          'com.google.crypto.tink.subtle.Ed25519Verify',
          'com.google.crypto.tink.subtle.X25519',
          'com.google.crypto.tink.subtle.XChaCha20Poly1305',
          // optional dependencies for nimbus-jose-jwt
          'org.bouncycastle.asn1.pkcs.PrivateKeyInfo',
          'org.bouncycastle.asn1.x509.AlgorithmIdentifier',
          'org.bouncycastle.asn1.x509.SubjectPublicKeyInfo',
          'org.bouncycastle.cert.X509CertificateHolder',
          'org.bouncycastle.cert.jcajce.JcaX509CertificateHolder',
          'org.bouncycastle.crypto.InvalidCipherTextException',
          'org.bouncycastle.crypto.engines.AESEngine',
          'org.bouncycastle.crypto.modes.GCMBlockCipher',
          'org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider',
          'org.bouncycastle.jce.provider.BouncyCastleProvider',
          'org.bouncycastle.openssl.PEMKeyPair',
          'org.bouncycastle.openssl.PEMParser',
          'org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter'
  )
}

restResources {
  restApi {
    include '*'
  }
}

testClusters.configureEach {
  testDistribution = 'default'
  setting 'xpack.security.enabled', 'true'
  setting 'xpack.license.self_generated.type', 'trial'
  //disabling ILM history as it disturbs testDSXpackUsage test
  setting 'indices.lifecycle.history_index_enabled', 'false'
  keystore 'bootstrap.password', 'x-pack-test-password'
  user username: "x_pack_rest_user", password: "x-pack-test-password"
}

if (BuildParams.inFipsJvm){
  // Test clusters run with security disabled
  tasks.named("javaRestTest").configure{enabled = false }
}

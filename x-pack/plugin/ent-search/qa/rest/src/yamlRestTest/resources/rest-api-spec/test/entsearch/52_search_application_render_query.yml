setup:
  - do:
      indices.create:
        index: test-search-index1
        body:
          settings:
            index:
              number_of_shards: 1
              number_of_replicas: 0

  - do:
      indices.create:
        index: test-search-index2
        body:
          settings:
            index:
              number_of_shards: 1
              number_of_replicas: 0

  - do:
      indices.create:
        index: test-index
        body:
          settings:
            index:
              number_of_shards: 1
              number_of_replicas: 0

  - do:
      search_application.put:
        name: test-search-application
        body:
          indices: [ "test-search-index1", "test-search-index2" ]
          analytics_collection_name: "test-analytics"
          template:
            script:
              source:
                query:
                  term:
                    "{{field_name}}": "{{field_value}}"
              params:
                field_name: field1
                field_value: value1

  - do:
      search_application.put:
        name: test-search-application-with-list
        body:
          indices: [ "test-search-index1", "test-search-index2" ]
          template:
            script:
              source: "{ \"query\": { \"multi_match\":{ \"query\": \"{{query_string}}\", \"fields\": [{{#text_fields}}\"{{name}}^{{boost}}\",{{/text_fields}}] } } }"
              params:
                query_string: "elastic"
                text_fields:
                  - name: field1
                    boost: 1
                  - name: field2
                    boost: 2
                  - name: field3
                    boost: 3
              lang: "mustache"

  - do:
      search_application.put:
        name: test-search-application-with-list-invalid
        body:
          indices: [ "test-search-index1", "test-search-index2" ]
          template:
            script:
              source: "{ \"query\": { \"multi_match\":{ \"query\": \"{{query_string}}\", \"fields\": [{{#text_fields}}\"{{name}}^{{boost}}\"{{/text_fields}}] } } }"
              params:
                query_string: "elastic"
                text_fields:
                  - name: field1
                    boost: 1
                  - name: field2
                    boost: 2
                  - name: field3
                    boost: 3
              lang: "mustache"

  - do:
      index:
        index: test-search-index1
        id: doc1
        body:
          field1: value1
          field2: value1
        refresh: true

  - do:
      index:
        index: test-search-index2
        id: doc2
        body:
          field1: value1
          field3: value3
        refresh: true

---
teardown:
  - do:
      search_application.delete:
        name: test-search-application
        ignore: 404

  - do:
      search_application.delete:
        name: test-search-application-with-list
        ignore: 404

  - do:
      search_application.delete:
        name: test-search-application-with-list-invalid
        ignore: 404

  - do:
      indices.delete:
        index: test-search-index1
        ignore: 404

  - do:
      indices.delete:
        index: test-search-index2
        ignore: 404

  - do:
      indices.delete:
        index: test-index
        ignore: 404

---
"Render Query for Search Application with default parameters":

  - do:
      search_application.render_query:
        name: test-search-application

  - match: {
    query: {
      term: {
        field1: {
          value: "value1"
        }
      }
    }
  }

---
"Render query for search application overriding part of the parameters":

  - do:
      search_application.render_query:
        name: test-search-application
        body:
          params:
            field_name: field2


  - match: {
    query: {
      term: {
        field2: {
          value: "value1"
        }
      }
    }
  }

---
"Render query for search application overriding all parameters":

  - do:
      search_application.render_query:
        name: test-search-application
        body:
          params:
            field_name: field3
            field_value: value3


  - match: {
    query: {
      term: {
        field3: {
          value: "value3"
        }
      }
    }
  }

---
"Render query for search application with a list of parameters":

  - do:
      search_application.render_query:
        name: test-search-application-with-list
        body:
          params:
            query_string: value3
            text_fields:
              - name: field1
                boost: 1
              - name: field2
                boost: 2
              - name: field3
                boost: 3

  - match: {
    query: {
      multi_match: {
        query: "value3",
        fields: [
          "field1^1.0",
          "field2^2.0",
          "field3^3.0"
        ]
      }
    }
  }

---
"Render query for search application - not found":

  - do:
      catch: "missing"
      search_application.render_query:
        name: nonexisting-test-search-application
        body:
          params:
            field_name: field3
            field_value: value3

---
"Render search application query fails for unprivileged user":
  - skip:
      features: headers

  - do:
      catch: unauthorized
      headers: { Authorization: "Basic ZW50c2VhcmNoLXVucHJpdmlsZWdlZDplbnRzZWFyY2gtdW5wcml2aWxlZ2VkLXVzZXI=" }  # unprivileged
      search_application.render_query:
        name: test-search-application
        body:
          params:
            field_value: puggles

---
"Render search application query fails on invalid rendered JSON":
  - do:
      catch: "bad_request"
      search_application.render_query:
        name: test-search-application-with-list-invalid
        body:
          params:
            query_string: value3
            text_fields:
              - name: field1
                boost: 1
              - name: field2
                boost: 2
              - name: field3
                boost: 3

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */
package org.elasticsearch.compute.aggregation;

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


class SimpleLinearRegressionWithTimeseries {
    long count;
    double sumVal;
    long sumTs;
    double sumTsVal;
    long sumTsSq;

    SimpleLinearRegressionWithTimeseries() {
        this.count = 0;
        this.sumVal = 0.0;
        this.sumTs = 0;
        this.sumTsVal = 0.0;
        this.sumTsSq = 0;
    }

    void add(long ts, double val) {
        count++;
        sumVal += val;
        sumTs += ts;
        sumTsVal += ts * val;
        sumTsSq += ts * ts;
    }

    double slope() {
        if (count <= 1) {
            return Double.NaN;
        }
        double numerator = count * sumTsVal - sumTs * sumVal;
        double denominator = count * sumTsSq - sumTs * sumTs;
        if (denominator == 0) {
            return Double.NaN;
        }
        return numerator / denominator;
    }

    double intercept() {
        if (count == 0) {
            return 0.0; // or handle as needed
        }
        return (sumVal - slope() * sumTs) / count;
    }

}

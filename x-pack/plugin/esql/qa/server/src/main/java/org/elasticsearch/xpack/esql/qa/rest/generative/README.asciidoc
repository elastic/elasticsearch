= ES|QL Generative Tests

These tests generate random queries and execute them.

The intention is not to test the single commands, but rather to test how ES|QL query engine
(parser, optimizers, query layout, compute) manages very complex queries.

The test workflow is the following:

1. Generate a source command (eg. `FROM idx`)
2. Execute it
3. Check the result
4. Based on the previous query output, generate a pipe command (eg. `| EVAL foo = to_lower(bar))`
5. Append the command to the query and execute it
6. Check the result
7. If the query is less than N commands (see `GenerativeRestTest.MAX_DEPTH)`, go to point `4`

This workflow is executed M times (see `GenerativeRestTest.ITERATIONS`)

The result check happens at two levels:

* query success/failure - If the query fails:
  ** If the error is in `GenerativeRestTest.ALLOWED_ERRORS`, ignore it and start with next iteration.
  ** Otherwise throw an assertion error
* check result correctness - this is delegated to last executed command generator

== Implementing your own command generator

If you create a new command, we strongly recommend you to implement a command generator for it, so that it is tested
by the generative tests.

To do so, see the documentation in the
`x-pack/plugin/esql/qa/testFixtures/src/main/java/org/elasticsearch/xpack/esql/generator/README.asciidoc` file.




// Conversion-specific tests

convertToBoolean
required_capability: casting_operator
ROW zero=0::boolean, one=1::bool
;

 zero:boolean  | one:boolean
false          |true
;

convertToInteger
required_capability: casting_operator
ROW zero="0"::integer, one="1"::int
;

 zero:integer  | one:integer
0              |1
;

convertToIP
required_capability: casting_operator
ROW ip="1.1.1.1"::ip
;

 ip:ip       
1.1.1.1        
;

convertToLong
required_capability: casting_operator
ROW long="-1"::long
;

long:long
-1
;

convertToLongWithWarning
required_capability: casting_operator
ROW long="1.1.1.1"::long
;
warningRegex:Line 1:10: evaluation of \[\\\"1.1.1.1\\\"::long\] failed, treating result as null. Only first 20 failures recorded.
warningRegex:Line 1:10: org.elasticsearch.xpack.(esql.core|ql).InvalidArgumentException: Cannot parse number \[1.1.1.1\]

long:long
null
;

convertToDouble
required_capability: casting_operator
ROW zero="0"::double
;

 zero:double
0.0
;

convertToString
required_capability: casting_operator
ROW one=1::keyword, two=2::text, three=3::string
;

 one:keyword   | two:keyword   | three:keyword
1              |2              |3
;

convertToDatetime
required_capability: casting_operator
ROW date="1985-01-01T00:00:00Z"::datetime, zero=0::datetime
;

 date:datetime          | zero:datetime
1985-01-01T00:00:00.000Z|1970-01-01T00:00:00.000Z
;

convertToVersion
required_capability: casting_operator
ROW ver="1.2.3"::version
;

 ver:version
1.2.3
;

convertToUnsignedLong
required_capability: casting_operator
ROW zero="0"::unsigned_long, two=abs(-2)::UnsigneD_LOng
;

 zero:unsigned_long | two:unsigned_long
0                   |2
;

convertToGeoPoint
required_capability: casting_operator
ROW gp="POINT(0 0)"::geo_point
;

 gp:geo_point
POINT (0.0 0.0)
;

convertToGeoShape
required_capability: casting_operator
ROW gs="POINT(0 0)"::geo_shape
;

 gs:geo_shape
POINT (0.0 0.0)
;

convertToCartesianPoint
required_capability: casting_operator
ROW cp="POINT(0 0)"::cartesian_point
;

 cp:cartesian_point
POINT (0.0 0.0)
;

convertToCartesianShape
required_capability: casting_operator
ROW cs="POINT(0 0)"::cartesian_shape
;

 cs:cartesian_shape
POINT (0.0 0.0)
;

convertChained
required_capability: casting_operator
ROW one=1::STRING::LONG::BOOL
;

one:boolean
true
;

convertWithIndexMultipleConversionsInSameExpressionAndConversionInFiltering
required_capability: casting_operator
 FROM employees
| EVAL en_str=emp_no::STRING, bd=ABS(birth_date::LONG)::STRING
| KEEP en_str, emp_no, bd, birth_date
| WHERE ABS(birth_date::LONG) < 176169600000
| SORT emp_no
;

 en_str:keyword| emp_no:integer| bd:keyword    | birth_date:datetime       
10092          |10092          |164246400000   |1964-10-18T00:00:00.000Z
10093          |10093          |175392000000   |1964-06-11T00:00:00.000Z
10095          |10095          |157593600000   |1965-01-03T00:00:00.000Z
;

convertWithBoolExpressionAndQualifiedName
required_capability: casting_operator
 FROM employees
| EVAL neg = (NOT still_hired)::string, sf = ROUND(height.scaled_float::double, 2)
| KEEP emp_no, still_hired, neg, sf
| SORT emp_no
| WHERE neg == "false"
| LIMIT 3
;

 emp_no:integer| still_hired:boolean | neg:keyword   | sf:double
10001          |true                 |false          |2.03
10002          |true                 |false          |2.08
10004          |true                 |false          |1.78
;

docsCastOperator
required_capability: casting_operator
//tag::docsCastOperator[]
ROW ver = CONCAT(("0"::INT + 1)::STRING, ".2.3")::VERSION
//end::docsCastOperator[]
;

//tag::docsCastOperator-result[]
ver:version
1.2.3
//end::docsCastOperator-result[]
;

mixedNumericTypesInLiterals
required_capability: mixed_numeric_types_in_coalesce
from employees
| where languages.long in (1, 2.0, null)
| keep emp_no, languages
| sort emp_no
| limit 10
;

emp_no:integer | languages:integer
10001          | 2
10005          | 1
10008          | 2
10009          | 1
10013          | 1
10016          | 2
10017          | 2
10018          | 2
10019          | 1
10033          | 1
;

mixedNumericTypesInFields
required_capability: mixed_numeric_types_in_coalesce
from employees
| where languages in (7.0, height)
| keep emp_no, languages, height
| sort emp_no
;

emp_no:integer | languages:integer | height:double
10037          | 2                 | 2.0
;

//
// CSV spec for FUSE command
//

simpleFuse
required_capability: fork_v9
required_capability: fuse_v4
required_capability: match_operator_colon

FROM employees METADATA _id, _index, _score
| FORK ( WHERE emp_no:10001 )
       ( WHERE emp_no:10002 )
| FUSE
| EVAL _score = round(_score, 4)
| KEEP _score, _fork, emp_no
| SORT _score, _fork, emp_no
;

_score:double | _fork:keyword | emp_no:integer
0.0164        | fork1         | 10001
0.0164        | fork2         | 10002
;

fuseWithMatchAndScore
required_capability: fork_v9
required_capability: fuse_v4
required_capability: match_operator_colon

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
| FUSE
| SORT _score DESC, _id, _index
| EVAL _fork = mv_sort(_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, _fork, _id
;

_score:double | _fork:keyword  | _id:keyword
0.03279       | [fork1, fork2] | 4
0.01613       | fork1          | 56
0.01613       | fork2          | 60
0.01587       | fork2          | 1
0.01587       | fork1          | 26
;

fuseWithDisjunctionAndPostFilter
required_capability: fork_v9
required_capability: fuse_v4
required_capability: match_operator_colon

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" OR author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
| FUSE
| SORT _score DESC, _id, _index
| EVAL _fork = mv_sort(_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, _fork, _id
| WHERE _score > 0.014
;

_score:double | _fork:keyword  | _id:keyword
0.03252       | [fork1, fork2] | 60
0.032         | [fork1, fork2] | 1
0.01639       | fork2          | 4
0.01587       | fork1          | 40
;

fuseWithStats
required_capability: fork_v9
required_capability: fuse_v4
required_capability: match_operator_colon

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
       ( WHERE author:"Ursula K. Le Guin" AND title:"short stories" | SORT _score, _id DESC | LIMIT 3)
| FUSE
| STATS count_fork=COUNT(*) BY _fork
| SORT _fork
;

count_fork:long | _fork:keyword
3               | fork1
3               | fork2
1               | fork3
;

fuseWithMultipleForkBranches
required_capability: fork_v9
required_capability: fuse_v4
required_capability: match_operator_colon

FROM books METADATA _id, _index, _score
| FORK (WHERE author:"Keith Faulkner" AND qstr("author:Rory or author:Beverlie") | SORT _score, _id DESC | LIMIT 3)
       (WHERE author:"Ursula K. Le Guin" | SORT _score, _id DESC | LIMIT 3)
       (WHERE title:"Tolkien" AND author:"Tolkien" AND year > 2000 AND mv_count(author) == 1 | SORT _score, _id DESC | LIMIT 3)
       (WHERE match(author, "Keith Faulkner") AND match(author, "Rory Tyger") | SORT _score, _id DESC | LIMIT 3)
| FUSE
| SORT _score DESC, _id, _index
| EVAL _fork = mv_sort(_fork)
| EVAL _score = round(_score, 4)
| EVAL title = trim(substring(title, 1, 20))
| KEEP _score, author, title, _fork
;

_score:double | author:keyword                    | title:keyword        | _fork:keyword
0.0328        | [Keith Faulkner, Rory Tyger]      | Pop! Went Another Ba | [fork1, fork4]
0.0164        | J.R.R. Tolkien                    | Letters of J R R Tol | fork3
0.0164        | Ursula K. Le Guin                 | The wind's twelve qu | fork2
0.0161        | [Beverlie Manson, Keith Faulkner] | Rainbow's End: A Mag | fork1
0.0161        | Ursula K. Le Guin                 | The Word For World i | fork2
0.0159        | Ursula K. Le Guin                 | The Dispossessed     | fork2
;

fuseWithSemanticSearch
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM semantic_text METADATA _id, _score, _index
| FORK ( WHERE semantic_text_field:"something" | SORT _score DESC | LIMIT 2)
       ( WHERE semantic_text_field:"something else" | SORT _score DESC | LIMIT 2)
| FUSE
| SORT _score DESC, _id, _index
| EVAL _score = round(_score, 4)
| EVAL _fork = mv_sort(_fork)
| KEEP _fork, _score, _id, semantic_text_field
;

_fork:keyword  | _score:double | _id:keyword | semantic_text_field:keyword
[fork1, fork2] | 0.0328        | 2           | all we have to decide is what to do with the time that is given to us
[fork1, fork2] | 0.0323        | 3           | be excellent to each other
;

fuseWithSimpleRrf
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
| FUSE rrf
| SORT _score DESC, _id, _index
| EVAL _fork = mv_sort(_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, _fork, _id
;

_score:double | _fork:keyword  | _id:keyword
0.03279       | [fork1, fork2] | 4
0.01613       | fork1          | 56
0.01613       | fork2          | 60
0.01587       | fork2          | 1
0.01587       | fork1          | 26
;

fuseWithRrfAndRankConstant
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
| FUSE rrf WITH {"rank_constant": 50 }
| SORT _score DESC, _id, _index
| EVAL _fork = mv_sort(_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, _fork, _id
;

_score:double | _fork:keyword  | _id:keyword
0.03922       | [fork1, fork2] | 4
0.01923       | fork1          | 56
0.01923       | fork2          | 60
0.01887       | fork2          | 1
0.01887       | fork1          | 26
;

fuseWithRrfAndWeights
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
| FUSE rrf WITH {"weights": { "fork1": 0.3, "fork2": 0.7 } }
| SORT _score DESC, _id, _index
| EVAL _fork = mv_sort(_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, _fork, _id
;

_score:double | _fork:keyword  | _id:keyword
0.01639       | [fork1, fork2] | 4
0.01129       | fork2          | 60
0.01111       | fork2          | 1
0.00484       | fork1          | 56
0.00476       | fork1          | 26
;

fuseWithRrfRankConstantAndWeights
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _score, _index
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3)
| FUSE rrf WITH {"rank_constant": 60, "weights": { "fork1": 0.3, "fork2": 0.7 } }
| SORT _score DESC, _id, _index
| EVAL _fork = mv_sort(_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, _fork, _id
;

_score:double | _fork:keyword  | _id:keyword
0.01639       | [fork1, fork2] | 4
0.01129       | fork2          | 60
0.01111       | fork2          | 1
0.00484       | fork1          | 56
0.00476       | fork1          | 26
;

fuseWithRrfAndScoreColumn
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 | EVAL my_score = _score | DROP _score)
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 | EVAL my_score = _score | DROP _score)
| FUSE rrf SCORE by my_score
| SORT my_score DESC, _id, _index
| EVAL _fork = mv_sort(_fork)
| EVAL my_score = round(my_score, 5)
| KEEP my_score, _fork, _id
;

my_score:double | _fork:keyword  | _id:keyword
0.03279       | [fork1, fork2] | 4
0.01613       | fork1          | 56
0.01613       | fork2          | 60
0.01587       | fork2          | 1
0.01587       | fork1          | 26
;

fuseWithRrfAndDiscriminatorColumn
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3)
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3)
| EVAL new_fork = _fork
| DROP _fork
| FUSE rrf GROUP BY new_fork
| SORT _score DESC, _id, _index
| EVAL new_fork = mv_sort(new_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, new_fork, _id
;

_score:double | new_fork:keyword  | _id:keyword
0.03279       | [fork1, fork2]    | 4
0.01613       | fork1             | 56
0.01613       | fork2             | 60
0.01587       | fork2             | 1
0.01587       | fork1             | 26
;

fuseWithRrfAndKeyColumns
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 | EVAL new_id = CONCAT(_id, _id) | DROP _id)
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 | EVAL new_id = CONCAT(_id, _id) | DROP _id)
| EVAL new_index = "lalala"
| FUSE rrf KEY BY new_id, new_index
| SORT _score DESC, new_id, new_index
| EVAL _fork = mv_sort(_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, _fork, new_id
;

_score:double | _fork:keyword  | new_id:keyword
0.03279       | [fork1, fork2] | 44
0.01613       | fork1          | 5656
0.01613       | fork2          | 6060
0.01587       | fork2          | 11
0.01587       | fork1          | 2626
;


fuseWithRrfAllOptionsScoreKeyAndGroupColumns
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3
        | EVAL new_id = CONCAT(_id, _id) | DROP _id)
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 | EVAL new_id = CONCAT(_id, _id) | DROP _id)
| EVAL new_fork = CASE (_fork == "fork1", "A", "B")
| EVAL new_score = _score * 2
| DROP _fork, _score
| FUSE rrf SCORE BY new_score KEY BY new_id GROUP BY new_fork WITH {"rank_constant": 60, "weights": { "fork1": 0.3, "fork2": 0.7 } }
| SORT new_score DESC, new_id
| EVAL new_fork = mv_sort(new_fork)
| EVAL new_score = round(new_score, 5)
| KEEP new_score, new_fork, new_id
;

new_score:double | new_fork:keyword | new_id:keyword
0.03279          | [A, B]           | 44
0.01613          | A                | 5656
0.01613          | B                | 6060
0.01587          | B                | 11
0.01587          | A                | 2626
;

fuseWithSimpleLinear
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
| FUSE linear
| SORT _score DESC, _id, _index
| EVAL _fork = mv_sort(_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, _fork, _id
;

_score:double | _fork:keyword  | _id:keyword
2.44669       | [fork1, fork2] | 4
2.2543        | fork1          | 26
2.10316       | fork1          | 56
0.97056       | fork2          | 1
0.88365       | fork2          | 60
;

fuseWithLinearAndL2Norm

required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
| FUSE linear WITH {"normalizer": "l2_norm"}
| SORT _score DESC, _id, _index
| EVAL _fork = mv_sort(_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, _fork, _id
;

_score:double | _fork:keyword  | _id:keyword
0.93394       | [fork1, fork2] | 4
0.67019       | fork2          | 1
0.62834       | fork1          | 26
0.61018       | fork2          | 60
0.58621       | fork1          | 56
;

fuseWithLinearAndMinMax

required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
| FUSE linear WITH {"normalizer": "minmax"}
| SORT _score DESC, _id, _index
| EVAL _fork = mv_sort(_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, _fork, _id
;

_score:double | _fork:keyword  | _id:keyword
1.0           | fork2          | 1
1.0           | fork1          | 26
0.7577        | fork2          | 60
0.63972       | fork1          | 56
0.0           | [fork1, fork2] | 4
;

fuseWithLinearAndWeights
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
| FUSE linear WITH {"weights": { "fork1": 0.3, "fork2": 0.7 }}
| SORT _score DESC, _id, _index
| EVAL _fork = mv_sort(_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, _fork, _id
;

_score:double | _fork:keyword  | _id:keyword
0.97876       | [fork1, fork2] | 4
0.67939       | fork2          | 1
0.67629       | fork1          | 26
0.63095       | fork1          | 56
0.61856       | fork2          | 60
;

fuseWithLinearAndPartialWeights
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
| FUSE linear WITH {"weights": { "fork1": 0.3, "inexistent": 0.7 }}
| SORT _score DESC, _id, _index
| EVAL _fork = mv_sort(_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, _fork, _id
;

_score:double | _fork:keyword  | _id:keyword
1.16233       | [fork1, fork2] | 4
0.97056       | fork2          | 1
0.88365       | fork2          | 60
0.67629       | fork1          | 26
0.63095       | fork1          | 56
;

fuseWithLinearWeightsAndMinMax
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 )
| FUSE linear WITH {"normalizer": "minmax", "weights": { "fork1": 0.3, "fork2": 0.7 }}
| SORT _score DESC, _id, _index
| EVAL _fork = mv_sort(_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, _fork, _id
;

_score:double | _fork:keyword  | _id:keyword
0.7           | fork2          | 1
0.53039       | fork2          | 60
0.3           | fork1          | 26
0.19191       | fork1          | 56
0.0           | [fork1, fork2] | 4
;


fuseWithLinearAndScoreColumn
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 | EVAL my_score = _score | DROP _score)
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 | EVAL my_score = _score | DROP _score)
| FUSE linear SCORE BY my_score
| SORT my_score DESC, _id, _index
| EVAL _fork = mv_sort(_fork)
| EVAL my_score = round(my_score, 5)
| KEEP my_score, _fork, _id
;

my_score:double | _fork:keyword  | _id:keyword
2.44669         | [fork1, fork2] | 4
2.2543          | fork1          | 26
2.10316         | fork1          | 56
0.97056         | fork2          | 1
0.88365         | fork2          | 60
;


fuseWithLinearAndDiscriminatorColumn
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _index, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3)
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3)
| EVAL new_fork = _fork
| DROP _fork
| FUSE linear GROUP BY new_fork
| SORT _score DESC, _id, _index
| EVAL new_fork = mv_sort(new_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, new_fork, _id
;

_score:double | new_fork:keyword | _id:keyword
2.44669       | [fork1, fork2]   | 4
2.2543        | fork1            | 26
2.10316       | fork1            | 56
0.97056       | fork2            | 1
0.88365       | fork2            | 60
;

fuseWithLinearAndKeyColumns
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3 | EVAL new_id = CONCAT(_id, _id) | DROP _id)
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 | EVAL new_id = CONCAT(_id, _id) | DROP _id)
| EVAL new_index = "lalala"
| FUSE LINEAR KEY BY new_id, new_index
| SORT _score DESC, new_id, new_index
| EVAL _fork = mv_sort(_fork)
| EVAL _score = round(_score, 5)
| KEEP _score, _fork, new_id
;

_score:double | _fork:keyword  | new_id:keyword
2.44669       | [fork1, fork2] | 44
2.2543        | fork1          | 2626
2.10316       | fork1          | 5656
0.97056       | fork2          | 11
0.88365       | fork2          | 6060
;

fuseWithLinearAllOptionsScoreGroupAndKeyColumns
required_capability: fork_v9
required_capability: fuse_v4
required_capability: semantic_text_field_caps
required_capability: metadata_score

FROM books METADATA _id, _score
| FORK ( WHERE title:"Tolkien" | SORT _score, _id DESC | LIMIT 3
        | EVAL new_id = CONCAT(_id, _id) | DROP _id)
       ( WHERE author:"Tolkien" | SORT _score, _id DESC | LIMIT 3 | EVAL new_id = CONCAT(_id, _id) | DROP _id)
| EVAL new_fork = CASE (_fork == "fork1", "A", "B")
| EVAL new_score = _score * 2
| DROP _fork, _score
| FUSE LINEAR SCORE BY new_score KEY BY new_id GROUP BY new_fork WITH {"normalizer": "minmax", "weights": { "fork1": 0.3, "fork2": 0.7 }}
| SORT new_score DESC, new_id
| EVAL new_fork = mv_sort(new_fork)
| EVAL new_score = round(new_score, 5)
| KEEP new_score, new_fork, new_id
;

new_score:double | new_fork:keyword | new_id:keyword
1.0              | B                | 11
1.0              | A                | 2626
0.7577           | B                | 6060
0.63972          | A                | 5656
0.0              | [A, B]           | 44
;


fuseWithRowAndRRF

required_capability: fuse_v4

ROW my_score = [0, 1, 2, 3, 4]::double, _index = "my_index", _fork = "foo"
| MV_EXPAND my_score
| EVAL _id = CONCAT("id_", my_score::string)
| SORT my_score
| LIMIT 10
| FUSE RRF SCORE BY my_score
| SORT my_score DESC
| EVAL my_score = round(my_score, 5)
| KEEP _id, my_score
;

_id:keyword | my_score:double
id_0.0      | 0.01639
id_1.0      | 0.01613
id_2.0      | 0.01587
id_3.0      | 0.01563
id_4.0      | 0.01538
;

fuseWithRowLinearAndWeights

required_capability: fuse_v4

ROW my_score = [0, 1, 2, 3, 4]::double, _index = "my_index", _fork = "foo"
| MV_EXPAND my_score
| EVAL _id = CONCAT("id_", my_score::string)
| SORT my_score
| LIMIT 10
| FUSE LINEAR SCORE BY my_score WITH { "weights": { "foo": 2 } }
| SORT my_score DESC
| KEEP _id, my_score
;

_id:keyword | my_score:double
id_4.0      | 8.0
id_3.0      | 6.0
id_2.0      | 4.0
id_1.0      | 2.0
id_0.0      | 0.0
;

fuseWithRowLinearAndMinMax

required_capability: fuse_v4

ROW my_score = [0, 1, 2, 3, 4]::double, _index = "my_index", _fork = "foo"
| MV_EXPAND my_score
| EVAL _id = CONCAT("id_", my_score::string)
| SORT my_score
| LIMIT 10
| FUSE LINEAR SCORE BY my_score WITH { "normalizer": "minmax" }
| EVAL my_score = round(my_score, 5)
| SORT my_score DESC
| KEEP _id, my_score
;

_id:keyword | my_score:double
id_4.0      | 1.0
id_3.0      | 0.75
id_2.0      | 0.5
id_1.0      | 0.25
id_0.0      | 0.0
;

fuseWithRowLinearAndL2Norm

required_capability: fuse_v4

ROW my_score = [0, 1, 2, 3, 4]::double, _index = "my_index", _fork = "foo"
| MV_EXPAND my_score
| EVAL _id = CONCAT("id_", my_score::string)
| SORT my_score
| LIMIT 10
| FUSE LINEAR SCORE BY my_score WITH { "normalizer": "l2_norm" }
| EVAL my_score = round(my_score, 5)
| SORT my_score DESC
| KEEP _id, my_score
;

_id:keyword | my_score:double
id_4.0      | 0.7303
id_3.0      | 0.54772
id_2.0      | 0.36515
id_1.0      | 0.18257
id_0.0      | 0.0
;

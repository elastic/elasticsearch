simpleGrok
row a = "foo bar" | grok a "%{WORD:b} .*";

a:keyword | b:keyword
foo bar   | foo      
;


simpleGrokNoMatch
row a = "foo bar" | grok a "%{NUMBER:b:int} .*";

a:keyword | b:integer  
foo bar   | null       
;


shadowing
FROM employees
| KEEP first_name, last_name
| WHERE last_name == "Facello"
| EVAL left = "left", full_name = concat(first_name, " ", last_name) , last_name = "last_name", right = "right"
| GROK full_name "%{WORD} %{WORD:last_name}"
;

first_name:keyword | left:keyword | full_name:keyword | right:keyword | last_name:keyword
Georgi             | left         |    Georgi Facello | right         | Facello
;

shadowingSubfields
FROM addresses
| KEEP city.country.continent.planet.name, city.country.name, city.name
| GROK city.name "%{WORD:city.country.continent.planet.name} %{WORD}"
| SORT city.name
;

city.country.name:keyword | city.name:keyword | city.country.continent.planet.name:keyword
Netherlands               | Amsterdam         | null
United States of America  | San Francisco     | San
Japan                     | Tokyo             | null
;

shadowingSelf
FROM employees
| KEEP first_name, last_name
| WHERE last_name == "Facello"
| EVAL left = "left", name = concat(first_name, "1 ", last_name), right = "right"
| GROK name "%{WORD:name} %{WORD}"
;

first_name:keyword | last_name:keyword | left:keyword | right:keyword | name:keyword
Georgi             | Facello           | left         | right         | Georgi1
;

shadowingMulti
FROM employees
| KEEP first_name, last_name
| WHERE last_name == "Facello"
| EVAL left = "left", foo = concat(first_name, "1 ", first_name, "2 ", last_name) , middle = "middle", bar = "bar", right = "right"
| GROK foo "%{WORD:bar} %{WORD:first_name} %{WORD:last_name_again}"
;

last_name:keyword | left:keyword | foo:keyword             | middle:keyword | right:keyword | bar:keyword  | first_name:keyword | last_name_again:keyword
Facello           | left         | Georgi1 Georgi2 Facello | middle         | right         | Georgi1      | Georgi2            | Facello
;

shadowingInternal
FROM addresses
| KEEP city.name, zip_code
| GROK zip_code "%{WORD:zip_parts} %{WORD:zip_parts}"
| SORT city.name
;

city.name:keyword | zip_code:keyword | zip_parts:keyword
Amsterdam         | 1016 ED          | ["1016", "ED"]
San Francisco     | CA 94108         | ["CA", "94108"]
Tokyo             | 100-7014         | null
;

shadowingWhenPushedDownPastRename
required_capability: fixed_pushdown_past_project
ROW city = "Zürich", long_city_name = "Zürich, the largest city in Switzerland"
| RENAME city AS c
| GROK long_city_name "Zürich, the %{WORD:city} %{WORD:city} %{WORD:city} %{WORD:city}"
;

c:keyword | long_city_name:keyword                        | city:keyword
Zürich    | Zürich, the largest city in Switzerland       | ["largest", "city", "in", "Switzerland"]
;

shadowingWhenPushedDownPastRename2
required_capability: fixed_pushdown_past_project
ROW city = "Zürich", long_city_name = "Zürich, the largest city in Switzerland"
| RENAME city AS c
| GROK long_city_name "Zürich, the %{WORD:city} %{WORD:foo} %{WORD:city} %{WORD:foo}"
;

c:keyword | long_city_name:keyword                        | city:keyword       | foo:keyword
Zürich    | Zürich, the largest city in Switzerland       | ["largest", "in"]  | ["city", "Switzerland"]
;

shadowingWhenPushedDownPastRename3
required_capability: fixed_pushdown_past_project
ROW city = "Zürich", long_city_name = "Zürich, the largest city in Switzerland"
| RENAME long_city_name AS c
| GROK c "Zürich, the %{WORD:long_city_name} %{WORD:long_city_name} %{WORD:long_city_name} %{WORD:long_city_name}"
;

city:keyword | c:keyword                               | long_city_name:keyword
Zürich       | Zürich, the largest city in Switzerland | ["largest", "city", "in", "Switzerland"]
;

complexPattern
ROW a = "1953-01-23T12:15:00Z 127.0.0.1 some.email@foo.com 42" 
| GROK a "%{TIMESTAMP_ISO8601:date} %{IP:ip} %{EMAILADDRESS:email} %{NUMBER:num:int}" 
| KEEP date, ip, email, num;

date:keyword          | ip:keyword    | email:keyword       | num:integer
1953-01-23T12:15:00Z  | 127.0.0.1     | some.email@foo.com  | 42
;


typeConversions
row a = "12 15.5 15.6 true" | grok a "%{NUMBER:b:int} %{NUMBER:c:float} %{NUMBER:d:double} %{WORD:e:boolean}";

a:keyword          | b:integer  | c:double  | d:double  | e:boolean
12 15.5 15.6 true  |12          | 15.5      | 15.6      | true
;


manualPattern
row a = "asdf bar" | grok a "(?<b>[0-9a-z]{4,11}) (?<c>[0-9a-z]{1,11})";

a:keyword | b:keyword | c:keyword  
asdf bar  | asdf      | bar
;


manualPatternNoMatch
row a = "foo bar" | grok a "(?<b>[0-9a-z]{4,11}) (?<c>[0-9a-z]{1,11})";

a:keyword | b:keyword | c:keyword  
foo bar   | null      | null
;


evalGrok
from employees | eval full_name = concat(first_name, " ", last_name) | grok full_name "%{WORD:a} %{WORD:b}" | sort emp_no asc | keep full_name, a, b | limit 3;

full_name:keyword | a:keyword | b:keyword
Georgi Facello    | Georgi    | Facello
Bezalel Simmel    | Bezalel   | Simmel 
Parto Bamford     | Parto     | Bamford
;


grokExpression
from employees | grok concat(first_name, " ", last_name) "%{WORD:a} %{WORD:b}" | sort emp_no asc | keep a, b | limit 3;

a:keyword | b:keyword
Georgi    | Facello
Bezalel   | Simmel 
Parto     | Bamford
;


evalGrokSort
from employees | eval full_name = concat(first_name, " ", last_name) | grok full_name "%{WORD:a} %{WORD:b}" | sort a asc | keep full_name, a, b | limit 3;

full_name:keyword     | a:keyword    | b:keyword
Alejandro McAlpine    | Alejandro    | McAlpine
Amabile Gomatam       | Amabile      | Gomatam 
Anneke Preusig        | Anneke       | Preusig
;


grokStats
from employees | eval x = concat(gender, " foobar") | grok x "%{WORD:a} %{WORD:b}" | stats n = max(emp_no) by a | keep a, n | sort a asc;

a:keyword  | n:integer
F          | 10100    
M          | 10097       
null       | 10019
;


nullOnePattern
from employees | where emp_no == 10030 | grok first_name "%{WORD:a}" | keep first_name, a;

first_name:keyword | a:keyword
null               | null     
;


nullTwoPatterns
from employees | where emp_no == 10030 | grok first_name "%{WORD:a} %{WORD:b}" | keep first_name, a, b;

first_name:keyword | a:keyword | b:keyword
null               | null      | null
;


overwriteName
from employees | sort emp_no asc | eval full_name = concat(first_name, " ", last_name) | grok full_name "%{WORD:emp_no} %{WORD:b}" | keep full_name, emp_no, b | limit 3;

full_name:keyword | emp_no:keyword | b:keyword
Georgi Facello    | Georgi         | Facello
Bezalel Simmel    | Bezalel        | Simmel 
Parto Bamford     | Parto          | Bamford
;


overwriteNameWhere
from employees | sort emp_no asc | eval full_name = concat(first_name, " ", last_name) | grok full_name "%{WORD:emp_no} %{WORD:b}" | where emp_no == "Bezalel" | keep full_name, emp_no, b | limit 3;

full_name:keyword | emp_no:keyword | b:keyword
Bezalel Simmel    | Bezalel        | Simmel 
;


overwriteNameAfterSort#[skip:-8.13.0]
from employees | sort emp_no ASC | grok first_name "Ge(?<emp_no>[a-z]{2})gi" | limit 1 | rename emp_no as first_name_fragment | keep first_name_fragment
;

first_name_fragment:keyword
or
;


multivalueOutput
row a = "foo bar" | grok a "%{WORD:b} %{WORD:b}";

a:keyword | b:keyword  
foo bar   | ["foo", "bar"]
;


multivalueInput
from employees | where emp_no <= 10006 | grok job_positions "%{WORD:a} %{WORD:b} %{WORD:c}" | sort emp_no | keep emp_no, a, b, c, job_positions;

emp_no:integer | a:keyword           | b:keyword         | c:keyword           | job_positions:keyword
10001          | Senior              | Python            | Developer           | [Accountant, Senior Python Developer]
10002          | Senior              | Team              | Lead                | Senior Team Lead
10003          | null                | null              | null                | null
10004          | Head                | Human             | Resources           | [Head Human Resources, Reporting Analyst, Support Engineer, Tech Lead]
10005          | null                | null              | null                | null
10006          | [Principal, Senior] | [Support, Team]   | [Engineer, Lead]    | [Principal Support Engineer,Senior Team Lead, Tech Lead]
;


matchAtTheBegin
from employees | sort emp_no asc | eval full_name = concat(first_name, " ", last_name, " 123 456") | grok full_name "%{WORD:first_name} %{WORD:last_name} %{NUMBER:num:int}" | keep full_name, first_name, last_name, num | limit 3;

full_name:keyword          | first_name:keyword   | last_name:keyword | num:integer 
Georgi Facello 123 456 | Georgi               | Facello           | 123
Bezalel Simmel 123 456 | Bezalel              | Simmel            | 123
Parto Bamford 123 456  | Parto                | Bamford           | 123
;


matchAtTheEnd
from employees | sort emp_no asc | eval full_name = concat("123 ", first_name, " ", last_name, " 123") | grok full_name "%{WORD:first_name} %{WORD:last_name} %{NUMBER:num:int}" | keep full_name, first_name, last_name, num | limit 3;

full_name:keyword      | first_name:keyword   | last_name:keyword | num:integer 
123 Georgi Facello 123 | Georgi               | Facello           | 123
123 Bezalel Simmel 123 | Bezalel              | Simmel            | 123
123 Parto Bamford 123  | Parto                | Bamford           | 123
;


matchInBetween
from employees | sort emp_no asc | eval full_name = concat("123 ", first_name, " ", last_name, " 123 456") | grok full_name "%{WORD:first_name} %{WORD:last_name} %{NUMBER:num:int}" | keep full_name, first_name, last_name, num | limit 3;

full_name:keyword          | first_name:keyword   | last_name:keyword | num:integer 
123 Georgi Facello 123 456 | Georgi               | Facello           | 123
123 Bezalel Simmel 123 456 | Bezalel              | Simmel            | 123
123 Parto Bamford 123 456  | Parto                | Bamford           | 123
;


optionalMatchMv
from employees | grok job_positions "%{WORD:a}?\\s*%{WORD:b}?\\s*%{WORD:c}?" | keep emp_no, a, b, c, job_positions | sort emp_no | limit 5;

emp_no:integer | a:keyword                         | b:keyword                          | c:keyword      | job_positions:keyword                             
10001          | [Accountant, Senior]              | Python                             | Developer      | [Accountant, Senior Python Developer]                                 
10002          | Senior                            | Team                               | Lead           | Senior Team Lead                                                      
10003          | null                              | null                               | null           | null                                                                  
10004          | [Head, Reporting, Support, Tech]  | [Human, Analyst, Engineer, Lead]   | Resources      | [Head Human Resources, Reporting Analyst, Support Engineer, Tech Lead]
10005          | null                              | null                               | null           | null
;

overwriteInputName
required_capability: grok_dissect_masking
row text = "123 abc", int = 5 | sort int asc | grok text "%{NUMBER:text:int} %{WORD:description}" | keep text, int, description;

text:integer | int:integer | description:keyword
123          | 5           | abc
;

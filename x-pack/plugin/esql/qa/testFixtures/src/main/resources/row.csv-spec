oneField
row a = 1;

a:integer
1
;

multipleFields
// tag::example[]
ROW a = 1, b = "two", c = null
// end::example[]
;

// tag::example-result[]
a:integer | b:keyword  | c:null
1         | "two"      | null
// end::example-result[]
;

implicitNames
row 100, 10, c = 1;

100:integer | 10:integer | c:integer
100 | 10 | 1
;

multivalue
// tag::multivalue[]
ROW a = [2, 1]
// end::multivalue[]
;

// tag::multivalue-result[]
a:integer
[2, 1]
// end::multivalue-result[]
;

unsignedLongLiteral
ROW long_max = 9223372036854775807, ul_start = 9223372036854775808, ul_end = 18446744073709551615, double=18446744073709551616;

long_max:long       |ul_start:unsigned_long |ul_end:ul            |double:double
9223372036854775807 |9223372036854775808    |18446744073709551615 |1.8446744073709552E19
;

fieldFromFunctionEvaluation
// tag::function[]
ROW a = ROUND(1.23, 0)
// end::function[]
;

// tag::function-result[]
a:double
1.0
// end::function-result[]
;

evalRow
row a = 1, b = 2 | eval c = a + b;

a:integer | b:integer | c:integer
1 | 2 | 3
;

evalRowWithNull
row a = 1, b = 2, c = null | eval z = c+b+a;

a:integer | b:integer | c:null | z:integer
1 | 2 | null | null
;

evalRowWithNull2
row a = 1, null, b = 2, c = null, null | eval z = a+b;

a:integer | null:null | b:integer | c:null | null:null | z:integer
1 | null | 2 | null | null | 3
;

evalRowWithNull3
row a = 1, b = 2, x = round(null) | eval z = a+b+x;

a:integer | b:integer | x:null | z:integer
1 | 2 | null | null
;

evalRowWithRound
row a = 1, b = 2 | eval y = round(-123.5);

a:integer | b:integer | y:double
1 | 2 | -124.0
;

evalRowWithRoundNullDecimals
row a = 1, b = 2 | eval y = round(-123.5, null);

a:integer | b:integer | y:double
1 | 2 | null
;

evalRowWithComplexRound
row a = 1, b = 2 | eval y = round(-123.56789, 3) + ROUND(a + b / 2);

a:integer | b:integer | y:double
1 | 2 | -121.568
;

evalOverride
row a = 1, b = 100 | eval b = a + 1 | eval a = b + 1;

b:integer | a:integer
2 | 3
;

evalOverride2
row a = 1, b = 10, c = 100, d = 1000, e = 10000 | eval d = a + 1 | eval b = d + 1;

a:integer | c:integer | e:integer | d:integer | b:integer
1 | 100 | 10000 | 2 | 3
;

filterRow
row a = 1 | where a > 0;

a:integer
1
;

filterRow2
row a = 1 | where a > 10;

a:integer
;

filterRow3
row a = 1 | eval b = a * null | where b > 10;

a:integer | b:integer
;

filterRow4
row a = 1 | eval b = null * 1 | where b > 10;

a:integer | b:integer
;

filterRow5
row a = 1.0 | eval b = a * null | where b > 2.0;

a:double | b:double
;

evalRowWithNulls
row a = 1, b = 2 | eval y = null;

a:integer | b:integer | y:null
1 | 2 | null
;

evalRowWithNullsInRound
row a = 1, b = 2 | eval y = round(null, 3) + ROUND(a + b / 2);

a:integer | b:integer | y:integer
1 | 2 | null
;

evalRowWithNullsInArithmethicOp
row a = 1, b = 2 | eval y = null + 3;

a:integer | b:integer | y:integer
1 | 2 | null
;

rowWithNullsInCount
row a = 1.5, b = 2.6, c = null | eval s = null + a + b | stats c = count(s);

c:long
0
;

rowWithNullsInAvg
row a = 1.5, b = 2.6, c = null | eval s = null + a + b | stats c = avg(s);

c:double
null
;

rowWithNullsInAvg2
row a = 1.5, b = 2.6, c = null | eval s = a - b * c | stats avg(s);

avg(s):double
null
;

rowStatsProjectGroupByInt
row a = 1, b = 2 | stats count(b) by a | keep a;

a:integer
1
;

rowStatsProjectGroupByLong
row a = 1000000000000, b = 2 | stats count(b) by a | keep a;

a:long
1000000000000
;

rowStatsProjectGroupByDouble
row a = 1.0, b = 2 | stats count(b) by a | keep a;

a:double
1.0
;

rowStatsProjectGroupByLong
row a = "hello world", b = 2 | stats count(b) by a | keep a;

a:keyword
"hello world"
;

limitRow
row a = 1 | limit 0;

a:integer
;

rowWithMultipleStats
row a = 1+3, b = 2, ab = 5 | eval x = 1 + b + 5 | stats avg = avg(x), min(x), max(x), count(x), avg(x), avg(ab), avg(a);

avg:double | min(x):integer | max(x):integer | count(x):long | avg(x):double | avg(ab):double | avg(a):double
       8.0 |              8 |              8 |             1 |           8.0 |            5.0 |           4.0
;

rowWithMultipleStatsOverNull
row x=1, y=2 | eval tot = null + y + x | stats c=count(tot), a=avg(tot), mi=min(tot), ma=max(tot), s=sum(tot);

c:long | a:double |   mi:integer |  ma:integer | s:long
     0 |     null |         null |        null |   null
;


min
row l=1, d=1.0, ln=1 + null, dn=1.0 + null | stats min(l), min(d), min(ln), min(dn);

min(l):integer | min(d):double | min(ln):integer | min(dn):double
             1 |           1.0 |            null |           null
;


sum
row l=1, d=1.0, ln=1 + null, dn=1.0 + null | stats sum(l), sum(d), sum(ln), sum(dn);

sum(l):long | sum(d):double | sum(ln):long | sum(dn):double
          1 |           1.0 |         null |           null
;

boolean
row false;

false:boolean
false
;

in
row a=1, b=2 | where a in (0, b-1);

a:integer|b:integer
1        |2
;

inWithLiteralValue
row a=1, b=2 | where 2 in (a, b);

a:integer|b:integer
1        |2
;

inWithExpressions
// tag::in-with-expressions[]
ROW a = 1, b = 4, c = 3
| WHERE c-a IN (3, b / 2, a)
// end::in-with-expressions[]
;

// tag::in-with-expressions-result[]
a:integer |b:integer |c:integer
1         |4         |3
// end::in-with-expressions-result[]
;

convertMvToMvDifferentCardinality#[skip:-8.13.99, reason:warning changed in 8.14]
row strings = ["1", "2", "three"] | eval ints = to_int(strings);
warning:Line 1:49: evaluation of [to_int(strings)] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:49: org.elasticsearch.xpack.ql.InvalidArgumentException: Cannot parse number [three]

strings:keyword |ints:integer
[1, 2, three]   |[1, 2]
;

convertMvToSv#[skip:-8.13.99, reason:warning changed in 8.14]
row strings = ["1", "two"] | eval ints = to_int(strings);

warning:Line 1:42: evaluation of [to_int(strings)] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:42: org.elasticsearch.xpack.ql.InvalidArgumentException: Cannot parse number [two]

strings:keyword |ints:integer
[1, two]        |1
;

convertMvToNull#[skip:-8.13.99, reason:warning changed in 8.14]
row strings = ["one", "two"] | eval ints = to_int(strings);
warning:Line 1:44: evaluation of [to_int(strings)] failed, treating result as null. Only first 20 failures recorded.
warning:Line 1:44: org.elasticsearch.xpack.ql.InvalidArgumentException: Cannot parse number [one]
warning:Line 1:44: org.elasticsearch.xpack.ql.InvalidArgumentException: Cannot parse number [two]

strings:keyword |ints:integer
[one, two]      |null
;

arraysWithNegatives
row integers = [+   1, -2, -300, -2147483648], longs = [1, -          2, -2147483649], longs2 = [+1, -2, -9223372036854775808], doubles = [1, -.455, -2.43, 3.4, -    0.12, 8];

integers:integer            | longs:long            | longs2:long                   | doubles:double 
[1, -2, -300, -2147483648]  | [1, -2, -2147483649]  | [1, -2, -9223372036854775808] | [1, -0.455, -2.43, 3.4, -0.12, 8]
;

isNullIsNotNull
row true_bool = null is null, false_bool = null is not null, negated_true = not(null is null), negated_false = not(null is not null);

true_bool:boolean | false_bool:boolean | negated_true:boolean | negated_false:boolean
true              | false              | false                | true
;

staticCidrMatch#[skip:-8.12.99,reason:supported in 8.13]
row x = cidr_match(to_ip("127.0.0.1"), "127.0.1.0/16"), y = cidr_match(to_ip("127.0.0.1"), "127.1.0.0/16") | eval ip = to_ip("127.0.0.1") | eval z = cidr_match(ip, "127.0.0.1");

x:boolean | y:boolean  |  ip:ip     | z:boolean
true      |false       |127.0.0.1   |true        
;

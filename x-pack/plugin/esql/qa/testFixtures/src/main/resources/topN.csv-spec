ipSortingAsTiebreaker
from hosts | sort host desc, card, ip1 desc | limit 8 | keep host, card, ip0, ip1;

 host:keyword  | card:keyword  |                                ip0:ip                                           |                         ip1:ip
gamma          |eth0           |fe80::cae2:65ff:fece:feb9                                                        |127.0.0.3                                             
gamma          |lo0            |fe80::cae2:65ff:fece:feb9                                                        |fe81::cae2:65ff:fece:feb9                             
epsilon        |eth0           |[fe80::cae2:65ff:fece:feb9, fe80::cae2:65ff:fece:fec0, fe80::cae2:65ff:fece:fec1]|fe80::cae2:65ff:fece:fec1                             
epsilon        |eth1           |null                                                                             |[127.0.0.1, 127.0.0.2, 127.0.0.3]                     
epsilon        |eth2           |[fe81::cae2:65ff:fece:feb9, fe82::cae2:65ff:fece:fec0]                           |[fe81::cae2:65ff:fece:feb9, fe82::cae2:65ff:fece:fec0]
beta           |eth0           |127.0.0.1                                                                        |::1                                                   
beta           |eth1           |127.0.0.1                                                                        |128.0.0.1                                             
beta           |eth1           |127.0.0.1                                                                        |127.0.0.2
;

ipSortingByTwoIPs
from hosts | sort ip0, ip1 desc | limit 8 | keep host, card, ip0, ip1;

 host:keyword  | card:keyword  |                                ip0:ip                                           |                         ip1:ip
alpha          |eth1           |::1                                                                              |::1                      
beta           |eth1           |127.0.0.1                                                                        |128.0.0.1                
beta           |eth1           |127.0.0.1                                                                        |127.0.0.2                
alpha          |eth0           |127.0.0.1                                                                        |127.0.0.1                
beta           |eth0           |127.0.0.1                                                                        |::1                      
gamma          |lo0            |fe80::cae2:65ff:fece:feb9                                                        |fe81::cae2:65ff:fece:feb9
epsilon        |eth0           |[fe80::cae2:65ff:fece:feb9, fe80::cae2:65ff:fece:fec0, fe80::cae2:65ff:fece:fec1]|fe80::cae2:65ff:fece:fec1
gamma          |eth0           |fe80::cae2:65ff:fece:feb9                                                        |127.0.0.3
;

ipSortingBySameIPfield
from hosts | sort ip0 asc nulls first, ip0 desc, card, host, ip1 | limit 15 | keep host, card, ip0, ip1 | where card != "lo0";

 host:keyword  | card:keyword  |                                ip0:ip                                           |           ip1:ip
epsilon        |eth1           |null                                                                             |[127.0.0.1, 127.0.0.2, 127.0.0.3]                     
alpha          |eth1           |::1                                                                              |::1                                                   
alpha          |eth0           |127.0.0.1                                                                        |127.0.0.1                                             
beta           |eth0           |127.0.0.1                                                                        |::1                                                   
beta           |eth1           |127.0.0.1                                                                        |127.0.0.2                                             
beta           |eth1           |127.0.0.1                                                                        |128.0.0.1                                             
epsilon        |eth0           |[fe80::cae2:65ff:fece:feb9, fe80::cae2:65ff:fece:fec0, fe80::cae2:65ff:fece:fec1]|fe80::cae2:65ff:fece:fec1                             
gamma          |eth0           |fe80::cae2:65ff:fece:feb9                                                        |127.0.0.3                                             
epsilon        |eth2           |[fe81::cae2:65ff:fece:feb9, fe82::cae2:65ff:fece:fec0]                           |[fe81::cae2:65ff:fece:feb9, fe82::cae2:65ff:fece:fec0]
;

complexMultiSortingFields_SameFieldAscAndDesc
from employees | sort job_positions asc, languages nulls first, gender desc, job_positions desc, emp_no | limit 20 | keep job_positions, languages, gender, emp_no;

                       job_positions:keyword                                |languages:integer|gender:keyword | emp_no:integer    
[Accountant, Internship, Python Developer, Tech Lead]                       |null             |M              |10028          
Accountant                                                                  |null             |M              |10025          
[Accountant, Purchase Manager, Support Engineer]                            |null             |F              |10023          
[Accountant, Business Analyst, Data Scientist, Python Developer]            |1                |M              |10034          
[Accountant, Principal Support Engineer, Support Engineer, Tech Lead]       |1                |F              |10044          
[Accountant, Junior Developer]                                              |1                |F              |10092          
[Accountant, Purchase Manager, Python Developer, Reporting Analyst]         |2                |null           |10016          
[Accountant, Senior Python Developer, Tech Lead]                            |2                |M              |10037          
[Accountant, Junior Developer, Reporting Analyst, Support Engineer]         |2                |M              |10050          
[Accountant, Senior Python Developer]                                       |2                |M              |10001          
[Accountant, Internship]                                                    |2                |M              |10081          
[Accountant, Junior Developer, Principal Support Engineer, Purchase Manager]|3                |M              |10045          
[Accountant, Business Analyst, Purchase Manager]                            |3                |M              |10051          
[Accountant, Junior Developer]                                              |4                |F              |10089          
[Accountant, Head Human Resources]                                          |5                |null           |10012          
[Accountant, Business Analyst, Senior Python Developer, Tech Lead]          |5                |M              |10085          
[Accountant, Data Scientist, Internship, Senior Python Developer]           |5                |M              |10066          
[Accountant, Principal Support Engineer, Senior Python Developer]           |5                |F              |10094          
[Architect, Principal Support Engineer, Purchase Manager, Senior Team Lead] |2                |F              |10059          
[Architect, Internship, Principal Support Engineer]                         |2                |F              |10078 
;

sortingOnMVDoubles
from employees | sort salary_change desc nulls last | limit 10 | keep first_name, last_name, salary_change;

first_name:keyword|last_name:keyword|salary_change:double        
Weiyi             |Meriste          |[-8.94, 1.92, 6.97, 14.74]  
Parto             |Bamford          |[12.82, 14.68]              
Bojan             |Montemayor       |[0.8, 14.63]                
Satosi            |Awdeh            |[-9.81, -1.47, 14.44]       
Tse               |Herber           |[-2.58, -0.95, 14.39]       
Valter            |Sullins          |[-8.78, -3.98, 10.71, 14.26]
Guoxiang          |Nooteboom        |[12.4, 14.25]               
Hironobu          |Haraldson        |[-7.49, 13.97]              
Somnath           |Foote            |13.61                       
Chirstian         |Koblick          |[-0.35, 1.13, 3.65, 13.48]
;

sortingOnMVDoubles_1
from employees | sort salary_change desc nulls last | limit 10 | keep first_name, last_name, salary_change;

first_name:keyword|last_name:keyword|salary_change:double        
Weiyi             |Meriste          |[-8.94, 1.92, 6.97, 14.74]  
Parto             |Bamford          |[12.82, 14.68]              
Bojan             |Montemayor       |[0.8, 14.63]                
Satosi            |Awdeh            |[-9.81, -1.47, 14.44]       
Tse               |Herber           |[-2.58, -0.95, 14.39]       
Valter            |Sullins          |[-8.78, -3.98, 10.71, 14.26]
Guoxiang          |Nooteboom        |[12.4, 14.25]               
Hironobu          |Haraldson        |[-7.49, 13.97]              
Somnath           |Foote            |13.61                       
Chirstian         |Koblick          |[-0.35, 1.13, 3.65, 13.48]
;

sortingOnMVDoubles_2
from employees | sort salary_change asc nulls last | limit 10 | keep first_name, last_name, salary_change;

first_name:keyword|last_name:keyword|salary_change:double        
Satosi            |Awdeh            |[-9.81, -1.47, 14.44]       
Magy              |Stamatiou        |[-9.28, 9.42]               
Amabile           |Gomatam          |[-9.23, 5.19, 5.85, 7.5]    
Weiyi             |Meriste          |[-8.94, 1.92, 6.97, 14.74]  
Valter            |Sullins          |[-8.78, -3.98, 10.71, 14.26]
Udi               |Jansch           |[-8.66, -2.52]              
null              |Swan             |-8.46                       
Otmar             |Herbst           |[-8.19, -1.9, -0.32]        
Danel             |Mondadori        |[-7.88, 9.98, 12.52]        
Mary              |Sluis            |[-7.82, 3.48, 8.73, 10.35]
;

sortingOnNumbersFromStrings
from employees 
| eval long_from_string = to_long(salary_change.keyword) 
| sort long_from_string asc nulls last, emp_no 
| limit 10 
| keep first_name, last_name, salary_change, salary_change.keyword, long_from_string, emp_no;

first_name:keyword|last_name:keyword|salary_change:double        |salary_change.keyword:keyword|long_from_string:long|emp_no:integer     
Satosi            |Awdeh            |[-9.81, -1.47, 14.44]       |[-1.47, -9.81, 14.44]        |[-1, -10, 14]        |10065          
Weiyi             |Meriste          |[-8.94, 1.92, 6.97, 14.74]  |[-8.94, 1.92, 14.74, 6.97]   |[-9, 2, 15, 7]       |10040          
Magy              |Stamatiou        |[-9.28, 9.42]               |[-9.28, 9.42]                |[-9, 9]              |10042          
Udi               |Jansch           |[-8.66, -2.52]              |[-2.52, -8.66]               |[-3, -9]             |10064          
Amabile           |Gomatam          |[-9.23, 5.19, 5.85, 7.5]    |[-9.23, 5.19, 5.85, 7.50]    |[-9, 5, 6, 8]        |10091          
Valter            |Sullins          |[-8.78, -3.98, 10.71, 14.26]|[-3.98, -8.78, 10.71, 14.26] |[-4, -9, 11, 14]     |10099          
Mary              |Sluis            |[-7.82, 3.48, 8.73, 10.35]  |[-7.82, 10.35, 3.48, 8.73]   |[-8, 10, 3, 9]       |10011          
Otmar             |Herbst           |[-8.19, -1.9, -0.32]        |[-0.32, -1.90, -8.19]        |[0, -2, -8]          |10029          
null              |Swan             |-8.46                       |-8.46                        |-8                   |10034          
Sanjiv            |Zschoche         |[-7.67, -3.25]              |[-3.25, -7.67]               |[-3, -8]             |10053
;

sortingOnSwappedFields#[skip:-8.13.3, reason:fixed in 8.13]
FROM employees
| EVAL name = last_name, last_name = first_name, first_name = name
| WHERE first_name > "B" AND last_name IS NOT NULL
| SORT name
| LIMIT 10
| KEEP name, last_name, first_name
;

name:keyword | last_name:keyword | first_name:keyword
Baek         | Premal            | Baek
Bamford      | Parto             | Bamford
Bernatsky    | Mokhtar           | Bernatsky
Bernini      | Brendon           | Bernini
Berztiss     | Yongqiao          | Berztiss
Bierman      | Margareta         | Bierman
Billingsley  | Breannda          | Billingsley
Bouloucos    | Cristinel         | Bouloucos
Brattka      | Charlene          | Brattka
Bridgland    | Patricio          | Bridgland
;

sortingOnSwappedFieldsNoKeep#[skip:-8.13.3, reason:fixed in 8.13]
// Note that this test requires all fields to be returned in order to test a specific code path in physical planning
FROM employees
| EVAL name = first_name, first_name = last_name, last_name = name
| WHERE first_name == "Bernini" AND last_name == "Brendon"
| SORT name
;

avg_worked_seconds:long | birth_date:date      | emp_no:i | gender:k | height:d | height.float:d     | height.half_float:d | height.scaled_float:d | hire_date:date       | is_rehired:bool      | job_positions:k     | languages:i | languages.byte:i | languages.long:l | languages.short:short | salary:i | salary_change:d | salary_change.int:i | salary_change.keyword:k | salary_change.long:l | still_hired:bool | name:k  | first_name:k | last_name:k
349086555               | 1961-09-01T00:00:00Z | 10056    | F        | 1.57     | 1.5700000524520874 | 1.5703125           | 1.57                  | 1990-02-01T00:00:00Z | [false, false, true] | [Senior Team Lead]  | 2           | 2                | 2                | 2                     | 33370    | [-5.17, 10.99]  | [-5, 10]            | [-5.17, 10.99]          | [-5, 10]             | true             | Brendon | Bernini      | Brendon
;


redundantTopNBasic
from employees 
| sort emp_no 
| limit 100 
| sort emp_no 
| limit 10 
| keep emp_no, first_name
;

emp_no:integer|first_name:keyword
10001         |Georgi        
10002         |Bezalel       
10003         |Parto         
10004         |Chirstian     
10005         |Kyoichi       
10006         |Anneke        
10007         |Tzvetan       
10008         |Saniya        
10009         |Sumant        
10010         |Duangkaew
;


redundantTopNWithFilter
from employees 
| sort emp_no desc 
| limit 50 
| where gender == "M" 
| sort emp_no desc 
| limit 5 
| keep emp_no, first_name, gender
;

emp_no:integer | first_name:keyword | gender:keyword
10097          | Remzi              | M
10096          | Jayson             | M
10095          | Hilari             | M
10093          | Sailaja            | M
10091          | Amabile            | M
;


redundantTopNWithProject
from employees 
| sort salary desc 
| limit 20 
| keep emp_no, first_name, salary 
| sort salary desc 
| limit 3
;

emp_no:integer | first_name:keyword | salary:integer
10029          | Otmar              | 74999
10045          | Moss               | 74970
10007          | Tzvetan            | 74572
;


redundantTopNWithEval
from employees 
| sort emp_no 
| limit 15 
| eval double_emp_no = emp_no * 2 
| sort emp_no 
| limit 5 
| keep emp_no, first_name, double_emp_no
;

emp_no:integer|first_name:keyword|double_emp_no:integer
10001         |Georgi            |20002                
10002         |Bezalel           |20004                
10003         |Parto             |20006                
10004         |Chirstian         |20008                
10005         |Kyoichi           |20010
;


redundantTopNWithRename
from employees 
| sort first_name 
| limit 20 
| rename first_name as name 
| sort name 
| limit 8 
| keep emp_no, name
;

emp_no:integer | name:keyword
10059          | Alejandro
10091          | Amabile
10006          | Anneke
10062          | Anoosh
10094          | Arumugam
10049          | Basil
10058          | Berhard
10014          | Berni
;


nonRedundantTopNDifferentOrder
from employees 
| sort emp_no 
| limit 10 
| sort salary desc 
| limit 5 
| keep emp_no, first_name, salary
;

emp_no:integer | first_name:keyword | salary:integer
10007          | Tzvetan            | 74572
10009          | Sumant             | 66174
10005          | Kyoichi            | 63528
10003          | Parto              | 61805
10006          | Anneke             | 60335
;


redundantTopNMultipleFields
from employees 
| sort gender, emp_no 
| limit 20 
| where salary > 50000 
| sort gender, emp_no 
| limit 8 
| keep emp_no, first_name, gender, salary
;

emp_no:integer | first_name:keyword | gender:keyword | salary:integer
10002          | Bezalel            | F              | 56371
10006          | Anneke             | F              | 60335
10007          | Tzvetan            | F              | 74572
10009          | Sumant             | F              | 66174
10024          | Suzette            | F              | 64675
10027          | Divier             | F              | 73851
10032          | null               | F              | 62233
10041          | Uri                | F              | 56415
;


redundantTopNWithStats
from employees 
| sort gender 
| limit 10 
| stats cnt = count(*) by emp_no, gender
| sort gender
| limit 5 
| keep emp_no, gender, cnt
;

emp_no:integer | gender:keyword | cnt:long
10023          | F              | 1
10027          | F              | 1
10006          | F              | 1
10007          | F              | 1
10040          | F              | 1
;

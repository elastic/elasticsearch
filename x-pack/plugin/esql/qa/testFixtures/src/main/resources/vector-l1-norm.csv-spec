 # Tests for l1_norm similarity function
 
 similarityWithVectorField
 required_capability: l1_norm_vector_similarity_function
 
// tag::vector-l1-norm[]
 from colors
 | eval similarity = v_l1_norm(rgb_vector, [0, 255, 255]) 
 | sort similarity desc, color asc 
// end::vector-l1-norm[]
 | limit 10
 | keep color, similarity
 ;
 
// tag::vector-l1-norm-result[]
color:text | similarity:double
red        | 765.0
crimson    | 650.0
maroon     | 638.0
firebrick  | 620.0
orange     | 600.0
tomato     | 595.0
brown      | 591.0
chocolate  | 585.0
coral      | 558.0
gold       | 550.0
// end::vector-l1-norm-result[] 
;

similarityAsPartOfExpression
required_capability: l1_norm_vector_similarity_function

from colors
| eval score = round((1 + v_l1_norm(rgb_vector, [0, 255, 255]) / 2), 3) 
| sort score desc, color asc 
| limit 10
| keep color, score
;

color:text | score:double
red        | 383.5
crimson    | 326.0
maroon     | 320.0
firebrick  | 311.0
orange     | 301.0
tomato     | 298.5
brown      | 296.5
chocolate  | 293.5
coral      | 280.0
gold       | 276.0
;

similarityWithLiteralVectors
required_capability: l1_norm_vector_similarity_function
 
row a = 1
| eval similarity = round(v_l1_norm([1, 2, 3], [0, 1, 2]), 3) 
| keep similarity
;

similarity:double
3.0
;

similarityWithStats
required_capability: l1_norm_vector_similarity_function

from colors
| eval similarity = round(v_l1_norm(rgb_vector, [0, 255, 255]), 3) 
| stats avg = round(avg(similarity), 3), min = min(similarity), max = max(similarity)
;

avg:double | min:double | max:double
391.254    | 0.0        | 765.0
;

similarityWithNull
required_capability: l1_norm_vector_similarity_function
required_capability: vector_similarity_functions_support_null

from colors
| eval similarity = v_l1_norm(rgb_vector, null) 
| stats total_null = count(*) where similarity is null
;

total_null:long
59
;

# TODO Need to implement a conversion function to convert a non-foldable row to a dense_vector
similarityWithRow-Ignore
required_capability: l1_norm_vector_similarity_function
 
row vector = [1, 2, 3] 
| eval similarity = round(v_l1_norm(vector, [0, 1, 2]), 3) 
| sort similarity desc, color asc 
| limit 10
| keep color, similarity
;

similarity:double
0.978  
;

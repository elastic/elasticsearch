likePrefix
from employees | where first_name like "Eberhar*" | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10013          | Eberhardt      
;


likeSuffix
from employees | where first_name like "*uhito" | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10016          | Kazuhito      
;


likePrefixSuffix
from employees | where first_name like "*har*" | keep emp_no, first_name | sort emp_no;

emp_no:integer | first_name:keyword
10013          | Eberhardt      
10058          | Berhard
10068          | Charlene
10089          | Sudharsan
;


likePrefixSuffix2
from employees | where first_name like "?berhar*" | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10013          | Eberhardt      
;


likeAndEquals
from employees | where first_name like "Mayu*" and last_name == "Warwick" | keep emp_no, first_name, last_name;

emp_no:integer | first_name:keyword | last_name:keyword
10020          | Mayuko             | Warwick
;


likeAndOr
from employees | where first_name like "Eberhar*" or first_name like "*zuh*" and last_name like "*eha" | keep emp_no, first_name, last_name;
ignoreOrder:true

emp_no:integer | first_name:keyword | last_name:keyword
10013          | Eberhardt          | Terkki
10018          | Kazuhide           | Peha
;


evalLike
from employees | eval x = concat(first_name, "--")| where x like "Hidefu*" | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10051          | Hidefumi      
;


likeExpression
from employees | where concat(first_name, "--") like "Hidefu*" | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10051          | Hidefumi      
;


likeNoWildcard
from employees | where first_name like "Eberhardt" | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10013          | Eberhardt      
;

likeEvalNoWildcard
from employees | eval x = concat(first_name, "X") | where x like "EberhardtX" | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10013          | Eberhardt      
;

likeListEmptyArgWildcard
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name like ("") 
| KEEP emp_no, first_name;

emp_no:integer | first_name:keyword    
;

likeListSingleArgWildcard
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name like ("Eberhardt*") 
| KEEP emp_no, first_name;

emp_no:integer | first_name:keyword
10013          | Eberhardt      
;

likeListTwoArgWildcard
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name like ("Eberhardt*", "testString*") 
| KEEP emp_no, first_name;

emp_no:integer | first_name:keyword
10013          | Eberhardt       
;

likeListDocExample
required_capability: like_with_list_of_patterns
// tag::likeListDocExample[]
ROW message = "foobar" 
| WHERE message like ("foo*", "bar?")
// end::likeListDocExample[]
;

message:string
foobar   
;

likeListThreeArgWildcard
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name like ("Eberhardt*", "Ot*", "Part?") 
| KEEP emp_no, first_name  
| SORT emp_no;

emp_no:integer | first_name:keyword
10003          | Parto
10013          | Eberhardt
10029          | Otmar     
;


likeListMultipleWhere
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name like ("Eberhardt*", "Ot*", "Part?") 
| WHERE first_name like ("Eberhard?", "Otm*")
| KEEP emp_no, first_name
| SORT emp_no;

emp_no:integer | first_name:keyword
10013          | Eberhardt
10029          | Otmar
;

likeListAllWildcard
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name like ("*") 
| KEEP emp_no, first_name 
| SORT emp_no 
| LIMIT 2;

emp_no:integer | first_name:keyword
10001          | Georgi
10002          | Bezalel
;

likeListOverlappingPatterns
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name like ("Eber*", "Eberhardt") 
| KEEP emp_no, first_name;

emp_no:integer | first_name:keyword
10013          | Eberhardt
;

likeListCaseSensitive
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name like ("eberhardt", "EBERHARDT") 
| KEEP emp_no, first_name;

emp_no:integer | first_name:keyword
;

likeListSpecialCharacters
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name like ("*ar*", "?eor*") 
| KEEP emp_no, first_name 
| SORT emp_no;

emp_no:integer | first_name:keyword
10001          | Georgi
10003          | Parto
10011          | Mary
10013          | Eberhardt
10029          | Otmar
10055          | Georgy
10058          | Berhard
10068          | Charlene
10069          | Margareta
10074          | Mokhtar
10082          | Parviz
10089          | Sudharsan
10095          | Hilari
;

likeListEscapedWildcard
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name like ("Eberhar\\*") 
| KEEP emp_no, first_name;

emp_no:integer | first_name:keyword
;

likeListNineOrMoreLetters
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name like ("?????????*") 
| KEEP emp_no, first_name 
| SORT emp_no;

emp_no:integer | first_name:keyword
10004          | Chirstian
10010          | Duangkaew
10013          | Eberhardt
10017          | Cristinel
10025          | Prasadram
10059          | Alejandro
10069          | Margareta
10089          | Sudharsan
10092          | Valdiodio
10098          | Sreekrishna
;

notLikeListThreeArgWildcardNotOtherFilter
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name not like ("Eberhardt*", "Ot*", "Part?") and emp_no < 10010 
| KEEP emp_no, first_name
| SORT emp_no;

emp_no:integer | first_name:keyword
10001          | Georgi
10002          | Bezalel
10004          | Chirstian
10005          | Kyoichi
10006          | Anneke
10007          | Tzvetan
10008          | Saniya
10009          | Sumant   
;

likeListBeginningWithWildcard
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name like ("A*", "B*", "C*") 
| KEEP emp_no, first_name 
| SORT emp_no;

emp_no:integer | first_name:keyword
10002          | Bezalel
10004          | Chirstian
10006          | Anneke
10014          | Berni
10017          | Cristinel
10023          | Bojan
10049          | Basil
10056          | Brendon
10058          | Berhard
10059          | Alejandro
10060          | Breannda
10062          | Anoosh
10067          | Claudi
10068          | Charlene
10091          | Amabile
10094          | Arumugam 
;

notLikeListThreeArgWildcardOtherFirst
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE emp_no < 10010 and first_name not like ("Eberhardt*", "Ot*", "Part?") 
| KEEP emp_no, first_name  
| SORT emp_no;

emp_no:integer | first_name:keyword
10001          | Georgi
10002          | Bezalel
10004          | Chirstian
10005          | Kyoichi
10006          | Anneke
10007          | Tzvetan
10008          | Saniya
10009          | Sumant   
;

notLikeFiveOrLessLetters
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name not like ("??????*") 
| KEEP emp_no, first_name 
| SORT emp_no;

emp_no:integer | first_name:keyword
10003          | Parto
10011          | Mary
10014          | Berni
10021          | Ramzi
10023          | Bojan
10029          | Otmar
10040          | Weiyi
10041          | Uri
10042          | Magy
10045          | Moss
10049          | Basil
10057          | Ebbe
10061          | Tse
10063          | Gino
10064          | Udi
10066          | Kwee
10071          | Hisao
10073          | Shir
10075          | Gao
10076          | Erez
10077          | Mona
10078          | Danel
10083          | Vishv
10084          | Tuval
10097          | Remzi
;

notLikeListMultipleWhere
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name not like ("Eberhardt*", "Ot*", "Part?", "A*", "B*", "C*", "D*") 
| WHERE first_name not like ("Eberhard?", "Otm*", "F*", "G*", "H*", "I*", "J*", "K*", "L*")
| KEEP emp_no, first_name 
| SORT emp_no;

emp_no:integer | first_name:keyword
10007          | Tzvetan
10008          | Saniya
10009          | Sumant
10011          | Mary
10012          | Patricio
10020          | Mayuko
10021          | Ramzi
10022          | Shahaf
10024          | Suzette
10025          | Prasadram
10026          | Yongqiao
10040          | Weiyi
10041          | Uri
10042          | Magy
10043          | Yishay
10044          | Mingsen
10045          | Moss
10047          | Zvonko
10050          | Yinghua
10053          | Sanjiv
10054          | Mayumi
10057          | Ebbe
10061          | Tse
10064          | Udi
10065          | Satosi
10069          | Margareta
10070          | Reuven
10073          | Shir
10074          | Mokhtar
10076          | Erez
10077          | Mona
10080          | Premal
10081          | Zhongwei
10082          | Parviz
10083          | Vishv
10084          | Tuval
10086          | Somnath
10087          | Xinglin
10089          | Sudharsan
10092          | Valdiodio
10093          | Sailaja
10097          | Remzi
10098          | Sreekrishna
10099          | Valter
;

notLikeListNotField
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE not first_name like ("Eberhardt*", "Ot*", "Part?", "A*", "B*", "C*", "D*") 
| WHERE first_name not like ("Eberhard?", "Otm*", "F*", "G*", "H*", "I*", "J*", "K*", "L*")
| KEEP emp_no, first_name 
| SORT emp_no;

emp_no:integer | first_name:keyword
10007          | Tzvetan
10008          | Saniya
10009          | Sumant
10011          | Mary
10012          | Patricio
10020          | Mayuko
10021          | Ramzi
10022          | Shahaf
10024          | Suzette
10025          | Prasadram
10026          | Yongqiao
10040          | Weiyi
10041          | Uri
10042          | Magy
10043          | Yishay
10044          | Mingsen
10045          | Moss
10047          | Zvonko
10050          | Yinghua
10053          | Sanjiv
10054          | Mayumi
10057          | Ebbe
10061          | Tse
10064          | Udi
10065          | Satosi
10069          | Margareta
10070          | Reuven
10073          | Shir
10074          | Mokhtar
10076          | Erez
10077          | Mona
10080          | Premal
10081          | Zhongwei
10082          | Parviz
10083          | Vishv
10084          | Tuval
10086          | Somnath
10087          | Xinglin
10089          | Sudharsan
10092          | Valdiodio
10093          | Sailaja
10097          | Remzi
10098          | Sreekrishna
10099          | Valter
;

notLikeListAllWildcard
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name not like ("*") 
| KEEP emp_no, first_name 
| SORT emp_no 
| LIMIT 2;

emp_no:integer | first_name:keyword
10030          | null
10031          | null
;

notLikeListWildcard
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE first_name not like ("A*","B*", "C*", "D*","E*", "F*", "G*", "H*", "I*", "J*", "K*") 
| KEEP emp_no, first_name  
| SORT emp_no;

emp_no:integer | first_name:keyword
10003          | Parto
10007          | Tzvetan
10008          | Saniya
10009          | Sumant
10011          | Mary
10012          | Patricio
10019          | Lillian
10020          | Mayuko
10021          | Ramzi
10022          | Shahaf
10024          | Suzette
10025          | Prasadram
10026          | Yongqiao
10029          | Otmar
10040          | Weiyi
10041          | Uri
10042          | Magy
10043          | Yishay
10044          | Mingsen
10045          | Moss
10046          | Lucien
10047          | Zvonko
10050          | Yinghua
10053          | Sanjiv
10054          | Mayumi
10061          | Tse
10064          | Udi
10065          | Satosi
10069          | Margareta
10070          | Reuven
10073          | Shir
10074          | Mokhtar
10077          | Mona
10080          | Premal
10081          | Zhongwei
10082          | Parviz
10083          | Vishv
10084          | Tuval
10086          | Somnath
10087          | Xinglin
10089          | Sudharsan
10092          | Valdiodio
10093          | Sailaja
10097          | Remzi
10098          | Sreekrishna
10099          | Valter
;

likeListWithUpperTurnedInsensitive
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE TO_UPPER(first_name) LIKE ("GEOR*") 
| KEEP emp_no, first_name 
| SORT emp_no;

emp_no:integer | first_name:keyword
10001          | Georgi
10055          | Georgy     
;

likeListWithUpperTurnedInsensitiveMult
required_capability: like_with_list_of_patterns
FROM employees 
| WHERE TO_UPPER(first_name) LIKE ("GEOR*", "WE*")  
| KEEP emp_no, first_name 
| SORT emp_no;

emp_no:integer | first_name:keyword
10001          | Georgi
10040          | Weiyi
10055          | Georgy    
;

likeAll
from employees | where first_name like "*" and emp_no > 10028 | sort emp_no | keep emp_no, first_name | limit 2;

emp_no:integer | first_name:keyword
10029          | Otmar
10040          | Weiyi      
;



notFieldLike
from employees | where not first_name like "Geor*" | sort emp_no | keep emp_no, first_name | limit 2;

emp_no:integer | first_name:keyword
10002          | Bezalel
10003          | Parto      
;


fieldNotLike
from employees | where first_name not like "Geor*" | sort emp_no | keep emp_no, first_name | limit 2;

emp_no:integer | first_name:keyword
10002          | Bezalel
10003          | Parto      
;


notFieldNotLike
from employees | where not first_name not like "Xing*" | sort emp_no | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10087          | Xinglin
;


notBraceFieldNotLike
from employees | where not (first_name not like "Xing*") | sort emp_no | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10087          | Xinglin
;


rLikePrefix
from employees | where first_name rlike "Aleja.*" | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10059          | Alejandro      
;


rLikeSuffix
from employees | where first_name rlike ".*itij" | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10079          | Kshitij      
;


rLikePrefixSuffix
from employees | where first_name rlike ".*har.*" | keep emp_no, first_name | sort emp_no;

emp_no:integer | first_name:keyword
10013          | Eberhardt      
10058          | Berhard
10068          | Charlene
10089          | Sudharsan
;


rLikePrefix2
from employees | where first_name rlike ".leja.*" | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10059          | Alejandro      
;


rLikeComplex
from employees | where first_name rlike "(Eberhar.*)|(.*arlene)" | keep emp_no, first_name | sort emp_no;

emp_no:integer | first_name:keyword
10013          | Eberhardt      
10068          | Charlene
;


rlikeAndEquals
from employees | where first_name rlike "Mayu.*" and last_name == "Warwick" | keep emp_no, first_name, last_name;

emp_no:integer | first_name:keyword | last_name:keyword
10020          | Mayuko             | Warwick
;


rLikeAndOr
from employees | where first_name rlike "Eberhar.*" or first_name rlike ".*zuh.*" and last_name rlike ".*eha" | keep emp_no, first_name, last_name;
ignoreOrder:true

emp_no:integer | first_name:keyword | last_name:keyword
10013          | Eberhardt          | Terkki
10018          | Kazuhide           | Peha
;


evalRLike
from employees | eval x = concat(first_name, "--")| where x rlike "Hidefu.*" | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10051          | Hidefumi      
;


rlikeExpression
from employees | where concat(first_name, "--") rlike "Hidefu.*" | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10051          | Hidefumi      
;


rLikeNoWildcard
from employees | where first_name rlike "Eberhardt" | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10013          | Eberhardt      
;


rLikeEvalNoWildcard
from employees | eval x = concat(first_name, "X") | where x rlike "EberhardtX" | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10013          | Eberhardt      
;


rLikeAll
from employees | where first_name rlike ".*" and emp_no > 10028 | sort emp_no | keep emp_no, first_name | limit 2;

emp_no:integer | first_name:keyword
10029          | Otmar
10040          | Weiyi      
;


notFieldRLike
from employees | where not first_name rlike "Geor.*" | sort emp_no | keep emp_no, first_name | limit 2;

emp_no:integer | first_name:keyword
10002          | Bezalel
10003          | Parto      
;


fieldNotRLike
from employees | where first_name not rlike "Geor.*" | sort emp_no | keep emp_no, first_name | limit 2;

emp_no:integer | first_name:keyword
10002          | Bezalel
10003          | Parto      
;


notFieldNotRLike
from employees | where not first_name not rlike "Xing.*" | sort emp_no | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10087          | Xinglin
;


notBraceFieldNotRLike
from employees | where not (first_name not rlike "Xing.*") | sort emp_no | keep emp_no, first_name;

emp_no:integer | first_name:keyword
10087          | Xinglin
;


rLikeOrComplexExpression
from employees | keep emp_no, first_name, last_name | where first_name RLIKE ".*o{2,}.*" OR last_name RLIKE ".*o{2,}.*" | sort emp_no;

emp_no:integer | first_name:keyword | last_name:keyword 
10015          | Guoxiang           | Nooteboom
10062          | Anoosh             | Peyn
10086          | Somnath            | Foote
10088          | Jungsoon           | Syrzycki
;


likeWithPath
row x = "C:\\foo\\bar.exe" | mv_expand x | where x LIKE "C:\\\\*";

x:keyword
C:\foo\bar.exe
;

likeWithPathNoMatch
row x = "C:\\foo\\bar.exe" | mv_expand x | where x LIKE "C:\\\\\\\\*";

x:keyword
;

docsGettingStartedLike
// tag::gs-like[]
FROM sample_data
| WHERE message LIKE "Connected*"
// end::gs-like[]
| LIMIT 0
;

@timestamp:date | client_ip:ip | event_duration:long | message:keyword
;

multiValueLike#[skip:-8.12.99]
from employees | where job_positions like "Account*" | keep emp_no, job_positions;

warningRegex:evaluation of \[job_positions like \\\"Account\*\\\"\] failed, treating result as null. Only first 20 failures recorded.
warningRegex:java.lang.IllegalArgumentException: single-value function encountered multi-value

emp_no:integer | job_positions:keyword 
10025          | Accountant 
;


multiValueRLike#[skip:-8.12.99]
from employees | where job_positions rlike "Account.*" | keep emp_no, job_positions;

warningRegex:evaluation of \[job_positions rlike \\\"Account.*\\\"\] failed, treating result as null. Only first 20 failures recorded.
warningRegex:java.lang.IllegalArgumentException: single-value function encountered multi-value

emp_no:integer | job_positions:keyword 
10025          | Accountant 
;

likeWithUpperTurnedInsensitive#[skip:-8.12.99]
FROM employees
| KEEP emp_no, first_name
| SORT emp_no
| WHERE TO_UPPER(first_name) LIKE "GEOR*"
;

emp_no:integer |first_name:keyword
10001          |Georgi
10055          |Georgy
;

likeWithLowerTurnedInsensitive#[skip:-8.12.99]
FROM employees
| KEEP emp_no, first_name
| SORT emp_no
| WHERE TO_LOWER(TO_UPPER(first_name)) LIKE "geor*"
;

emp_no:integer |first_name:keyword
10001          |Georgi
10055          |Georgy
;

likeWithLowerConflictingFolded#[skip:-8.12.99]
FROM employees
| KEEP emp_no, first_name
| SORT emp_no
| WHERE TO_UPPER(first_name) LIKE "geor*"
;

emp_no:integer |first_name:keyword
;

likeWithLowerTurnedInsensitiveNotPushedDown#[skip:-8.12.99]
FROM employees
| KEEP emp_no, first_name
| SORT emp_no
| WHERE TO_LOWER(first_name) LIKE "geor*" OR emp_no + 1 IN (10002, 10056)
;

emp_no:integer |first_name:keyword
10001          |Georgi
10055          |Georgy
;

rlikeWithUpperTurnedInsensitive#[skip:-8.12.99]
FROM employees
| KEEP emp_no, first_name
| SORT emp_no
| WHERE TO_UPPER(first_name) RLIKE "GEOR.*"
;

emp_no:integer |first_name:keyword
10001          |Georgi
10055          |Georgy
;

rlikeWithLowerTurnedInsensitive#[skip:-8.12.99]
FROM employees
| KEEP emp_no, first_name
| SORT emp_no
| WHERE TO_LOWER(TO_UPPER(first_name)) RLIKE "geor.*"
;

emp_no:integer |first_name:keyword
10001          |Georgi
10055          |Georgy
;

rlikeWithLowerConflictingFolded#[skip:-8.12.99]
FROM employees
| KEEP emp_no, first_name
| SORT emp_no
| WHERE TO_UPPER(first_name) RLIKE "geor.*"
;

emp_no:integer |first_name:keyword
;

negatedRLikeWithLowerTurnedInsensitive#[skip:-8.12.99]
FROM employees
| KEEP emp_no, first_name
| SORT emp_no
| WHERE TO_LOWER(TO_UPPER(first_name)) NOT RLIKE "geor.*"
| STATS c = COUNT()
;

c:long
88
;

rlikeWithLowerTurnedInsensitiveNotPushedDown#[skip:-8.12.99]
FROM employees
| KEEP emp_no, first_name
| SORT emp_no
| WHERE TO_LOWER(first_name) RLIKE "geor.*" OR emp_no + 1 IN (10002, 10056)
;

emp_no:integer |first_name:keyword
10001          |Georgi
10055          |Georgy
;

# test for https://github.com/elastic/elasticsearch/issues/128813
rlikeWithEmptyLanguagePattern
required_capability: rlike_with_empty_language_pattern
ROW x = "abc" | EVAL bool = x RLIKE "#"
;

x:keyword | bool:boolean
abc       | false
;

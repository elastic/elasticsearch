import org.elasticsearch.gradle.util.GradleUtils
import org.elasticsearch.gradle.internal.info.BuildParams

apply plugin: 'elasticsearch.legacy-java-rest-test'

dependencies {
  javaRestTestImplementation(testArtifact(project(xpackModule('core'))))
  javaRestTestImplementation project(":client:rest-high-level")
}

File repoDir = file("$buildDir/testclusters/repo")

tasks.named("javaRestTest").configure {
  /* To support taking index snapshots, we have to set path.repo setting */
  systemProperty 'tests.path.repo', repoDir
  systemProperty 'es.rollup_v2_feature_flag_enabled', 'true'
}

testClusters.configureEach {
  testDistribution = 'DEFAULT'
  numberOfNodes = 4

  setting 'path.repo', repoDir.absolutePath
  setting 'xpack.searchable.snapshot.shared_cache.size', '10mb'
  setting 'xpack.security.enabled', 'false'
  setting 'xpack.watcher.enabled', 'false'
  setting 'xpack.ml.enabled', 'false'
  setting 'xpack.license.self_generated.type', 'trial'
  setting 'indices.lifecycle.poll_interval', '1000ms'
  setting 'logger.org.elasticsearch.xpack.core.ilm', 'TRACE'
  setting 'logger.org.elasticsearch.xpack.ilm', 'TRACE'
  /*
   * In TimeSeriesLifecycleActionsIT.testWaitForSnapshotSlmExecutedBefore() we create a snapshot, then associate an ILM policy with an index, and
   * then that policy checks if a snapshot has been started at the same millisecond or later than the policy's action's date. Since both the
   * snapshot start time and policy are using ThreadPool.absoluteTimeInMillis(), it is possible that they get the same cached result back (it is
   * kept for about 200 ms). The following config changes ThreadPool.absoluteTimeInMillis() to always use System.currentTimeMillis() rather than a
   * cached time. So the policy's action date is always after the snapshot's start.
   */
  setting 'thread_pool.estimated_time_interval', '0'
  systemProperty 'es.rollup_v2_feature_flag_enabled', 'true'
}

if (BuildParams.inFipsJvm){
  // Test clusters run with security disabled
  tasks.named("javaRestTest").configure{enabled = false }
}

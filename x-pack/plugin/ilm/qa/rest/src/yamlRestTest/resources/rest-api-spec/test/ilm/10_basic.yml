---
setup:
  - do:
      cluster.health:
          wait_for_status: yellow

---
"Test Basic Policy CRUD":
  - do:
      catch: missing
      ilm.get_lifecycle:
        policy: "my_timeseries_lifecycle"

  - do:
      catch: missing
      ilm.delete_lifecycle:
        policy: "my_timeseries_lifecycle"

  - do:
      ilm.put_lifecycle:
        policy: "my_timeseries_lifecycle"
        body: |
           {
             "policy": {
               "phases": {
                 "warm": {
                   "min_age": "10s",
                   "actions": {
                     "forcemerge": {
                       "max_num_segments": 10000
                     }
                   }
                 },
                 "delete": {
                   "min_age": "30s",
                   "actions": {
                     "delete": {}
                   }
                 }
               }
             }
           }

  - do:
      ilm.get_lifecycle:
        policy: "my_timeseries_lifecycle"
  - match: { my_timeseries_lifecycle.version: 1 }
  - is_true: my_timeseries_lifecycle.modified_date
  - match: { my_timeseries_lifecycle.policy.phases.warm.min_age: "10s" }
  - match: { my_timeseries_lifecycle.policy.phases.delete.min_age: "30s" }

  - do:
      ilm.delete_lifecycle:
        policy: "my_timeseries_lifecycle"

  - do:
      catch: missing
      ilm.get_lifecycle:
        policy: "my_timeseries_lifecycle"

---
"Test Policy Get":
  - do:
      ilm.put_lifecycle:
        policy: "my_timeseries_lifecycle_1"
        body: |
          {
            "policy": {
              "phases": {
                "warm": {
                  "min_age": "10s",
                  "actions": {
                    "forcemerge": {
                      "max_num_segments": 10000
                    }
                  }
                }
              }
            }
          }

  - do:
      ilm.put_lifecycle:
        policy: "my_timeseries_lifecycle_2"
        body: |
          {
            "policy": {
              "phases": {
                 "delete": {
                   "min_age": "30s",
                   "actions": {
                     "delete": {}
                   }
                 }
              }
            }
          }

  - do:
      ilm.put_lifecycle:
        policy: "other_lifecycle"
        body: |
          {
            "policy": {
              "phases": {
                "warm": {
                  "min_age": "10s",
                  "actions": {
                    "forcemerge": {
                      "max_num_segments": 10000
                    }
                  }
                },
                "delete": {
                  "min_age": "30s",
                  "actions": {
                    "delete": {}
                  }
                }
              }
            }
          }

  - do:
      ilm.get_lifecycle:
        policy: "my_timeseries*"
  - match: { my_timeseries_lifecycle_1.version: 1 }
  - match: { my_timeseries_lifecycle_2.version: 1 }

  - do:
      ilm.get_lifecycle:
        policy: "my_timeseries_lifecycle_1,my_timeseries_lifecycle_2"
  - match: { my_timeseries_lifecycle_1.version: 1 }
  - match: { my_timeseries_lifecycle_2.version: 1 }

  - do:
      catch: missing
      ilm.get_lifecycle:
        policy: "lifecycle_not_found"

  - do:
      catch: /wildcard only supports a single value, please use comma-separated values or a single wildcard value/
      ilm.get_lifecycle:
        policy: "my_timeseries*,other_lifecycle"

  - do:
      catch: missing
      ilm.get_lifecycle:
        policy: "other_lifecycle,lifecycle_not_found"

---
"Test Policy Update":
  - do:
      ilm.put_lifecycle:
        policy: "my_timeseries_lifecycle"
        body: |
           {
             "policy": {
               "phases": {
                 "warm": {
                   "min_age": "10s",
                   "actions": {
                     "forcemerge": {
                       "max_num_segments": 10000
                     }
                   }
                 },
                 "delete": {
                   "min_age": "30s",
                   "actions": {
                     "delete": {}
                   }
                 }
               }
             }
           }

  - do:
      ilm.get_lifecycle:
        policy: "my_timeseries_lifecycle"
  - match: { my_timeseries_lifecycle.version: 1 }
  - is_true: my_timeseries_lifecycle.modified_date
  - match: { my_timeseries_lifecycle.policy.phases.warm.min_age: "10s" }
  - match: { my_timeseries_lifecycle.policy.phases.delete.min_age: "30s" }


  - do:
      indices.create:
        index: my_index
        body:
          settings:
            index.lifecycle.name: "my_moveable_timeseries_lifecycle"

  - do:
      indices.create:
        index: my_index2
        body:
          settings:
            index.lifecycle.name: "my_moveable_timeseries_lifecycle"

  - do:
      ilm.put_lifecycle:
        policy: "my_timeseries_lifecycle"
        body: |
           {
             "policy": {
               "phases": {
                 "warm": {
                   "min_age": "300s",
                   "actions": {
                     "forcemerge": {
                       "max_num_segments": 10000
                     }
                   }
                 },
                 "delete": {
                   "min_age": "600s",
                   "actions": {
                     "delete": {}
                   }
                 }
               }
             }
           }

  - do:
      ilm.get_lifecycle:
        policy: "my_timeseries_lifecycle"
  - match: { my_timeseries_lifecycle.version: 2 }
  - is_true: my_timeseries_lifecycle.modified_date
  - match: { my_timeseries_lifecycle.policy.phases.warm.min_age: "300s" }
  - match: { my_timeseries_lifecycle.policy.phases.delete.min_age: "600s" }

  - do:
      indices.delete:
        index: my_index
  - do:
      indices.delete:
        index: my_index2

  - do:
      ilm.delete_lifecycle:
        policy: "my_timeseries_lifecycle"

  - do:
      catch: missing
      ilm.get_lifecycle:
        policy: "my_timeseries_lifecycle"

---
"Test Undeletable Policy In Use":
  - do:
      ilm.put_lifecycle:
        policy: "my_timeseries_lifecycle"
        body: |
           {
             "policy": {
               "phases": {
                 "warm": {
                   "min_age": "10s",
                   "actions": {
                     "forcemerge": {
                       "max_num_segments": 10000
                     }
                   }
                 },
                 "delete": {
                   "min_age": "30s",
                   "actions": {
                     "delete": {}
                   }
                 }
               }
             }
           }

  - do:
      ilm.get_lifecycle:
        policy: "my_timeseries_lifecycle"
  - match: { my_timeseries_lifecycle.policy.phases.warm.min_age: "10s" }
  - match: { my_timeseries_lifecycle.policy.phases.delete.min_age: "30s" }

  - do:
      indices.create:
        index: my_timeseries_index
        body:
          settings:
            index.lifecycle.name: "my_timeseries_lifecycle"

  - do:
      catch: bad_request
      ilm.delete_lifecycle:
        policy: "my_timeseries_lifecycle"
  - match: { error.root_cause.0.type: "illegal_argument_exception" }
  - match: { error.root_cause.0.reason: "Cannot delete policy [my_timeseries_lifecycle]. It is in use by one or more indices: [my_timeseries_index]" }

  - do:
      ilm.remove_policy:
        index: my_timeseries_index

  - do:
      ilm.delete_lifecycle:
        policy: "my_timeseries_lifecycle"

  - do:
      catch: missing
      ilm.get_lifecycle:
        policy: "my_timeseries_lifecycle"

---
"Test Invalid Policy":
  - do:
      catch: bad_request
      ilm.put_lifecycle:
        policy: "my_invalid_lifecycle"
        body: |
           {
             "policy": {
               "phases": {
                 "hot": {
                   "min_age": "0s",
                   "actions": {
                     "forcemerge": {
                       "max_num_segments": 1
                     }
                   }
                 }
               }
             }
           }

  - do:
      catch: bad_request
      ilm.put_lifecycle:
        policy: "my_invalid_lifecycle"
        body: |
           {
             "policy": {
               "phases": {
                 "hot": {
                   "min_age": "0s",
                   "actions": {
                     "shrink": {
                       "number_of_shards": 1
                     }
                   }
                 }
               }
             }
           }

  - do:
      catch: bad_request
      ilm.put_lifecycle:
        policy: "my_invalid_lifecycle"
        body: |
           {
             "policy": {
               "phases": {
                 "hot": {
                   "min_age": "0s",
                   "actions": {
                     "readonly": {}
                   }
                 }
               }
             }
           }

---
"Test increasing phase timings validated":

  - do:
      catch: /Your policy is configured to run the delete phase \(min_age\:\ 5s\) before the warm phase \(min_age\:\ 10s\). You should change the phase timing so that the phases will execute in the order of hot, warm, then cold./
      ilm.put_lifecycle:
        policy: "bad_policy"
        body: |
           {
             "policy": {
               "phases": {
                 "warm": {
                   "min_age": "10s",
                   "actions": {
                     "forcemerge": {
                       "max_num_segments": 10000
                     }
                   }
                 },
                 "delete": {
                   "min_age": "5s",
                   "actions": {
                     "delete": {}
                   }
                 }
               }
             }
           }

---
# This test checks that the deprecation warning is issued when a deprecated rollover condition is part of the policy
# On both creation and update of an existing policy
"Test Deprecated Condition On Policy Put / Update":
  - requires:
      test_runner_features: [ warnings, capabilities ]
      capabilities:
        - method: PUT
          path: /_ilm/policy/my_timeseries_lifecycle
          capabilities: [ max_size_deprecation ]
      reason: Capability must be present to run test

  - do:
      warnings:
        - 'Use of the [max_size] rollover condition found in phase [hot]. This condition has been deprecated in favour of the [max_primary_shard_size] condition and will be removed in a later version'
      ilm.put_lifecycle:
        policy: "my_timeseries_lifecycle"
        body: |
          {
            "policy": {
              "phases": {
                "hot": {
                  "actions": {
                    "rollover": {
                      "max_size": "50gb"
                    }
                  }
                }
              }
            }
          }

  - do:
      ilm.get_lifecycle:
        policy: "my_timeseries_lifecycle"
  - match: { my_timeseries_lifecycle.version: 1 }
  - is_true: my_timeseries_lifecycle.modified_date
  - match: { my_timeseries_lifecycle.policy.phases.hot.actions.rollover.max_size: "50gb" }

  # Create a policy with rollover but without max_size
  - do:
      ilm.put_lifecycle:
        policy: "my_timeseries_lifecycle_update"
        body: |
          {
            "policy": {
              "phases": {
                "hot": {
                  "actions": {
                    "rollover": {
                      "max_docs": 1000
                    }
                  }
                }
              }
            }
          }

  - do:
      ilm.get_lifecycle:
        policy: "my_timeseries_lifecycle_update"
  - match: { my_timeseries_lifecycle_update.version: 1 }
  - is_true: my_timeseries_lifecycle_update.modified_date
  - match: { my_timeseries_lifecycle_update.policy.phases.hot.actions.rollover.max_docs: 1000 }
  - is_false: my_timeseries_lifecycle_update.policy.phases.hot.actions.rollover.max_size

  # Update the policy to add max_size and check for deprecation warning
  - do:
      warnings:
        - 'Use of the [max_size] rollover condition found in phase [hot]. This condition has been deprecated in favour of the [max_primary_shard_size] condition and will be removed in a later version'
      ilm.put_lifecycle:
        policy: "my_timeseries_lifecycle_update"
        body: |
          {
            "policy": {
              "phases": {
                "hot": {
                  "actions": {
                    "rollover": {
                      "max_docs": 1000,
                      "max_size": "25gb"
                    }
                  }
                }
              }
            }
          }

  - do:
      ilm.get_lifecycle:
        policy: "my_timeseries_lifecycle_update"
  - match: { my_timeseries_lifecycle_update.version: 2 }
  - is_true: my_timeseries_lifecycle_update.modified_date
  - match: { my_timeseries_lifecycle_update.policy.phases.hot.actions.rollover.max_docs: 1000 }
  - match: { my_timeseries_lifecycle_update.policy.phases.hot.actions.rollover.max_size: "25gb" }

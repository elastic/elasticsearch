setup:
  - requires:
      cluster_features: "gte_v8.15.0"
      reason: semantic_text introduced in 8.15.0

  - do:
      inference.put:
        task_type: sparse_embedding
        inference_id: sparse-inference-id
        body: >
          {
            "service": "test_service",
            "service_settings": {
              "model": "my_model",
              "api_key": "abc64"
            },
            "task_settings": {
            }
          }

  - do:
      inference.put:
        task_type: text_embedding
        inference_id: dense-inference-id
        body: >
          {
            "service": "text_embedding_test_service",
            "service_settings": {
              "model": "my_model",
              "dimensions": 10,
              "similarity": "cosine",
              "api_key": "abc64"
            },
            "task_settings": {
            }
          }

  - do:
      inference.put:
        task_type: text_embedding
        inference_id: dense-inference-id-compatible-with-bbq
        body: >
          {
            "service": "text_embedding_test_service",
            "service_settings": {
              "model": "my_model",
              "dimensions": 64,
              "similarity": "cosine",
              "api_key": "abc64"
            },
            "task_settings": {
            }
          }


  - do:
      indices.create:
        index: test-index
        body:
          settings:
            index:
              mapping:
                semantic_text:
                  use_legacy_format: false
          mappings:
            properties:
              sparse_field:
                type: semantic_text
                inference_id: sparse-inference-id
              dense_field:
                type: semantic_text
                inference_id: dense-inference-id

---
"Indexes sparse vector document":
  # Checks mapping is not updated until first doc arrives
  - do:
      indices.get_mapping:
        index: test-index

  - match: { "test-index.mappings.properties.sparse_field.type": semantic_text }
  - match: { "test-index.mappings.properties.sparse_field.inference_id": sparse-inference-id }
  - length: { "test-index.mappings.properties.sparse_field": 2 }

  - do:
      index:
        index: test-index
        id: doc_1
        body:
          sparse_field: "these are not the droids you're looking for. He's free to go around"
          _inference_fields.sparse_field:
            inference:
              inference_id: sparse-inference-id
              model_settings:
                task_type: sparse_embedding
              chunks:
                sparse_field:
                  - start_offset: 0
                    end_offset: 44
                    embeddings:
                      feature_0: 1.0
                      feature_1: 2.0
                      feature_2: 3.0
                      feature_3: 4.0
                  - start_offset: 44
                    end_offset: 67
                    embeddings:
                      feature_4: 0.1
                      feature_5: 0.2
                      feature_6: 0.3
                      feature_7: 0.4

  # Checks mapping is updated when first doc arrives
  - do:
      indices.get_mapping:
        index: test-index

  - match: { "test-index.mappings.properties.sparse_field.type": semantic_text }
  - match: { "test-index.mappings.properties.sparse_field.inference_id": sparse-inference-id }
  - match: { "test-index.mappings.properties.sparse_field.model_settings.task_type": sparse_embedding }
  - length: { "test-index.mappings.properties.sparse_field": 3 }

---
"Field caps with sparse embedding":
  - requires:
      cluster_features: "gte_v8.16.0"
      reason: field_caps support for semantic_text added in 8.16.0

  - do:
      field_caps:
        include_empty_fields: true
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - exists: fields.sparse_field
  - exists: fields.dense_field

  - do:
      field_caps:
        include_empty_fields: false
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - not_exists: fields.sparse_field
  - not_exists: fields.dense_field

  - do:
      index:
        index: test-index
        id: doc_1
        body:
          sparse_field: "these are not the droids you're looking for. He's free to go around"
          _inference_fields.sparse_field:
            inference:
              inference_id: sparse-inference-id
              model_settings:
                task_type: sparse_embedding
              chunks:
                sparse_field:
                  - start_offset: 0
                    end_offset: 44
                    embeddings:
                      feature_0: 1.0
                      feature_1: 2.0
                      feature_2: 3.0
                      feature_3: 4.0
                  - start_offset: 44
                    end_offset: 67
                    embeddings:
                      feature_4: 0.1
                      feature_5: 0.2
                      feature_6: 0.3
                      feature_7: 0.4
        refresh: true

  - do:
      field_caps:
        include_empty_fields: true
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - exists: fields.sparse_field
  - exists: fields.dense_field
  - match: { fields.sparse_field.text.searchable: true }
  - match: { fields.dense_field.text.searchable: true }

  - do:
      field_caps:
        include_empty_fields: false
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - exists: fields.sparse_field
  - not_exists: fields.dense_field
  - match: { fields.sparse_field.text.searchable: true }

---
"Indexes dense vector document":
  # Checks mapping is not updated until first doc arrives
  - do:
      indices.get_mapping:
        index: test-index

  - match: { "test-index.mappings.properties.dense_field.type": semantic_text }
  - match: { "test-index.mappings.properties.dense_field.inference_id": dense-inference-id }
  - not_exists: test-index.mappings.properties.dense_field.model_settings

  - do:
      index:
        index: test-index
        id: doc_2
        body:
          dense_field: "these are not the droids you're looking for. He's free to go around"
          _inference_fields.dense_field:
            inference:
              inference_id: dense-inference-id
              model_settings:
                task_type: text_embedding
                dimensions: 4
                similarity: cosine
                element_type: float
              chunks:
                dense_field:
                  - start_offset: 0
                    end_offset: 44
                    embeddings: [ 0.04673296958208084, -0.03237321600317955, -0.02543032355606556, 0.056035321205854416 ]
                  - start_offset: 44
                    end_offset: 67
                    embeddings: [ 0.00641461368650198, -0.0016253676731139421, -0.05126338079571724, 0.053438711911439896 ]

  # Checks mapping is updated when first doc arrives
  - do:
      indices.get_mapping:
        index: test-index

  - match: { "test-index.mappings.properties.dense_field.type": semantic_text }
  - match: { "test-index.mappings.properties.dense_field.inference_id": dense-inference-id }
  - match: { "test-index.mappings.properties.dense_field.model_settings.task_type": text_embedding }
  - exists: test-index.mappings.properties.dense_field.model_settings

---
"Indexes dense vector document with index_options":
  - requires:
      cluster_features: "semantic_text.index_options"
      reason: index_options introduced in 8.19.0

  - do:
      indices.create:
        index: test-index-options-with-bbq
        body:
          settings:
            index:
              mapping:
                semantic_text:
                  use_legacy_format: false
          mappings:
            properties:
              dense_field:
                type: semantic_text
                inference_id: dense-inference-id-compatible-with-bbq

  # Checks vector mapping is not updated until first doc arrives
  - do:
      indices.get_mapping:
        index: test-index-options-with-bbq

  - match: { "test-index-options-with-bbq.mappings.properties.dense_field.type": semantic_text }
  - match: { "test-index-options-with-bbq.mappings.properties.dense_field.inference_id": dense-inference-id-compatible-with-bbq }
  - match: { "test-index-options-with-bbq.mappings.properties.dense_field.index_options.dense_vector.type": bbq_hnsw }
  - match: { "test-index-options-with-bbq.mappings.properties.dense_field.index_options.dense_vector.m": 16 }
  - match: { "test-index-options-with-bbq.mappings.properties.dense_field.index_options.dense_vector.ef_construction": 100 }
  - match: { "test-index-options-with-bbq.mappings.properties.dense_field.index_options.dense_vector.rescore_vector.oversample": 3 }
  - not_exists: test-index-options-with-bbq.mappings.properties.dense_field.model_settings

  - do:
      index:
        index: test-index-options-with-bbq
        id: doc_2
        body:
          dense_field: "these are not the droids you're looking for. He's free to go around"
          _inference_fields.dense_field:
            inference:
              inference_id: dense-inference-id-compatible-with-bbq
              model_settings:
                task_type: text_embedding
                dimensions: 64
                similarity: cosine
                element_type: float
              chunks:
                dense_field:
                  - start_offset: 0
                    end_offset: 44
                    embeddings: [ 0.05, -0.03, -0.03, 0.06, 0.01, -0.02, 0.07, 0.02, -0.04, 0.03, 0.00, 0.05, -0.06, 0.04, -0.01, 0.02, -0.05, 0.01, 0.03, -0.02, 0.06, -0.04, 0.00, 0.05, -0.03, 0.02, 0.01, -0.01, 0.04, -0.06, 0.03, 0.02, -0.02, 0.06, -0.01, 0.00, 0.04, -0.05, 0.01, 0.03, -0.04, 0.02, -0.03, 0.05, -0.02, 0.01, 0.03, -0.06, 0.04, 0.00, -0.01, 0.06, -0.03, 0.02, 0.01, -0.04, 0.05, -0.01, 0.00, 0.04, -0.05, 0.02, 0.03, -0.02 ]
                  - start_offset: 44
                    end_offset: 67
                    embeddings: [ 0.05, -0.03, -0.03, 0.06, 0.01, -0.02, 0.07, 0.02, -0.04, 0.03, 0.00, 0.05, -0.06, 0.04, -0.01, 0.02, -0.05, 0.01, 0.03, -0.02, 0.06, -0.04, 0.00, 0.05, -0.03, 0.02, 0.01, -0.01, 0.04, -0.06, 0.03, 0.02, -0.02, 0.06, -0.01, 0.00, 0.04, -0.05, 0.01, 0.03, -0.04, 0.02, -0.03, 0.05, -0.02, 0.01, 0.03, -0.06, 0.04, 0.00, -0.01, 0.06, -0.03, 0.02, 0.01, -0.04, 0.05, -0.01, 0.00, 0.04, -0.05, 0.02, 0.03, -0.02 ]


  # Checks mapping is updated when first doc arrives
  - do:
      indices.get_mapping:
        index: test-index-options-with-bbq

  - match: { "test-index-options-with-bbq.mappings.properties.dense_field.type": semantic_text }
  - match: { "test-index-options-with-bbq.mappings.properties.dense_field.inference_id": dense-inference-id-compatible-with-bbq }
  - match: { "test-index-options-with-bbq.mappings.properties.dense_field.model_settings.task_type": text_embedding }
  - exists: test-index-options-with-bbq.mappings.properties.dense_field.model_settings

---
"Indexes dense vector document with index_options falls back to int8_hnsw for non-compatible models":
  # Checks mapping is not updated until first doc arrives
  - do:
      indices.get_mapping:
        index: test-index

  - match: { "test-index.mappings.properties.dense_field.type": semantic_text }
  - match: { "test-index.mappings.properties.dense_field.inference_id": dense-inference-id }
  - match: { "test-index.mappings.properties.dense_field.index_options.dense_vector.type": int8_hnsw }
  - match: { "test-index.mappings.properties.dense_field.index_options.dense_vector.m": 16 }
  - match: { "test-index.mappings.properties.dense_field.index_options.dense_vector.ef_construction": 100 }
  - not_exists: test-index.mappings.properties.dense_field.model_settings

  - do:
      index:
        index: test-index
        id: doc_2
        body:
          dense_field: "these are not the droids you're looking for. He's free to go around"
          _inference_fields.dense_field:
            inference:
              inference_id: dense-inference-id
              model_settings:
                task_type: text_embedding
                dimensions: 4
                similarity: cosine
                element_type: float
              chunks:
                dense_field:
                  - start_offset: 0
                    end_offset: 44
                    embeddings: [ 0.04673296958208084, -0.03237321600317955, -0.02543032355606556, 0.056035321205854416 ]
                  - start_offset: 44
                    end_offset: 67
                    embeddings: [ 0.00641461368650198, -0.0016253676731139421, -0.05126338079571724, 0.053438711911439896 ]

  # Checks mapping is updated when first doc arrives
  - do:
      indices.get_mapping:
        index: test-index

  - match: { "test-index.mappings.properties.dense_field.type": semantic_text }
  - match: { "test-index.mappings.properties.dense_field.inference_id": dense-inference-id }
  - match: { "test-index.mappings.properties.dense_field.index_options.dense_vector.type": int8_hnsw }
  - match: { "test-index.mappings.properties.dense_field.index_options.dense_vector.m": 16 }
  - match: { "test-index.mappings.properties.dense_field.index_options.dense_vector.ef_construction": 100 }
  - exists: test-index.mappings.properties.dense_field.model_settings
  - match: { "test-index.mappings.properties.dense_field.model_settings.task_type": text_embedding }

---
"Field caps with text embedding":
  - requires:
      cluster_features: "gte_v8.16.0"
      reason: field_caps support for semantic_text added in 8.16.0

  - do:
      field_caps:
        include_empty_fields: true
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - exists: fields.sparse_field
  - exists: fields.dense_field

  - do:
      field_caps:
        include_empty_fields: false
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - not_exists: fields.sparse_field
  - not_exists: fields.dense_field

  - do:
      index:
        index: test-index
        id: doc_2
        body:
          dense_field: "these are not the droids you're looking for. He's free to go around"
          _inference_fields.dense_field:
            inference:
              inference_id: dense-inference-id
              model_settings:
                task_type: text_embedding
                dimensions: 4
                similarity: cosine
                element_type: float
              chunks:
                dense_field:
                  - start_offset: 0
                    end_offset: 44
                    embeddings: [ 0.04673296958208084, -0.03237321600317955, -0.02543032355606556, 0.056035321205854416 ]
                  - start_offset: 44
                    end_offset: 67
                    embeddings: [ 0.00641461368650198, -0.0016253676731139421, -0.05126338079571724, 0.053438711911439896 ]
        refresh: true

  - do:
      field_caps:
        include_empty_fields: true
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - exists: fields.sparse_field
  - exists: fields.dense_field
  - match: { fields.sparse_field.text.searchable: true }
  - match: { fields.dense_field.text.searchable: true }

  - do:
      field_caps:
        include_empty_fields: false
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - not_exists: fields.sparse_field
  - exists: fields.dense_field
  - match: { fields.dense_field.text.searchable: true }

---
"Cannot be used directly as a nested field":

  - do:
      catch: /semantic_text field \[nested.semantic\] cannot be nested/
      indices.create:
        index: test-nested-index
        body:
          mappings:
            properties:
              nested:
                type: nested
                properties:
                  semantic:
                    type: semantic_text
                    inference_id: sparse-inference-id
                  another_field:
                    type: keyword

---
"Cannot be used as a nested field on nested objects":

  - do:
      catch: /semantic_text field \[nested.nested_object.semantic\] cannot be nested/
      indices.create:
        index: test-nested-index
        body:
          mappings:
            properties:
              nested:
                type: nested
                properties:
                  nested_object:
                    type: object
                    properties:
                      semantic:
                        type: semantic_text
                        inference_id: sparse-inference-id
                      another_field:
                        type: keyword

---
"Cannot be in an object field with subobjects disabled":
  - requires:
      cluster_features: "semantic_text.in_object_field_fix"
      reason: object field fix added in 8.16.0 & 8.15.4

  - do:
      catch: bad_request
      indices.create:
        index: test-subobjects-index
        body:
          mappings:
            properties:
              level_1:
                type: object
                properties:
                  level_2:
                    type: object
                    subobjects: false
                    properties:
                      sparse_field:
                        type: semantic_text
                        inference_id: sparse-inference-id

  - match: { error.type: illegal_argument_exception }
  - match: { error.reason: "semantic_text field [level_1.level_2.sparse_field] cannot be in an object field with
                            subobjects disabled" }

---
"Mapping always includes inference ID":
  - requires:
      cluster_features: "semantic_text.always_emit_inference_id_fix"
      reason: always emit inference ID fix added in 8.17.0
      test_runner_features: [ capabilities ]
      capabilities:
        - method: GET
          path: /_inference
          capabilities: [ default_elser_2 ]

  - do:
      indices.create:
        index: test-always-include-inference-id-index
        body:
          mappings:
            properties:
              semantic_field:
                type: semantic_text

  - do:
      indices.get_mapping:
        index: test-always-include-inference-id-index

  - exists: test-always-include-inference-id-index.mappings.properties.semantic_field.inference_id

---
"Users can set dense vector index options and index documents using those options":
  - requires:
      cluster_features: "semantic_text.index_options"
      reason: Index options introduced in 8.19.0

  - do:
      indices.create:
        index: test-index-options
        body:
          settings:
            index:
              mapping:
                semantic_text:
                  use_legacy_format: false
          mappings:
            properties:
              semantic_field:
                type: semantic_text
                inference_id: dense-inference-id
                index_options:
                  dense_vector:
                    type: int8_hnsw
                    m: 20
                    ef_construction: 100
                    confidence_interval: 1.0

  - do:
      indices.get_mapping:
        index: test-index-options

  - match: { "test-index-options.mappings.properties.semantic_field.index_options.dense_vector.type": "int8_hnsw" }
  - match: { "test-index-options.mappings.properties.semantic_field.index_options.dense_vector.m": 20 }
  - match: { "test-index-options.mappings.properties.semantic_field.index_options.dense_vector.ef_construction": 100 }
  - match: { "test-index-options.mappings.properties.semantic_field.index_options.dense_vector.confidence_interval": 1.0 }

  - do:
      index:
        index: test-index-options
        id: doc_1
        body:
          semantic_field: "these are not the droids you're looking for. He's free to go around"
          _inference_fields.semantic_field:
            inference:
              inference_id: dense-inference-id
              model_settings:
                task_type: text_embedding
                dimensions: 4
                similarity: cosine
                element_type: float
              chunks:
                semantic_field:
                  - start_offset: 0
                    end_offset: 44
                    embeddings: [ 0.04673296958208084, -0.03237321600317955, -0.02543032355606556, 0.056035321205854416 ]
                  - start_offset: 44
                    end_offset: 67
                    embeddings: [ 0.00641461368650198, -0.0016253676731139421, -0.05126338079571724, 0.053438711911439896 ]

  - do:
      indices.get_mapping:
        index: test-index-options

  - match: { "test-index-options.mappings.properties.semantic_field.index_options.dense_vector.type": int8_hnsw }
  - match: { "test-index-options.mappings.properties.semantic_field.index_options.dense_vector.m": 20 }
  - match: { "test-index-options.mappings.properties.semantic_field.index_options.dense_vector.ef_construction": 100 }
  - match: { "test-index-options.mappings.properties.semantic_field.index_options.dense_vector.confidence_interval": 1.0 }

---
"Not specifying index options results in default index options":
  - requires:
      cluster_features: "semantic_text.index_options"
      reason: Index options introduced in 8.19.0

  - do:
      indices.create:
        index: test-index-options-with-bbq
        body:
          settings:
            index:
              mapping:
                semantic_text:
                  use_legacy_format: false
          mappings:
            properties:
              semantic_field:
                type: semantic_text
                inference_id: dense-inference-id-compatible-with-bbq

  - do:
      indices.get_mapping:
        index: test-index-options-with-bbq

  - match: { "test-index-options-with-bbq.mappings.properties.semantic_field.index_options.dense_vector.type": bbq_hnsw }
  - match: { "test-index-options-with-bbq.mappings.properties.semantic_field.index_options.dense_vector.m": 16 }
  - match: { "test-index-options-with-bbq.mappings.properties.semantic_field.index_options.dense_vector.ef_construction": 100 }
  - match: { "test-index-options-with-bbq.mappings.properties.semantic_field.index_options.dense_vector.rescore_vector.oversample": 3 }



---
"Specifying incompatible dense vector index options will fail":
  - requires:
      cluster_features: "semantic_text.index_options"
      reason: Index options introduced in 8.19.0

  - do:
      catch: /unsupported parameters/
      indices.create:
        index: test-incompatible-index-options
        body:
          settings:
            index:
              mapping:
                semantic_text:
                  use_legacy_format: false
          mappings:
            properties:
              semantic_field:
                type: semantic_text
                inference_id: dense-inference-id
                index_options:
                  dense_vector:
                    type: bbq_flat
                    ef_construction: 100

---
"Specifying unsupported index option types will fail":
  - requires:
      cluster_features: "semantic_text.index_options"
      reason: Index options introduced in 8.19.0

  - do:
      catch: /Unsupported index options type/
      indices.create:
        index: test-invalid-index-options-dense
        body:
          settings:
            index:
              mapping:
                semantic_text:
                  use_legacy_format: false
          mappings:
            properties:
              semantic_field:
                type: semantic_text
                inference_id: dense-inference-id
                index_options:
                  dense_vector:
                    type: foo
  - do:
      catch: bad_request
      indices.create:
        index: test-invalid-index-options-sparse
        body:
          settings:
            index:
              mapping:
                semantic_text:
                  use_legacy_format: false
          mappings:
            properties:
              semantic_field:
                type: semantic_text
                index_options:
                  sparse_vector:
                    type: int8_hnsw

---
"Index option type is required":
  - requires:
      cluster_features: "semantic_text.index_options"
      reason: Index options introduced in 8.19.0

  - do:
      catch: /Required type/
      indices.create:
        index: test-invalid-index-options-dense
        body:
          settings:
            index:
              mapping:
                semantic_text:
                  use_legacy_format: false
          mappings:
            properties:
              semantic_field:
                type: semantic_text
                inference_id: dense-inference-id
                index_options:
                  dense_vector:
                    foo: bar

---
"Model is required for index options":
  - requires:
      cluster_features: "semantic_text.index_options"
      reason: Index options introduced in 8.19.0

  - do:
      catch: /Model settings must be set to validate index options/
      indices.create:
        index: test-no-model
        body:
          settings:
            index:
              mapping:
                semantic_text:
                  use_legacy_format: false
          mappings:
            properties:
              semantic_field:
                type: semantic_text
                inference_id: nonexistent-inference-id
                index_options:
                  dense_vector:
                    type: int8_hnsw


  - do:
      indices.create:
        index: test-no-model
        body:
          settings:
            index:
              mapping:
                semantic_text:
                  use_legacy_format: false
          mappings:
            properties:
              semantic_field:
                type: semantic_text

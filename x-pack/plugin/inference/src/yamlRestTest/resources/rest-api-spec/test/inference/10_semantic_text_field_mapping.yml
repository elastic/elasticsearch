setup:
  - requires:
      cluster_features: "gte_v8.15.0"
      reason: semantic_text introduced in 8.15.0

  - do:
      indices.create:
        index: test-index
        body:
          settings:
            index:
              mapping:
                semantic_text:
                  use_legacy_format: false
          mappings:
            properties:
              sparse_field:
                type: semantic_text
                inference_id: sparse-inference-id
              dense_field:
                type: semantic_text
                inference_id: dense-inference-id

---
"Indexes sparse vector document":
  # Checks mapping is not updated until first doc arrives
  - do:
      indices.get_mapping:
        index: test-index

  - match: { "test-index.mappings.properties.sparse_field.type": semantic_text }
  - match: { "test-index.mappings.properties.sparse_field.inference_id": sparse-inference-id }
  - length: { "test-index.mappings.properties.sparse_field": 2 }

  - do:
      index:
        index: test-index
        id: doc_1
        body:
          sparse_field: "these are not the droids you're looking for. He's free to go around"
          _inference_fields.sparse_field:
            inference:
              inference_id: sparse-inference-id
              model_settings:
                task_type: sparse_embedding
              chunks:
                sparse_field:
                  - start_offset: 0
                    end_offset: 44
                    embeddings:
                      feature_0: 1.0
                      feature_1: 2.0
                      feature_2: 3.0
                      feature_3: 4.0
                  - start_offset: 44
                    end_offset: 67
                    embeddings:
                      feature_4: 0.1
                      feature_5: 0.2
                      feature_6: 0.3
                      feature_7: 0.4

  # Checks mapping is updated when first doc arrives
  - do:
      indices.get_mapping:
        index: test-index

  - match: { "test-index.mappings.properties.sparse_field.type": semantic_text }
  - match: { "test-index.mappings.properties.sparse_field.inference_id": sparse-inference-id }
  - match: { "test-index.mappings.properties.sparse_field.model_settings.task_type": sparse_embedding }
  - length: { "test-index.mappings.properties.sparse_field": 3 }

---
"Field caps with sparse embedding":
  - requires:
      cluster_features: "gte_v8.16.0"
      reason: field_caps support for semantic_text added in 8.16.0

  - do:
      field_caps:
        include_empty_fields: true
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - exists: fields.sparse_field
  - exists: fields.dense_field

  - do:
      field_caps:
        include_empty_fields: false
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - not_exists: fields.sparse_field
  - not_exists: fields.dense_field

  - do:
      index:
        index: test-index
        id: doc_1
        body:
          sparse_field: "these are not the droids you're looking for. He's free to go around"
          _inference_fields.sparse_field:
            inference:
              inference_id: sparse-inference-id
              model_settings:
                task_type: sparse_embedding
              chunks:
                sparse_field:
                  - start_offset: 0
                    end_offset: 44
                    embeddings:
                      feature_0: 1.0
                      feature_1: 2.0
                      feature_2: 3.0
                      feature_3: 4.0
                  - start_offset: 44
                    end_offset: 67
                    embeddings:
                      feature_4: 0.1
                      feature_5: 0.2
                      feature_6: 0.3
                      feature_7: 0.4
        refresh: true

  - do:
      field_caps:
        include_empty_fields: true
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - exists: fields.sparse_field
  - exists: fields.dense_field
  - match: { fields.sparse_field.text.searchable: true }
  - match: { fields.dense_field.text.searchable: true }

  - do:
      field_caps:
        include_empty_fields: false
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - exists: fields.sparse_field
  - not_exists: fields.dense_field
  - match: { fields.sparse_field.text.searchable: true }

---
"Indexes dense vector document":
  # Checks mapping is not updated until first doc arrives
  - do:
      indices.get_mapping:
        index: test-index

  - match: { "test-index.mappings.properties.dense_field.type": semantic_text }
  - match: { "test-index.mappings.properties.dense_field.inference_id": dense-inference-id }
  - length: { "test-index.mappings.properties.dense_field": 2 }

  - do:
      index:
        index: test-index
        id: doc_2
        body:
          dense_field: "these are not the droids you're looking for. He's free to go around"
          _inference_fields.dense_field:
            inference:
              inference_id: dense-inference-id
              model_settings:
                task_type: text_embedding
                dimensions: 4
                similarity: cosine
                element_type: float
              chunks:
                dense_field:
                  - start_offset: 0
                    end_offset: 44
                    embeddings: [0.04673296958208084, -0.03237321600317955, -0.02543032355606556, 0.056035321205854416]
                  - start_offset: 44
                    end_offset: 67
                    embeddings: [0.00641461368650198, -0.0016253676731139421, -0.05126338079571724, 0.053438711911439896]

  # Checks mapping is updated when first doc arrives
  - do:
      indices.get_mapping:
        index: test-index

  - match: { "test-index.mappings.properties.dense_field.type": semantic_text }
  - match: { "test-index.mappings.properties.dense_field.inference_id": dense-inference-id }
  - match: { "test-index.mappings.properties.dense_field.model_settings.task_type": text_embedding }
  - length: { "test-index.mappings.properties.dense_field": 3 }

---
"Field caps with text embedding":
  - requires:
      cluster_features: "gte_v8.16.0"
      reason: field_caps support for semantic_text added in 8.16.0

  - do:
      field_caps:
        include_empty_fields: true
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - exists: fields.sparse_field
  - exists: fields.dense_field

  - do:
      field_caps:
        include_empty_fields: false
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - not_exists: fields.sparse_field
  - not_exists: fields.dense_field

  - do:
      index:
        index: test-index
        id: doc_2
        body:
          dense_field: "these are not the droids you're looking for. He's free to go around"
          _inference_fields.dense_field:
            inference:
              inference_id: dense-inference-id
              model_settings:
                task_type: text_embedding
                dimensions: 4
                similarity: cosine
                element_type: float
              chunks:
                dense_field:
                  - start_offset: 0
                    end_offset: 44
                    embeddings: [0.04673296958208084, -0.03237321600317955, -0.02543032355606556, 0.056035321205854416]
                  - start_offset: 44
                    end_offset: 67
                    embeddings: [0.00641461368650198, -0.0016253676731139421, -0.05126338079571724, 0.053438711911439896]
        refresh: true

  - do:
      field_caps:
        include_empty_fields: true
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - exists: fields.sparse_field
  - exists: fields.dense_field
  - match: { fields.sparse_field.text.searchable: true }
  - match: { fields.dense_field.text.searchable: true }

  - do:
      field_caps:
        include_empty_fields: false
        index: test-index
        fields: "*"

  - match: { indices: [ "test-index" ] }
  - not_exists: fields.sparse_field
  - exists: fields.dense_field
  - match: { fields.dense_field.text.searchable: true }

---
"Cannot be used directly as a nested field":

    - do:
        catch: /semantic_text field \[nested.semantic\] cannot be nested/
        indices.create:
          index: test-nested-index
          body:
            mappings:
              properties:
                nested:
                  type: nested
                  properties:
                    semantic:
                      type: semantic_text
                      inference_id: sparse-inference-id
                    another_field:
                      type: keyword

---
"Cannot be used as a nested field on nested objects":

    - do:
        catch: /semantic_text field \[nested.nested_object.semantic\] cannot be nested/
        indices.create:
          index: test-nested-index
          body:
            mappings:
              properties:
                nested:
                  type: nested
                  properties:
                    nested_object:
                      type: object
                      properties:
                        semantic:
                          type: semantic_text
                          inference_id: sparse-inference-id
                        another_field:
                          type: keyword

---
"Cannot be in an object field with subobjects disabled":
  - requires:
      cluster_features: "semantic_text.in_object_field_fix"
      reason: object field fix added in 8.16.0 & 8.15.4

  - do:
      catch: bad_request
      indices.create:
        index: test-subobjects-index
        body:
          mappings:
            properties:
              level_1:
                type: object
                properties:
                  level_2:
                    type: object
                    subobjects: false
                    properties:
                      sparse_field:
                        type: semantic_text
                        inference_id: sparse-inference-id

  - match: { error.type: illegal_argument_exception }
  - match: { error.reason: "semantic_text field [level_1.level_2.sparse_field] cannot be in an object field with
                            subobjects disabled" }

---
"Mapping always includes inference ID":
  - requires:
      cluster_features: "semantic_text.always_emit_inference_id_fix"
      reason: always emit inference ID fix added in 8.17.0
      test_runner_features: [capabilities]
      capabilities:
        - method: GET
          path: /_inference
          capabilities: [default_elser_2]

  - do:
      indices.create:
        index: test-always-include-inference-id-index
        body:
          mappings:
            properties:
              semantic_field:
                type: semantic_text

  - do:
      indices.get_mapping:
        index: test-always-include-inference-id-index

  - exists: test-always-include-inference-id-index.mappings.properties.semantic_field.inference_id

setup:
  - requires:
      cluster_features: [ "mapper.provide_index_sort_setting_defaults" ]
      reason: "testing index sort setting defaults"
  - requires:
      test_runner_features: [ "allowed_warnings" ]

---
"test standard mode":
  - do:
      indices.create:
        index: test-standard
        body:
          mappings:
            properties:
              "@timestamp":
                 type: date
              host.name:
                type: keyword

  - do:
      indices.get_settings:
        index: test-standard
        include_defaults: true

  - match: { test-standard.defaults.index.mode: standard }
  - match: { test-standard.defaults.index.sort.field: [] }
  - match: { test-standard.defaults.index.sort.order: [] }
  - match: { test-standard.defaults.index.sort.mode: [] }
  - match: { test-standard.defaults.index.sort.missing: [] }

---
create logsdb data stream with host.name as keyword:
  - do:
      cluster.put_component_template:
        name: "logsdb-mappings"
        body:
          template:
            settings:
              mode: "logsdb"
            mappings:
              properties:
                host.name:
                  type: "keyword"

  - do:
      indices.put_index_template:
        name: "logsdb-index-template"
        body:
          index_patterns: ["logsdb"]
          data_stream: {}
          composed_of: ["logsdb-mappings"]
      allowed_warnings:
        - "index template [logsdb-index-template] has index patterns [logsdb] matching patterns from existing older templates [global] with patterns (global => [*]); this template [logsdb-index-template] will take precedence during new index creation"

  - do:
      indices.create_data_stream:
        name: "logsdb"

  - is_true: acknowledged
  - do:
      indices.get_data_stream:
        name: "logsdb"
        expand_wildcards: hidden
  - length: { data_streams: 1 }
  - set: { data_streams.0.indices.0.index_name: backing_index }

  - do:
      indices.get_settings:
        index: $backing_index
        include_defaults: true
  - match: { .$backing_index.settings.index.mode: logsdb }
  - match: { .$backing_index.settings.index.logsdb.add_host_name_field: null }
  - match: { .$backing_index.defaults.index.logsdb.add_host_name_field: "false" }
  - match: { .$backing_index.settings.index.logsdb.sort_on_host_name: "true" }
  - match: { .$backing_index.defaults.index.sort.field: [ "host.name", "@timestamp" ] }
  - match: { .$backing_index.defaults.index.sort.order: [ "asc", "desc" ] }
  - match: { .$backing_index.defaults.index.sort.mode: [ "min", "max" ] }
  - match: { .$backing_index.defaults.index.sort.missing: [ "_last", "_last" ] }

---
create logsdb data stream with host.name as keyword and timestamp as date:
  - do:
      cluster.put_component_template:
        name: "logsdb-mappings"
        body:
          template:
            settings:
              mode: "logsdb"
            mappings:
              properties:
                host.name:
                  type: "keyword"
                "@timestamp":
                  type: "date"

  - do:
      indices.put_index_template:
        name: "logsdb-index-template"
        body:
          index_patterns: ["logsdb"]
          data_stream: {}
          composed_of: ["logsdb-mappings"]
      allowed_warnings:
        - "index template [logsdb-index-template] has index patterns [logsdb] matching patterns from existing older templates [global] with patterns (global => [*]); this template [logsdb-index-template] will take precedence during new index creation"

  - do:
      indices.create_data_stream:
        name: "logsdb"

  - is_true: acknowledged
  - do:
      indices.get_data_stream:
        name: "logsdb"
        expand_wildcards: hidden
  - length: { data_streams: 1 }
  - set: { data_streams.0.indices.0.index_name: backing_index }

  - do:
      indices.get_settings:
        index: $backing_index
        include_defaults: true
  - match: { .$backing_index.settings.index.mode: logsdb }
  - match: { .$backing_index.settings.index.logsdb.add_host_name_field: null }
  - match: { .$backing_index.defaults.index.logsdb.add_host_name_field: "false" }
  - match: { .$backing_index.settings.index.logsdb.sort_on_host_name: "true" }
  - match: { .$backing_index.defaults.index.sort.field: [ "host.name", "@timestamp" ] }
  - match: { .$backing_index.defaults.index.sort.order: [ "asc", "desc" ] }
  - match: { .$backing_index.defaults.index.sort.mode: [ "min", "max" ] }
  - match: { .$backing_index.defaults.index.sort.missing: [ "_last", "_last" ] }

---
create logsdb data stream with message as pattern text, and timestamp as date:
  - do:
      cluster.put_component_template:
        name: "logsdb-mappings"
        body:
          template:
            settings:
              mode: "logsdb"
              logsdb.default_sort_on_message_template: true
            mappings:
              properties:
                message:
                  type: pattern_text
                host:
                  type: keyword
                "@timestamp":
                  type: "date"

  - do:
      indices.put_index_template:
        name: "logsdb-index-template"
        body:
          index_patterns: ["logsdb"]
          data_stream: {}
          composed_of: ["logsdb-mappings"]
      allowed_warnings:
        - "index template [logsdb-index-template] has index patterns [logsdb] matching patterns from existing older templates [global] with patterns (global => [*]); this template [logsdb-index-template] will take precedence during new index creation"

  - do:
      indices.create_data_stream:
        name: "logsdb"

  - is_true: acknowledged
  - do:
      indices.get_data_stream:
        name: "logsdb"
        expand_wildcards: hidden
  - length: { data_streams: 1 }
  - set: { data_streams.0.indices.0.index_name: backing_index }

  - do:
      indices.get_settings:
        index: $backing_index
        include_defaults: true
  - match: { .$backing_index.settings.index.mode: logsdb }
  - match: { .$backing_index.settings.index.logsdb.add_host_name_field: null }
  - match: { .$backing_index.defaults.index.logsdb.add_host_name_field: "false" }
  - match: { .$backing_index.settings.index.logsdb.sort_on_host_name: null }
  - match: { .$backing_index.defaults.index.logsdb.sort_on_host_name: "false" }
  - match: { .$backing_index.settings.index.logsdb.sort_on_message_template: "true" }
  - match: { .$backing_index.defaults.index.sort.field: [ "message.template_id", "@timestamp" ] }
  - match: { .$backing_index.defaults.index.sort.order: [ "asc", "desc" ] }
  - match: { .$backing_index.defaults.index.sort.mode: [ "min", "max" ] }
  - match: { .$backing_index.defaults.index.sort.missing: [ "_last", "_last" ] }


---
create logsdb data stream with host.name as keyword, message as pattern text, and timestamp as date:
  - do:
      cluster.put_component_template:
        name: "logsdb-mappings"
        body:
          template:
            settings:
              mode: "logsdb"
              logsdb.default_sort_on_message_template: true
            mappings:
              properties:
                host.name:
                  type: "keyword"
                message:
                  type: pattern_text
                "@timestamp":
                  type: "date"

  - do:
      indices.put_index_template:
        name: "logsdb-index-template"
        body:
          index_patterns: ["logsdb"]
          data_stream: {}
          composed_of: ["logsdb-mappings"]
      allowed_warnings:
        - "index template [logsdb-index-template] has index patterns [logsdb] matching patterns from existing older templates [global] with patterns (global => [*]); this template [logsdb-index-template] will take precedence during new index creation"

  - do:
      indices.create_data_stream:
        name: "logsdb"

  - is_true: acknowledged
  - do:
      indices.get_data_stream:
        name: "logsdb"
        expand_wildcards: hidden
  - length: { data_streams: 1 }
  - set: { data_streams.0.indices.0.index_name: backing_index }

  - do:
      indices.get_settings:
        index: $backing_index
        include_defaults: true
  - match: { .$backing_index.settings.index.mode: logsdb }
  - match: { .$backing_index.settings.index.logsdb.add_host_name_field: null }
  - match: { .$backing_index.defaults.index.logsdb.add_host_name_field: "false" }
  - match: { .$backing_index.settings.index.logsdb.sort_on_host_name: "true" }
  - match: { .$backing_index.settings.index.logsdb.sort_on_message_template: "true" }
  - match: { .$backing_index.defaults.index.sort.field: [ "host.name", "message.template_id", "@timestamp" ] }
  - match: { .$backing_index.defaults.index.sort.order: [ "asc", "asc", "desc" ] }
  - match: { .$backing_index.defaults.index.sort.mode: [ "min", "min", "max" ] }
  - match: { .$backing_index.defaults.index.sort.missing: [ "_last", "_last", "_last" ] }

---
create logsdb data stream with host.name as keyword, message as pattern text, and timestamp as date, but message sort disabled:
  - do:
      cluster.put_component_template:
        name: "logsdb-mappings"
        body:
          template:
            settings:
              mode: "logsdb"
            mappings:
              properties:
                host.name:
                  type: "keyword"
                message:
                  type: pattern_text
                "@timestamp":
                  type: "date"

  - do:
      indices.put_index_template:
        name: "logsdb-index-template"
        body:
          index_patterns: ["logsdb"]
          data_stream: {}
          composed_of: ["logsdb-mappings"]
      allowed_warnings:
        - "index template [logsdb-index-template] has index patterns [logsdb] matching patterns from existing older templates [global] with patterns (global => [*]); this template [logsdb-index-template] will take precedence during new index creation"

  - do:
      indices.create_data_stream:
        name: "logsdb"

  - is_true: acknowledged
  - do:
      indices.get_data_stream:
        name: "logsdb"
        expand_wildcards: hidden
  - length: { data_streams: 1 }
  - set: { data_streams.0.indices.0.index_name: backing_index }

  - do:
      indices.get_settings:
        index: $backing_index
        include_defaults: true
  - match: { .$backing_index.settings.index.mode: logsdb }
  - match: { .$backing_index.settings.index.logsdb.add_host_name_field: null }
  - match: { .$backing_index.defaults.index.logsdb.add_host_name_field: "false" }
  - match: { .$backing_index.settings.index.logsdb.sort_on_host_name: "true" }
  - match: { .$backing_index.settings.index.logsdb.sort_on_message_template: null}
  - match: { .$backing_index.defaults.index.logsdb.sort_on_message_template: "false" }
  - match: { .$backing_index.settings.index.logsdb.default_sort_on_message_template: null }
  - match: { .$backing_index.defaults.index.logsdb.default_sort_on_message_template: "false" }
  - match: { .$backing_index.defaults.index.sort.field: [ "host.name", "@timestamp" ] }
  - match: { .$backing_index.defaults.index.sort.order: [ "asc", "desc" ] }
  - match: { .$backing_index.defaults.index.sort.mode: [ "min", "max" ] }
  - match: { .$backing_index.defaults.index.sort.missing: [ "_last", "_last" ] }

---
create logsdb data stream with host.name as integer and timestamp as date:
  - do:
      cluster.put_component_template:
        name: "logsdb-mappings"
        body:
          template:
            settings:
              mode: "logsdb"
            mappings:
              properties:
                host.name:
                  type: "integer"
                "@timestamp":
                  type: "date"

  - do:
      indices.put_index_template:
        name: "logsdb-index-template"
        body:
          index_patterns: ["logsdb"]
          data_stream: {}
          composed_of: ["logsdb-mappings"]
      allowed_warnings:
        - "index template [logsdb-index-template] has index patterns [logsdb] matching patterns from existing older templates [global] with patterns (global => [*]); this template [logsdb-index-template] will take precedence during new index creation"

  - do:
      indices.create_data_stream:
        name: "logsdb"
  - is_true: acknowledged

  - do:
      indices.get_data_stream:
        name: "logsdb"
        expand_wildcards: hidden
  - length: { data_streams: 1 }
  - set: { data_streams.0.indices.0.index_name: backing_index }

  - do:
      indices.get_settings:
        index: $backing_index
        include_defaults: true
  - match: { .$backing_index.settings.index.mode: logsdb }
  - match: { .$backing_index.settings.index.logsdb.add_host_name_field: null }
  - match: { .$backing_index.defaults.index.logsdb.add_host_name_field: "false" }
  - match: { .$backing_index.settings.index.logsdb.sort_on_host_name: "true" }
  - match: { .$backing_index.defaults.index.sort.field: [ "host.name", "@timestamp" ] }
  - match: { .$backing_index.defaults.index.sort.order: [ "asc", "desc" ] }
  - match: { .$backing_index.defaults.index.sort.mode: [ "min", "max" ] }
  - match: { .$backing_index.defaults.index.sort.missing: [ "_last", "_last" ] }
---

create logsdb data stream with no host.name and timestamp as date:
  - do:
      cluster.put_component_template:
        name: "logsdb-mappings"
        body:
          template:
            settings:
              mode: "logsdb"
            mappings:
              properties:
                "@timestamp":
                  type: "date"

  - do:
      indices.put_index_template:
        name: "logsdb-index-template"
        body:
          index_patterns: [ "logsdb" ]
          data_stream: { }
          composed_of: [ "logsdb-mappings" ]
      allowed_warnings:
        - "index template [logsdb-index-template] has index patterns [logsdb] matching patterns from existing older templates [global] with patterns (global => [*]); this template [logsdb-index-template] will take precedence during new index creation"

  - do:
      indices.create_data_stream:
        name: "logsdb"
  - is_true: acknowledged

  - do:
      indices.get_data_stream:
        name: "logsdb"
        expand_wildcards: hidden
  - length: { data_streams: 1 }
  - set: { data_streams.0.indices.0.index_name: backing_index }

  - do:
      indices.get_settings:
        index: $backing_index
        include_defaults: true
  - match: { .$backing_index.settings.index.mode: logsdb }
  - match: { .$backing_index.settings.index.logsdb.add_host_name_field: "true" }
  - match: { .$backing_index.settings.index.logsdb.sort_on_host_name: "true" }
  - match: { .$backing_index.defaults.index.sort.field: [ "host.name", "@timestamp" ] }
  - match: { .$backing_index.defaults.index.sort.order: [ "asc", "desc" ] }
  - match: { .$backing_index.defaults.index.sort.mode: [ "min", "max" ] }
  - match: { .$backing_index.defaults.index.sort.missing: [ "_last", "_last" ] }

---
create logsdb data stream with host as keyword and timestamp as date:
  - do:
      cluster.put_component_template:
        name: "logsdb-mappings"
        body:
          template:
            settings:
              mode: "logsdb"
            mappings:
              properties:
                host:
                  type: "keyword"
                "@timestamp":
                  type: "date"

  - do:
      indices.put_index_template:
        name: "logsdb-index-template"
        body:
          index_patterns: [ "logsdb" ]
          data_stream: { }
          composed_of: [ "logsdb-mappings" ]
      allowed_warnings:
        - "index template [logsdb-index-template] has index patterns [logsdb] matching patterns from existing older templates [global] with patterns (global => [*]); this template [logsdb-index-template] will take precedence during new index creation"

  - do:
      indices.create_data_stream:
        name: "logsdb"
  - is_true: acknowledged

  - do:
      indices.get_data_stream:
        name: "logsdb"
        expand_wildcards: hidden
  - length: { data_streams: 1 }
  - set: { data_streams.0.indices.0.index_name: backing_index }

  - do:
      indices.get_settings:
        index: $backing_index
        include_defaults: true
  - match: { .$backing_index.settings.index.mode: logsdb }
  - match: { .$backing_index.settings.index.logsdb.add_host_name_field: null }
  - match: { .$backing_index.defaults.index.logsdb.add_host_name_field: "false" }
  - match: { .$backing_index.settings.index.logsdb.sort_on_host_name: null }
  - match: { .$backing_index.defaults.index.logsdb.sort_on_host_name: "false" }
  - match: { .$backing_index.defaults.index.sort.field: [ "@timestamp" ] }
  - match: { .$backing_index.defaults.index.sort.order: [ "desc" ] }
  - match: { .$backing_index.defaults.index.sort.mode: [ "max" ] }
  - match: { .$backing_index.defaults.index.sort.missing: [ "_last" ] }

---
create logsdb data stream with host as keyword:
  - requires:
      test_runner_features: [ "allowed_warnings" ]

  - do:
      cluster.put_component_template:
        name: "logsdb-mappings"
        body:
          template:
            settings:
              mode: "logsdb"
            mappings:
              properties:
                host:
                  type: "keyword"

  - do:
      indices.put_index_template:
        name: "logsdb-index-template"
        body:
          index_patterns: ["logsdb"]
          data_stream: {}
          composed_of: ["logsdb-mappings"]
      allowed_warnings:
        - "index template [logsdb-index-template] has index patterns [logsdb] matching patterns from existing older templates [global] with patterns (global => [*]); this template [logsdb-index-template] will take precedence during new index creation"

  - do:
      indices.create_data_stream:
        name: "logsdb"

  - is_true: acknowledged

  - do:
      indices.get_data_stream:
        name: "logsdb"
        expand_wildcards: hidden
  - length: { data_streams: 1 }
  - set: { data_streams.0.indices.0.index_name: backing_index }

  - do:
      indices.get_settings:
        index: $backing_index
        include_defaults: true
  - match: { .$backing_index.settings.index.mode: logsdb }
  - match: { .$backing_index.settings.index.logsdb.add_host_name_field: null }
  - match: { .$backing_index.defaults.index.logsdb.add_host_name_field: "false" }
  - match: { .$backing_index.settings.index.logsdb.sort_on_host_name: null }
  - match: { .$backing_index.defaults.index.logsdb.sort_on_host_name: "false" }
  - match: { .$backing_index.defaults.index.sort.field: [ "@timestamp" ] }
  - match: { .$backing_index.defaults.index.sort.order: [ "desc" ] }
  - match: { .$backing_index.defaults.index.sort.mode: [ "max" ] }
  - match: { .$backing_index.defaults.index.sort.missing: [ "_last" ] }
---
create logsdb data stream with host as text and multi fields:
  - requires:
      test_runner_features: [ "allowed_warnings" ]

  - do:
      cluster.put_component_template:
        name: "logsdb-mappings"
        body:
          template:
            settings:
              mode: "logsdb"
            mappings:
              properties:
                host:
                  type: "text"
                  fields:
                    keyword:
                      ignore_above: 256
                      type: "keyword"
                "@timestamp":
                  type: "date"
                  format: "strict_date_optional_time"

  - do:
      indices.put_index_template:
        name: "logsdb-index-template"
        body:
          index_patterns: ["logsdb"]
          data_stream: {}
          composed_of: ["logsdb-mappings"]
      allowed_warnings:
        - "index template [logsdb-index-template] has index patterns [logsdb] matching patterns from existing older templates [global] with patterns (global => [*]); this template [logsdb-index-template] will take precedence during new index creation"

  - do:
      indices.create_data_stream:
        name: "logsdb"

  - is_true: acknowledged

  - do:
      indices.get_data_stream:
        name: "logsdb"
        expand_wildcards: hidden
  - length: { data_streams: 1 }
  - set: { data_streams.0.indices.0.index_name: backing_index }

  - do:
      indices.get_settings:
        index: $backing_index
        include_defaults: true
  - match: { .$backing_index.settings.index.mode: logsdb }
  - match: { .$backing_index.settings.index.logsdb.add_host_name_field: null }
  - match: { .$backing_index.defaults.index.logsdb.add_host_name_field: "false" }
  - match: { .$backing_index.settings.index.logsdb.sort_on_host_name: null }
  - match: { .$backing_index.defaults.index.logsdb.sort_on_host_name: "false" }
  - match: { .$backing_index.defaults.index.sort.field: [ "@timestamp" ] }
  - match: { .$backing_index.defaults.index.sort.order: [ "desc" ] }
  - match: { .$backing_index.defaults.index.sort.mode: [ "max" ] }
  - match: { .$backing_index.defaults.index.sort.missing: [ "_last" ] }

---
create logsdb data stream with host as text:
  - requires:
      test_runner_features: [ "allowed_warnings" ]

  - do:
      cluster.put_component_template:
        name: "logsdb-mappings"
        body:
          template:
            settings:
              mode: "logsdb"
            mappings:
              properties:
                host:
                  type: "text"
                "@timestamp":
                  type: "date"
                  format: "strict_date_optional_time"

  - do:
      indices.put_index_template:
        name: "logsdb-index-template"
        body:
          index_patterns: ["logsdb"]
          data_stream: {}
          composed_of: ["logsdb-mappings"]
      allowed_warnings:
        - "index template [logsdb-index-template] has index patterns [logsdb] matching patterns from existing older templates [global] with patterns (global => [*]); this template [logsdb-index-template] will take precedence during new index creation"

  - do:
      indices.create_data_stream:
        name: "logsdb"

  - is_true: acknowledged

  - do:
      indices.get_data_stream:
        name: "logsdb"
        expand_wildcards: hidden
  - length: { data_streams: 1 }
  - set: { data_streams.0.indices.0.index_name: backing_index }

  - do:
      indices.get_settings:
        index: $backing_index
        include_defaults: true
  - match: { .$backing_index.settings.index.mode: logsdb }
  - match: { .$backing_index.settings.index.logsdb.add_host_name_field: null }
  - match: { .$backing_index.defaults.index.logsdb.add_host_name_field: "false" }
  - match: { .$backing_index.settings.index.logsdb.sort_on_host_name: null }
  - match: { .$backing_index.defaults.index.logsdb.sort_on_host_name: "false" }
  - match: { .$backing_index.defaults.index.sort.field: [ "@timestamp" ] }
  - match: { .$backing_index.defaults.index.sort.order: [ "desc" ] }
  - match: { .$backing_index.defaults.index.sort.mode: [ "max" ] }
  - match: { .$backing_index.defaults.index.sort.missing: [ "_last" ] }
---
create logsdb data stream with host as text and name as double:
  - requires:
      test_runner_features: [ "allowed_warnings" ]

  - do:
      cluster.put_component_template:
        name: "logsdb-mappings"
        body:
          template:
            settings:
              mode: "logsdb"
            mappings:
              properties:
                host:
                  type: "text"
                  fields:
                    name:
                      type: "double"
                "@timestamp":
                  type: "date"
                  format: "strict_date_optional_time"

  - do:
      indices.put_index_template:
        name: "logsdb-index-template"
        body:
          index_patterns: ["logsdb"]
          data_stream: {}
          composed_of: ["logsdb-mappings"]
      allowed_warnings:
        - "index template [logsdb-index-template] has index patterns [logsdb] matching patterns from existing older templates [global] with patterns (global => [*]); this template [logsdb-index-template] will take precedence during new index creation"

  - do:
      indices.create_data_stream:
        name: "logsdb"

  - is_true: acknowledged

  - do:
      indices.get_data_stream:
        name: "logsdb"
        expand_wildcards: hidden
  - length: { data_streams: 1 }
  - set: { data_streams.0.indices.0.index_name: backing_index }

  - do:
      indices.get_settings:
        index: $backing_index
        include_defaults: true
  - match: { .$backing_index.settings.index.mode: logsdb }
  - match: { .$backing_index.settings.index.logsdb.add_host_name_field: null }
  - match: { .$backing_index.defaults.index.logsdb.add_host_name_field: "false" }
  - match: { .$backing_index.settings.index.logsdb.sort_on_host_name: "true" }
  - match: { .$backing_index.defaults.index.sort.field: [ "host.name", "@timestamp" ] }
  - match: { .$backing_index.defaults.index.sort.order: [ "asc", "desc" ] }
  - match: { .$backing_index.defaults.index.sort.mode: [ "min", "max" ] }
  - match: { .$backing_index.defaults.index.sort.missing: [ "_last", "_last" ] }

---
create logsdb data stream with non-default sort field:
  - do:
      cluster.put_component_template:
        name: "logsdb-mappings"
        body:
          template:
            settings:
              mode: "logsdb"
              index.sort.field: ["some_field"]
            mappings:
              properties:
                some_field:
                  type: "keyword"
                "@timestamp":
                  type: "date"

  - do:
      indices.put_index_template:
        name: "logsdb-index-template"
        body:
          index_patterns: ["logsdb"]
          data_stream: {}
          composed_of: ["logsdb-mappings"]
      allowed_warnings:
        - "index template [logsdb-index-template] has index patterns [logsdb] matching patterns from existing older templates [global] with patterns (global => [*]); this template [logsdb-index-template] will take precedence during new index creation"

  - do:
      indices.create_data_stream:
        name: "logsdb"

  - is_true: acknowledged
  - do:
      indices.get_data_stream:
        name: "logsdb"
        expand_wildcards: hidden
  - length: { data_streams: 1 }
  - set: { data_streams.0.indices.0.index_name: backing_index }

  - do:
      indices.get_settings:
        index: $backing_index
        include_defaults: true
  - match: { .$backing_index.settings.index.mode: logsdb }
  - match: { .$backing_index.settings.index.sort.field: [ "some_field" ] }
  - match: { .$backing_index.defaults.index.sort.order: [ "asc" ] }
  - match: { .$backing_index.defaults.index.sort.mode: [ "min" ] }
  - match: { .$backing_index.defaults.index.sort.missing: [ "_last" ] }

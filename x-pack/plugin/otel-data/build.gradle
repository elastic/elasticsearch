/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
plugins {
  id 'elasticsearch.internal-es-plugin'
  id 'elasticsearch.internal-yaml-rest-test'
  id 'elasticsearch.internal-cluster-test'
}

esplugin {
  name = 'x-pack-otel-data'
  description = 'The OTEL plugin defines OTEL data streams and ingest pipelines.'
  classname ='org.elasticsearch.xpack.oteldata.OTelPlugin'
  extendedPlugins = ['x-pack-core']
}

dependencies {
  api project(":libs:exponential-histogram")
  compileOnly project(path: xpackModule('core'))
  testImplementation(testArtifact(project(xpackModule('core'))))
  // for yamlRestTest
  clusterModules project(':modules:data-streams')
  clusterModules project(':modules:ingest-common')
  clusterModules project(':modules:ingest-geoip')
  clusterModules project(':modules:ingest-user-agent')
  clusterModules project(':modules:lang-mustache')
  clusterModules project(':modules:mapper-extras')
  clusterModules project(xpackModule('analytics'))
  clusterModules project(xpackModule('ilm'))
  clusterModules project(xpackModule('mapper-aggregate-metric'))
  clusterModules project(xpackModule('mapper-constant-keyword'))
  clusterModules project(xpackModule('mapper-counted-keyword'))
  clusterModules project(xpackModule('stack'))
  clusterModules project(xpackModule('wildcard'))
  clusterModules project(xpackModule('mapper-version'))
  // for internalClusterTest
  testImplementation project(':modules:data-streams')
  testImplementation project(':x-pack:plugin:esql')
  testImplementation project(':x-pack:plugin:esql-core')
  testImplementation project(':modules:data-streams')
  testImplementation project(':modules:ingest-common')
  testImplementation project(':modules:ingest-geoip')
  testImplementation project(':modules:ingest-user-agent')
  testImplementation project(':modules:lang-mustache')
  testImplementation project(':modules:lang-painless')
  testImplementation project(':modules:lang-painless:spi')
  testImplementation project(':modules:mapper-extras')
  testImplementation project(xpackModule('analytics'))
  testImplementation project(xpackModule('ilm'))
  testImplementation project(xpackModule('mapper-aggregate-metric'))
  testImplementation project(xpackModule('mapper-constant-keyword'))
  testImplementation project(xpackModule('mapper-counted-keyword'))
  testImplementation project(xpackModule('stack'))
  testImplementation project(xpackModule('wildcard'))
  testImplementation project(xpackModule('mapper-version'))

  def otelVersion = "1.53.0"
  testImplementation "io.opentelemetry:opentelemetry-api:$otelVersion"
  testImplementation "io.opentelemetry:opentelemetry-common:$otelVersion"
  testImplementation "io.opentelemetry:opentelemetry-context:$otelVersion"
  testImplementation "io.opentelemetry:opentelemetry-sdk:$otelVersion"
  testImplementation "io.opentelemetry:opentelemetry-sdk-common:$otelVersion"
  testImplementation "io.opentelemetry:opentelemetry-sdk-metrics:$otelVersion"
  testImplementation "io.opentelemetry:opentelemetry-exporter-common:$otelVersion"
  testImplementation "io.opentelemetry:opentelemetry-exporter-otlp:$otelVersion"
  testImplementation "io.opentelemetry:opentelemetry-exporter-otlp-common:$otelVersion"
  testImplementation "io.opentelemetry:opentelemetry-exporter-sender-jdk:$otelVersion"
  testImplementation "io.opentelemetry:opentelemetry-sdk-extension-autoconfigure:$otelVersion"
  testImplementation "io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi:$otelVersion"
}

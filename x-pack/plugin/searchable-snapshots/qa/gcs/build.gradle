import org.apache.tools.ant.filters.ReplaceTokens
import org.elasticsearch.gradle.internal.info.BuildParams

import java.nio.file.Files
import java.security.KeyPair
import java.security.KeyPairGenerator

import static org.elasticsearch.gradle.PropertyNormalization.IGNORE_VALUE

apply plugin: 'elasticsearch.legacy-java-rest-test'
apply plugin: 'elasticsearch.rest-resources'

final Project fixture = project(':test:fixtures:gcs-fixture')
final Project repositoryPlugin = project(':plugins:repository-gcs')

dependencies {
  javaRestTestImplementation(testArtifact(project(xpackModule('searchable-snapshots'))))
  javaRestTestImplementation repositoryPlugin
}

restResources {
  restApi {
    include 'indices', 'search', 'bulk', 'snapshot', 'nodes', '_common', 'searchable_snapshots'
  }
}

boolean useFixture = false

String gcsServiceAccount = System.getenv("google_storage_service_account")
String gcsBucket = System.getenv("google_storage_bucket")
String gcsBasePath = System.getenv("google_storage_base_path")

File serviceAccountFile = null
if (!gcsServiceAccount && !gcsBucket && !gcsBasePath) {
  serviceAccountFile = new File(project.buildDir, 'generated-resources/service_account_test.json')
  gcsBucket = 'bucket'
  gcsBasePath = 'integration_test'
  useFixture = true
} else if (!gcsServiceAccount || !gcsBucket || !gcsBasePath) {
  throw new IllegalArgumentException("not all options specified to run tests against external GCS service are present")
} else {
  serviceAccountFile = new File(gcsServiceAccount)
}

/** A service account file that points to the Google Cloud Storage service emulated by the fixture **/
tasks.register("createServiceAccountFile") {
  doLast {
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA")
    keyPairGenerator.initialize(2048)
    KeyPair keyPair = keyPairGenerator.generateKeyPair()
    String encodedKey = Base64.getEncoder().encodeToString(keyPair.private.getEncoded())

    serviceAccountFile.parentFile.mkdirs()
    serviceAccountFile.setText("{\n" +
      '  "type": "service_account",\n' +
      '  "project_id": "integration_test",\n' +
      '  "private_key_id": "' + UUID.randomUUID().toString() + '",\n' +
      '  "private_key": "-----BEGIN PRIVATE KEY-----\\n' + encodedKey + '\\n-----END PRIVATE KEY-----\\n",\n' +
      '  "client_email": "integration_test@appspot.gserviceaccount.com",\n' +
      '  "client_id": "123456789101112130594"\n' +
      '}', 'UTF-8')
  }
}

def fixtureAddress = { f ->
  assert useFixture: 'closure should not be used without a fixture'
  int ephemeralPort = project(':test:fixtures:gcs-fixture').postProcessFixture.ext."test.fixtures.${f}.tcp.80"
  assert ephemeralPort > 0
  'http://127.0.0.1:' + ephemeralPort
}

Map<String, Object> expansions = [
  'bucket'   : gcsBucket,
  'base_path': gcsBasePath + "_integration_tests"
]

tasks.named("processTestResources").configure {
  inputs.properties(expansions)
  filter("tokens" : expansions, ReplaceTokens.class)
}

if (useFixture) {
  apply plugin: 'elasticsearch.test.fixtures'
  testFixtures.useFixture(fixture.path, 'gcs-fixture-other')
}

tasks.named("javaRestTest").configure {
  systemProperty 'test.gcs.bucket', gcsBucket
  nonInputProperties.systemProperty 'test.gcs.base_path', gcsBasePath + "_searchable_snapshots_tests" + BuildParams.testSeed

  if (useFixture) {
    dependsOn "createServiceAccountFile"
  }
}

testClusters.matching { it.name == "javaRestTest" }.configureEach {
  testDistribution = 'DEFAULT'
  plugin repositoryPlugin.path

  keystore 'gcs.client.searchable_snapshots.credentials_file', serviceAccountFile, IGNORE_VALUE
  if (useFixture) {
    /* Use a closure on the string to delay evaluation until tests are executed */
    setting 'gcs.client.searchable_snapshots.endpoint', { "${-> fixtureAddress('gcs-fixture-other')}" }, IGNORE_VALUE
    setting 'gcs.client.searchable_snapshots.token_uri', { "${-> fixtureAddress('gcs-fixture-other')}/o/oauth2/token" }, IGNORE_VALUE
  } else {
    println "Using an external service to test " + project.name
  }

  setting 'xpack.license.self_generated.type', 'trial'

  setting 'xpack.searchable.snapshot.shared_cache.size', '16MB'
  setting 'xpack.searchable.snapshot.shared_cache.region_size', '256KB'
  setting 'xpack.searchable_snapshots.cache_fetch_async_thread_pool.keep_alive', '0ms'

  setting 'xpack.security.enabled', 'false'
}


tasks.register("gcsThirdPartyTest")  {
  dependsOn "javaRestTest"
}

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import org.elasticsearch.gradle.internal.info.BuildParams
import static org.elasticsearch.gradle.PropertyNormalization.IGNORE_VALUE

apply plugin: 'elasticsearch.legacy-java-rest-test'
apply plugin: 'elasticsearch.rest-resources'

final Project fixture = project(':test:fixtures:azure-fixture')
final Project repositoryPlugin = project(':plugins:repository-azure')

dependencies {
  javaRestTestImplementation testArtifact(project(xpackModule('snapshot-repo-test-kit')))
  javaRestTestImplementation repositoryPlugin
}

restResources {
  restApi {
    include 'indices', 'search', 'bulk', 'snapshot', 'nodes', '_common', 'snapshot_repo_test_kit'
  }
}

boolean useFixture = false
String azureAccount = System.getenv("azure_storage_account")
String azureKey = System.getenv("azure_storage_key")
String azureContainer = System.getenv("azure_storage_container")
String azureBasePath = System.getenv("azure_storage_base_path")
String azureSasToken = System.getenv("azure_storage_sas_token")

if (!azureAccount && !azureKey && !azureContainer && !azureBasePath && !azureSasToken) {
  azureAccount = 'azure_integration_test_account'
  azureKey = 'YXp1cmVfaW50ZWdyYXRpb25fdGVzdF9rZXk=' // The key is "azure_integration_test_key" encoded using base64
  azureContainer = 'container'
  azureBasePath = ''
  azureSasToken = ''
  useFixture = true

}

if (useFixture) {
  apply plugin: 'elasticsearch.test.fixtures'
  testFixtures.useFixture(fixture.path, 'azure-fixture-repository-test-kit')
}

testClusters.configureEach {
  setting 'xpack.security.enabled', 'false'
}

tasks.named("javaRestTest").configure {
  systemProperty 'test.azure.container', azureContainer
  nonInputProperties.systemProperty 'test.azure.base_path', azureBasePath + "_repository_test_kit_tests_" + BuildParams.testSeed
}

testClusters.matching { it.name == "javaRestTest" }.configureEach {
  testDistribution = 'DEFAULT'
  plugin repositoryPlugin.path

  keystore 'azure.client.repository_test_kit.account', azureAccount
  if (azureKey != null && azureKey.isEmpty() == false) {
    keystore 'azure.client.repository_test_kit.key', azureKey
  }
  if (azureSasToken != null && azureSasToken.isEmpty() == false) {
    keystore 'azure.client.repository_test_kit.sas_token', azureSasToken
  }

  if (useFixture) {
    def fixtureAddress = { fixtureName ->
      assert useFixture: 'closure should not be used without a fixture'
      int ephemeralPort =  fixture.postProcessFixture.ext."test.fixtures.${fixtureName}.tcp.8091"
      assert ephemeralPort > 0
      '127.0.0.1:' + ephemeralPort
    }
    setting 'azure.client.repository_test_kit.endpoint_suffix',
      { "ignored;DefaultEndpointsProtocol=http;BlobEndpoint=http://${-> fixtureAddress('azure-fixture-other')}/azure_integration_test_account" }, IGNORE_VALUE

  } else {
    println "Using an external service to test " + project.name
  }
}

tasks.register("azureThirdPartyTest") {
  dependsOn "javaRestTest"
}

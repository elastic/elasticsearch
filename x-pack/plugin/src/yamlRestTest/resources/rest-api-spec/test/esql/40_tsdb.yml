setup:
  - requires:
      test_runner_features: allowed_warnings_regex
  - do:
      indices.create:
          index: test
          body:
            settings:
              index:
                mode: time_series
                routing_path: [metricset, k8s.pod.uid]
                time_series:
                  start_time: 2021-04-28T00:00:00Z
                  end_time: 2021-04-29T00:00:00Z
            mappings:
              properties:
                "@timestamp":
                  type: date
                metricset:
                  type: keyword
                  time_series_dimension: true
                k8s:
                  properties:
                    pod:
                      properties:
                        uid:
                          type: keyword
                          time_series_dimension: true
                        name:
                          type: keyword
                        ip:
                          type: ip
                        network:
                          properties:
                            tx:
                              type: long
                              time_series_metric: counter
                            rx:
                              type: integer
                              time_series_metric: counter
  - do:
      bulk:
        refresh: true
        index: test
        body:
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T18:50:04.467Z", "metricset": "pod", "k8s": {"pod": {"name": "cat", "uid":"947e4ced-1786-4e53-9e0c-5c447e959507", "ip": "10.10.55.1", "network": {"tx": 2001818691, "rx": 802133794}}}}'
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T18:50:24.467Z", "metricset": "pod", "k8s": {"pod": {"name": "cat", "uid":"947e4ced-1786-4e53-9e0c-5c447e959507", "ip": "10.10.55.1", "network": {"tx": 2005177954, "rx": 801479970}}}}'
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T18:50:44.467Z", "metricset": "pod", "k8s": {"pod": {"name": "cat", "uid":"947e4ced-1786-4e53-9e0c-5c447e959507", "ip": "10.10.55.1", "network": {"tx": 2006223737, "rx": 802337279}}}}'
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T18:51:04.467Z", "metricset": "pod", "k8s": {"pod": {"name": "cat", "uid":"947e4ced-1786-4e53-9e0c-5c447e959507", "ip": "10.10.55.2", "network": {"tx": 2012916202, "rx": 803685721}}}}'
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T18:50:03.142Z", "metricset": "pod", "k8s": {"pod": {"name": "dog", "uid":"df3145b3-0563-4d3b-a0f7-897eb2876ea9", "ip": "10.10.55.3", "network": {"tx": 1434521831, "rx": 530575198}}}}'
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T18:50:23.142Z", "metricset": "pod", "k8s": {"pod": {"name": "dog", "uid":"df3145b3-0563-4d3b-a0f7-897eb2876ea9", "ip": "10.10.55.3", "network": {"tx": 1434577921, "rx": 530600088}}}}'
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T18:50:53.142Z", "metricset": "pod", "k8s": {"pod": {"name": "dog", "uid":"df3145b3-0563-4d3b-a0f7-897eb2876ea9", "ip": "10.10.55.3", "network": {"tx": 1434587694, "rx": 530604797}}}}'
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T18:51:03.142Z", "metricset": "pod", "k8s": {"pod": {"name": "dog", "uid":"df3145b3-0563-4d3b-a0f7-897eb2876ea9", "ip": "10.10.55.3", "network": {"tx": 1434595272, "rx": 530605511}}}}'

  - do:
      indices.create:
        index: test2
        body:
          settings:
            index:
              mode: time_series
              routing_path: [ dim ]
              time_series:
                start_time: 2021-04-28T00:00:00Z
                end_time: 2021-04-29T00:00:00Z
          mappings:
            properties:
              "@timestamp":
                type: date
              dim:
                type: keyword
                time_series_dimension: true
              agg_metric:
                type: aggregate_metric_double
                metrics: [ min, max, sum, value_count ]
                default_metric: max
              k8s:
                properties:
                  pod:
                    properties:
                      ip:
                        type: ip
                      network:
                        properties:
                          tx:
                            type: long
  - do:
      bulk:
        refresh: true
        index: test2
        body:
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T18:50:04.467Z", "dim": "A", "agg_metric": {"max": 10, "min": -1, "sum": 20, "value_count": 5}}'
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T18:50:24.467Z", "dim": "B", "agg_metric": {"max": 20, "min": 3, "sum": 50, "value_count": 7}}'
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T18:50:44.467Z", "dim": "B", "agg_metric": {"max": 17, "min": -5, "sum": 33, "value_count": 9}}'

  - do:
      indices.create:
        index: test3
        body:
          settings:
            index:
              mode: time_series
              routing_path: [ k8s.pod.uid ]
              time_series:
                start_time: 2021-04-28T00:00:00Z
                end_time: 2021-04-29T00:00:00Z
          mappings:
            properties:
              "@timestamp":
                type: date
              agg_metric:
                type: aggregate_metric_double
                metrics: [ min, max ]
                default_metric: min
              k8s:
                properties:
                  pod:
                    properties:
                      uid:
                        type: keyword
                        time_series_dimension: true
  - do:
      bulk:
        refresh: true
        index: test3
        body:
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T19:50:04.467Z", "agg_metric": {"max": 1, "min": -3}, "k8s": {"pod": {"uid":"947e4ced-1786-4e53-9e0c-5c447e959507"}}}'
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T19:50:24.467Z", "agg_metric": {"max": 10, "min": 3}, "k8s": {"pod": {"uid":"947e4ced-1786-4e53-9e0c-5c447e959507"}}}'
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T19:50:44.467Z", "agg_metric": {"max": 17, "min": 2}, "k8s": {"pod": {"uid":"df3145b3-0563-4d3b-a0f7-897eb2876ea9"}}}'
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T19:51:04.467Z", "k8s": {"pod": {"uid":"df3145b3-0563-4d3b-a0f7-897eb2876ea9"}}}'

  - do:
      indices.create:
        index: test4
        body:
          settings:
            index:
              mode: time_series
              routing_path: [ k8s.pod.uid ]
              time_series:
                start_time: 2021-04-28T00:00:00Z
                end_time: 2021-04-29T00:00:00Z
          mappings:
            properties:
              "@timestamp":
                type: date
              agg_metric:
                type: aggregate_metric_double
                metrics: [ sum, value_count ]
                default_metric: sum
              k8s:
                properties:
                  pod:
                    properties:
                      uid:
                        type: keyword
                        time_series_dimension: true
  - do:
      bulk:
        refresh: true
        index: test4
        body:
          - '{"index": {}}'
          - '{"@timestamp": "2021-04-28T23:50:04.467Z", "agg_metric": {"sum": 1, "value_count": 10}, "k8s": {"pod": {"uid":"947e4ced-1786-4e53-9e0c-5c447e959507"}}}'

---
load everything:
  - requires:
      cluster_features: ["gte_v8.13.0"]
      reason: "_source is available in 8.13+"
  - do:
      allowed_warnings_regex:
        - "No limit defined, adding default limit of \\[.*\\]"
      esql.query:
        body:
          query: 'from test metadata _id'

  - match: {columns.0.name: "@timestamp"}
  - match: {columns.0.type: "date"}
  - match: {columns.1.name: "k8s.pod.ip"}
  - match: {columns.1.type: "ip"}
  - match: {columns.2.name: "k8s.pod.name"}
  - match: {columns.2.type: "keyword"}
  - match: {columns.3.name: "k8s.pod.network.rx"}
  - match: {columns.3.type: "counter_integer"}
  - match: {columns.4.name: "k8s.pod.network.tx"}
  - match: {columns.4.type: "counter_long"}
  - match: {columns.5.name: "k8s.pod.uid"}
  - match: {columns.5.type: "keyword"}
  - match: {columns.6.name: "metricset"}
  - match: {columns.6.type: "keyword"}
  - length: {values: 8}

---
load a document:
  - do:
      allowed_warnings_regex:
        - "No limit defined, adding default limit of \\[.*\\]"
      esql.query:
        body:
          query: 'from test | where @timestamp == "2021-04-28T18:50:23.142Z"'

  - length: {values: 1}
  - length: {values.0: 7}
  - match: {values.0.0: "2021-04-28T18:50:23.142Z"}
  - match: {values.0.1: "10.10.55.3"}
  - match: {values.0.2: "dog"}
  - match: {values.0.3: 530600088 }
  - match: {values.0.4: 1434577921 }
  - match: {values.0.5: "df3145b3-0563-4d3b-a0f7-897eb2876ea9"}
  - match: {values.0.6: "pod"}

---
filter on counter without cast:
  - do:
      catch: bad_request
      esql.query:
        body:
          query: 'from test | where k8s.pod.network.tx == 1434577921'

---
cast counter then filter:
  - do:
      esql.query:
        body:
          query: 'from test | where k8s.pod.network.tx::long == 2005177954 and k8s.pod.network.rx::integer == 801479970 | sort @timestamp | limit 10'
  - length: {values: 1}
  - length: {values.0: 7}
  - match: {values.0.0: "2021-04-28T18:50:24.467Z"}
  - match: {values.0.1: "10.10.55.1"}
  - match: {values.0.2: "cat"}
  - match: {values.0.3: 801479970 }
  - match: {values.0.4: 2005177954 }
  - match: {values.0.5: "947e4ced-1786-4e53-9e0c-5c447e959507"}
  - match: {values.0.6: "pod"}

---
sort on counter without cast:
  - requires:
      test_runner_features: [capabilities]
      capabilities:
        - method: POST
          path: /_query
          parameters: []
          capabilities: [sorting_on_source_and_counters_forbidden]
      reason: "Sorting on counters shouldn't have been possible"
  - do:
      catch: /cannot sort on counter_long/
      esql.query:
        body:
          query: 'from test |  KEEP k8s.pod.network.tx | sort k8s.pod.network.tx | limit 1'

---
cast then sort on counter:
  - do:
      esql.query:
        body:
          query: 'from test | KEEP k8s.pod.network.tx | EVAL tx=to_long(k8s.pod.network.tx) | sort tx | limit 1'
  - length: {values: 1}
  - match: {values.0.0: 1434521831 }

---
from doc with aggregate_metric_double:
  - requires:
      test_runner_features: [capabilities]
      capabilities:
        - method: POST
          path: /_query
          parameters: []
          capabilities: [aggregate_metric_double]
      reason: "Support for aggregate_metric_double"
  - do:
      allowed_warnings_regex:
        - "No limit defined, adding default limit of \\[.*\\]"
      esql.query:
        body:
          query: 'from test2'

  - match: {columns.0.name: "@timestamp"}
  - match: {columns.0.type: "date"}
  - match: {columns.1.name: "agg_metric"}
  - match: {columns.1.type: "aggregate_metric_double"}
  - match: {columns.2.name: "dim"}
  - match: {columns.2.type: "keyword"}
  - match: {columns.3.name: "k8s.pod.ip"}
  - match: {columns.3.type: "ip"}
  - match: {columns.4.name: "k8s.pod.network.tx"}
  - match: {columns.4.type: "long"}
  - length: {values: 3}

---
stats on aggregate_metric_double:
  - requires:
      test_runner_features: [capabilities]
      capabilities:
        - method: POST
          path: /_query
          parameters: []
          capabilities: [aggregate_metric_double]
      reason: "Support for aggregate_metric_double"
  - do:
      allowed_warnings_regex:
        - "No limit defined, adding default limit of \\[.*\\]"
      esql.query:
        body:
          query: 'FROM test2 | STATS max(agg_metric), min(agg_metric), sum(agg_metric), count(agg_metric)'
  - length: {values: 1}
  - length: {values.0: 4}
  - match: {columns.0.name: "max(agg_metric)"}
  - match: {columns.0.type: "double"}
  - match: {columns.1.name: "min(agg_metric)"}
  - match: {columns.1.type: "double"}
  - match: {columns.2.name: "sum(agg_metric)"}
  - match: {columns.2.type: "double"}
  - match: {columns.3.name: "count(agg_metric)"}
  - match: {columns.3.type: "long"}
  - match: {values.0.0: 20.0}
  - match: {values.0.1: -5.0}
  - match: {values.0.2: 103.0}
  - match: {values.0.3: 21.0}

---
grouping stats on aggregate_metric_double:
  - requires:
      test_runner_features: [capabilities]
      capabilities:
        - method: POST
          path: /_query
          parameters: []
          capabilities: [aggregate_metric_double]
      reason: "Support for aggregate_metric_double"
  - do:
      allowed_warnings_regex:
        - "No limit defined, adding default limit of \\[.*\\]"
      esql.query:
        body:
          query: "FROM test2
          | STATS max(agg_metric), min(agg_metric), sum(agg_metric), count(agg_metric) BY dim
          | SORT dim"
  - length: {values: 2}
  - length: {values.0: 5}
  - match: {columns.0.name: "max(agg_metric)"}
  - match: {columns.0.type: "double"}
  - match: {columns.1.name: "min(agg_metric)"}
  - match: {columns.1.type: "double"}
  - match: {columns.2.name: "sum(agg_metric)"}
  - match: {columns.2.type: "double"}
  - match: {columns.3.name: "count(agg_metric)"}
  - match: {columns.3.type: "long"}
  - match: {columns.4.name: "dim"}
  - match: {columns.4.type: "keyword"}
  - match: {values.0.0: 10.0}
  - match: {values.0.1: -1.0}
  - match: {values.0.2: 20.0}
  - match: {values.0.3: 5.0}
  - match: {values.0.4: "A"}
  - match: {values.1.0: 20.0}
  - match: {values.1.1: -5.0}
  - match: {values.1.2: 83.0}
  - match: {values.1.3: 16.0}
  - match: {values.1.4: "B"}

---
stats on aggregate_metric_double with partial submetrics:
  - requires:
      test_runner_features: [capabilities]
      capabilities:
        - method: POST
          path: /_query
          parameters: []
          capabilities: [aggregate_metric_double_partial_submetrics]
      reason: "Support for partial submetrics in aggregate_metric_double"
  - do:
      allowed_warnings_regex:
        - "No limit defined, adding default limit of \\[.*\\]"
      esql.query:
        body:
          query: 'FROM test3 | STATS max(agg_metric), min(agg_metric), sum(agg_metric), count(agg_metric) BY k8s.pod.uid | SORT k8s.pod.uid'

  - length: {values: 2}
  - length: {values.0: 5}
  - match: {columns.0.name: "max(agg_metric)"}
  - match: {columns.0.type: "double"}
  - match: {columns.1.name: "min(agg_metric)"}
  - match: {columns.1.type: "double"}
  - match: {columns.2.name: "sum(agg_metric)"}
  - match: {columns.2.type: "double"}
  - match: {columns.3.name: "count(agg_metric)"}
  - match: {columns.3.type: "long"}
  - match: {columns.4.name: "k8s.pod.uid"}
  - match: {columns.4.type: "keyword"}
  - match: {values.0.0: 10.0}
  - match: {values.0.1: -3.0}
  - match: {values.0.2: null}
  - match: {values.0.3: null}
  - match: {values.0.4: "947e4ced-1786-4e53-9e0c-5c447e959507"}
  - match: {values.1.0: 17.0}
  - match: {values.1.1: 2.0}
  - match: {values.1.2: null}
  - match: {values.1.3: null}
  - match: {values.1.4: "df3145b3-0563-4d3b-a0f7-897eb2876ea9"}

---
stats on aggregate_metric_double missing min and max:
  - requires:
      test_runner_features: [ capabilities ]
      capabilities:
        - method: POST
          path: /_query
          parameters: [ ]
          capabilities: [ aggregate_metric_double_partial_submetrics ]
      reason: "Support for partial submetrics in aggregate_metric_double"
  - do:
      allowed_warnings_regex:
        - "No limit defined, adding default limit of \\[.*\\]"
      esql.query:
        body:
          query: 'FROM test4 | STATS max(agg_metric), min(agg_metric), sum(agg_metric), count(agg_metric)'

  - length: {values: 1}
  - length: {values.0: 4}
  - match: {columns.0.name: "max(agg_metric)"}
  - match: {columns.0.type: "double"}
  - match: {columns.1.name: "min(agg_metric)"}
  - match: {columns.1.type: "double"}
  - match: {columns.2.name: "sum(agg_metric)"}
  - match: {columns.2.type: "double"}
  - match: {columns.3.name: "count(agg_metric)"}
  - match: {columns.3.type: "long"}
  - match: {values.0.0: null}
  - match: {values.0.1: null}
  - match: {values.0.2: 1.0}
  - match: {values.0.3: 10}

---
render aggregate_metric_double when missing min and max:
  - requires:
      test_runner_features: [ capabilities ]
      capabilities:
        - method: POST
          path: /_query
          parameters: [ ]
          capabilities: [ aggregate_metric_double_rendering ]
      reason: "Support for rendering aggregate_metric_doubles"
  - do:
      allowed_warnings_regex:
        - "No limit defined, adding default limit of \\[.*\\]"
      esql.query:
        body:
          query: 'FROM test4 | KEEP agg_metric'

  - length: {values: 1}
  - length: {values.0: 1}
  - match: {columns.0.name: "agg_metric"}
  - match: {columns.0.type: "aggregate_metric_double"}
  - match: {values.0.0: '{"sum":1.0,"value_count":10}'}


---
render aggregate_metric_double when missing value:
  - requires:
      test_runner_features: [ capabilities ]
      capabilities:
        - method: POST
          path: /_query
          parameters: [ ]
          capabilities: [ aggregate_metric_double_rendering ]
      reason: "Support for rendering aggregate_metric_doubles"
  - do:
      allowed_warnings_regex:
        - "No limit defined, adding default limit of \\[.*\\]"
      esql.query:
        body:
          query: 'FROM test3 | WHERE @timestamp == "2021-04-28T19:51:04.467Z" | KEEP agg_metric'

  - length: {values: 1}
  - length: {values.0: 1}
  - match: {columns.0.name: "agg_metric"}
  - match: {columns.0.type: "aggregate_metric_double"}
  - match: {values.0.0: null}


---
to_string aggregate_metric_double:
  - requires:
      test_runner_features: [ capabilities ]
      capabilities:
        - method: POST
          path: /_query
          parameters: [ ]
          capabilities: [ aggregate_metric_double_rendering ]
      reason: "Support for rendering aggregate_metric_doubles"
  - do:
      allowed_warnings_regex:
        - "No limit defined, adding default limit of \\[.*\\]"
      esql.query:
        body:
          query: 'FROM test4 | EVAL agg = to_string(agg_metric) | KEEP agg'

  - length: {values: 1}
  - length: {values.0: 1}
  - match: {columns.0.name: "agg"}
  - match: {columns.0.type: "keyword"}
  - match: {values.0.0: '{"sum":1.0,"value_count":10}'}

---
from index pattern unsupported counter:
  - requires:
      test_runner_features: [capabilities]
      capabilities:
        - method: POST
          path: /_query
          parameters: []
          capabilities: [aggregate_metric_double_partial_submetrics]
      reason: "Support for partial submetrics in aggregate_metric_double"
  - do:
      allowed_warnings_regex:
        - "No limit defined, adding default limit of \\[.*\\]"
      esql.query:
        body:
          query: 'FROM test*'

  - match: {columns.0.name: "@timestamp"}
  - match: {columns.0.type: "date"}
  - match: {columns.1.name: "agg_metric"}
  - match: {columns.1.type: "aggregate_metric_double"}
  - match: {columns.2.name: "dim"}
  - match: {columns.2.type: "keyword"}
  - match: {columns.3.name: "k8s.pod.ip"}
  - match: {columns.3.type: "ip"}
  - match: {columns.4.name: "k8s.pod.name"}
  - match: {columns.4.type: "keyword"}
  - match: {columns.5.name: "k8s.pod.network.rx"}
  - match: {columns.5.type: "counter_integer"}
  - match: {columns.6.name: "k8s.pod.network.tx"}
  - match: {columns.6.type: "unsupported"}
  - match: {columns.7.name: "k8s.pod.uid"}
  - match: {columns.7.type: "keyword"}
  - match: {columns.8.name: "metricset"}
  - match: {columns.8.type: "keyword"}
  - length: {values: 16}

---
from index pattern explicit counter use:
  - requires:
      test_runner_features: [capabilities]
      capabilities:
        - method: POST
          path: /_query
          parameters: []
          capabilities: [union_types_fix_rename_resolution]
      reason: "Union type resolution fix for rename also allows direct usage of unsupported fields in KEEP"

  - do:
      allowed_warnings_regex:
        - "No limit defined, adding default limit of \\[.*\\]"
      esql.query:
        body:
          query: 'FROM test* | keep *.tx'
  - match: {columns.0.name: "k8s.pod.network.tx"}
  - match: {columns.0.type: "unsupported"}
  - length: {values: 16}

---
_source:
  - requires:
      cluster_features: ["gte_v8.13.0"]
      reason: "_source is available in 8.13+"

  - do:
      bulk:
        index: test
        refresh: true
        body:
          - { "index" : { "_index" : "test", "_id" : "id-1" } }
          - { "wow": 1, "such": "_source", "you'd": "never", "expect": ["amazing", "source"] }

  - do:
      esql.query:
        body:
          query: 'FROM test METADATA _source | WHERE @timestamp == "2021-04-28T18:50:23.142Z" | KEEP _source | LIMIT 1'
  - match: { columns.0.name: _source }
  - match: { columns.0.type: _source }
  - length: { values: 1 }
  - match:
      values.0.0:
        "@timestamp": "2021-04-28T18:50:23.142Z"
        metricset: pod
        k8s:
          pod:
            ip: 10.10.55.3
            name: dog
            network:
              rx: 530600088
              tx: 1434577921
            uid: df3145b3-0563-4d3b-a0f7-897eb2876ea9

setup:
  - skip:
      features: headers
  - do:
      headers:
        Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" # run as x_pack_rest_user, i.e. the test setup superuser
      ml.put_trained_model:
        model_id: ltr-model
        body: >
          {
            "description": "super complex model for tests",
            "input": {"field_names": ["cost", "product"]},
            "inference_config": {
              "learning_to_rank": {
              }
            },
            "definition": {
              "preprocessors" : [{
                "one_hot_encoding": {
                  "field": "product",
                  "hot_map": {
                    "TV": "type_tv",
                    "VCR": "type_vcr",
                    "Laptop": "type_laptop"
                  }
                }
              }],
              "trained_model": {
                "ensemble": {
                  "feature_names": ["cost", "type_tv", "type_vcr", "type_laptop"],
                  "target_type": "regression",
                  "trained_models": [
                    {
                      "tree": {
                        "feature_names": [
                          "cost"
                        ],
                        "tree_structure": [
                          {
                            "node_index": 0,
                            "split_feature": 0,
                            "split_gain": 12,
                            "threshold": 400,
                            "decision_type": "lte",
                            "default_left": true,
                            "left_child": 1,
                            "right_child": 2
                          },
                          {
                            "node_index": 1,
                            "leaf_value": 5.0
                          },
                          {
                            "node_index": 2,
                            "leaf_value": 2.0
                          }
                        ],
                        "target_type": "regression"
                      }
                    },
                    {
                      "tree": {
                        "feature_names": [
                          "type_tv"
                        ],
                        "tree_structure": [
                          {
                            "node_index": 0,
                            "split_feature": 0,
                            "split_gain": 12,
                            "threshold": 1,
                            "decision_type": "lt",
                            "default_left": true,
                            "left_child": 1,
                            "right_child": 2
                          },
                          {
                            "node_index": 1,
                            "leaf_value": 1.0
                          },
                          {
                            "node_index": 2,
                            "leaf_value": 12.0
                          }
                        ],
                        "target_type": "regression"
                      }
                    }
                  ]
                }
              }
            }
          }

  - do:
      headers:
        Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" # run as x_pack_rest_user, i.e. the test setup superuser
      indices.create:
        index: store
        body:
          mappings:
            properties:
              product:
                type: keyword
              cost:
                type: integer

  - do:
      headers:
        Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" # run as x_pack_rest_user, i.e. the test setup superuser
        Content-Type: application/json
      bulk:
        index: store
        refresh: true
        body: |
          { "index": {} }
          { "product": "TV", "cost": 300 }
          { "index": {} }
          { "product": "TV", "cost": 400}
          { "index": {} }
          { "product": "TV", "cost": 600}
          { "index": {} }
          { "product": "VCR", "cost": 15}
          { "index": {} }
          { "product": "VCR", "cost": 350}
          { "index": {} }
          { "product": "VCR", "cost": 580}
          { "index": {} }
          { "product": "Laptop", "cost": 100}
          { "index": {} }
          { "product": "Laptop", "cost": 300}
          { "index": {} }
          { "product": "Laptop", "cost": 500}

---
"Test rescore with stored model":
  - skip:
      version: all
      reason: "@AwaitsFix https://github.com/elastic/elasticsearch/issues/80703"

  - do:
      search:
        index: store
        size: 3
        body: >
          {
            "rescore": {
              "window_size": 10,
              "learning_to_rank": { "model_id": "ltr-model" }
            }
          }
  - match: { hits.hits.0._score: 17.0 }
  - match: { hits.hits.1._score: 17.0 }
  - match: { hits.hits.2._score: 14.0 }

  - do:
      search:
        index: store
        size: 3
        body: >
          {
            "query": {"term": {"product": "Laptop"}},
            "rescore": {
              "window_size": 10,
              "learning_to_rank": { "model_id": "ltr-model" }
            }
          }
  - match: { hits.hits.0._score: 6.0 }
  - match: { hits.hits.1._score: 6.0 }
  - match: { hits.hits.2._score: 3.0 }
---
"Test rescore with stored model and smaller window_size":
  - skip:
      version: all
      reason: "@AwaitsFix https://github.com/elastic/elasticsearch/issues/80703"

  - do:
      search:
        index: store
        size: 5
        body: >
          {
            "rescore": {
              "window_size": 2,
              "learning_to_rank": { "model_id": "ltr-model" }
            }
          }
  - match: { hits.hits.0._score: 17.0 }
  - match: { hits.hits.1._score: 17.0 }
  - match: { hits.hits.2._score: 1.0 }
  - match: { hits.hits.3._score: 1.0 }
  - match: { hits.hits.4._score: 1.0 }
---
"Test rescore with stored model and chained rescorers":
  - skip:
      version: all
      reason: "@AwaitsFix https://github.com/elastic/elasticsearch/issues/80703"

  - do:
      search:
        index: store
        size: 5
        body: >
          {
            "rescore": [
            {
              "window_size": 4,
              "query": { "rescore_query":{ "script_score": {"query": {"match_all": {}}, "script": {"source": "return 4"}}}}
            },
            {
              "window_size": 3,
              "learning_to_rank": { "model_id": "ltr-model" }
            },
            {
              "window_size": 2,
              "query": { "rescore_query": { "script_score": {"query": {"match_all": {}}, "script": {"source": "return 20"}}}}
            }
           ]
          }
  - match: { hits.hits.0._score: 37.0 }
  - match: { hits.hits.1._score: 37.0 }
  - match: { hits.hits.2._score: 14.0 }
  - match: { hits.hits.3._score: 5.0 }
  - match: { hits.hits.4._score: 1.0 }
---
"Test rescore with missing model":
  - do:
      catch: missing
      search:
        index: store
        body: >
          {
            "rescore": {
              "window_size": 10,
              "learning_to_rank": { "model_id": "ltr-missing" }
            }
          }
---
"Test rescore with no hits model":
  - do:
      search:
        index: store
        body: >
          {
            "query": {"term": {"product": "Speaker"}},
            "rescore": {
              "window_size": 10,
              "learning_to_rank": { "model_id": "ltr-model" }
            }
          }
  - length: { hits.hits: 0 }

---
setup:
  - do:
      cluster.health:
          wait_for_status: yellow

---
"Test getting a watch does not contain the original password":

  - do:
      watcher.put_watch:
        id: "watch_with_password"
        body:  >
          {
            "trigger": {
              "schedule" : { "cron" : "0 0 0 1 * ? 2099" }
            },
            "input": {
              "http" : {
                "request" : {
                  "host" : "host.domain",
                  "port" : 9200,
                  "path" : "/myservice",
                  "auth" : {
                    "basic" : {
                      "username" : "user",
                      "password" : "pass"
                    }
                  }
                }
              }
            },
            "actions": {
              "logging": {
                "logging": {
                  "text": "Log me Amadeus!"
                }
              }
            }
          }

  - do:
      watcher.get_watch:
        id: "watch_with_password"
  - match: { _id: "watch_with_password" }
  - match: { watch.input.http.request.auth.basic.password: "::es_redacted::" }

---
"Test putting a watch with a redacted password without version returns an error":

  # version 1
  - do:
      watcher.put_watch:
        id: "watch_without_version_test"
        body:  >
          {
            "trigger": {
              "schedule" : { "cron" : "0 0 0 1 * ? 2099" }
            },
            "input": {
              "http" : {
                "request" : {
                  "host" : "host.domain",
                  "port" : 9200,
                  "path" : "/myservice",
                  "auth" : {
                    "basic" : {
                      "username" : "user",
                      "password" : "pass"
                    }
                  }
                }
              }
            },
            "actions": {
              "logging": {
                "logging": {
                  "text": "Log me Amadeus!"
                }
              }
            }
          }

  - do:
      catch: bad_request
      watcher.put_watch:
        id: "watch_without_version_test"
        body:  >
          {
            "trigger": {
              "schedule" : { "cron" : "0 0 0 1 * ? 2099" }
            },
            "input": {
              "http" : {
                "request" : {
                  "host" : "host.domain",
                  "port" : 9200,
                  "path" : "/myservice",
                  "auth" : {
                    "basic" : {
                      "username" : "user",
                      "password" : "::es_redacted::"
                    }
                  }
                }
              }
            },
            "actions": {
              "logging": {
                "logging": {
                  "text": "Log me Amadeus!"
                }
              }
            }
          }


---
"Test putting a watch with a redacted password with old seq no returns an error":
  - skip:
      features: warnings
  # version 1
  - do:
      watcher.put_watch:
        id: "watch_with_seq_no"
        body:  >
          {
            "trigger": {
              "schedule" : { "cron" : "0 0 0 1 * ? 2099" }
            },
            "input": {
              "http" : {
                "request" : {
                  "host" : "host.domain",
                  "port" : 9200,
                  "path" : "/myservice",
                  "auth" : {
                    "basic" : {
                      "username" : "user",
                      "password" : "pass"
                    }
                  }
                }
              }
            },
            "actions": {
              "logging": {
                "logging": {
                  "text": "Log me Amadeus!"
                }
              }
            }
          }

  - set: { "_seq_no": seqNo }
  - set: { "_primary_term" : primaryTerm }

  # using optimistic concurrency control, this one will loose
  # as if two users in the watch UI tried to update the same watch
  - do:
      catch: conflict
      watcher.put_watch:
        id: "watch_with_seq_no"
        if_seq_no: 123034
        if_primary_term: $primaryTerm
        body:  >
          {
            "trigger": {
              "schedule" : { "cron" : "0 0 0 1 * ? 2099" }
            },
            "input": {
              "http" : {
                "request" : {
                  "host" : "host.domain",
                  "port" : 9200,
                  "path" : "/myservice",
                  "auth" : {
                    "basic" : {
                      "username" : "user",
                      "password" : "::es_redacted::"
                    }
                  }
                }
              }
            },
            "actions": {
              "logging": {
                "logging": {
                  "text": "Log me Amadeus!"
                }
              }
            }
          }

  - do:
      catch: conflict
      watcher.put_watch:
        id: "watch_with_seq_no"
        if_seq_no: $seqNo
        if_primary_term: 234242423
        body:  >
          {
            "trigger": {
              "schedule" : { "cron" : "0 0 0 1 * ? 2099" }
            },
            "input": {
              "http" : {
                "request" : {
                  "host" : "host.domain",
                  "port" : 9200,
                  "path" : "/myservice",
                  "auth" : {
                    "basic" : {
                      "username" : "user",
                      "password" : "::es_redacted::"
                    }
                  }
                }
              }
            },
            "actions": {
              "logging": {
                "logging": {
                  "text": "Log me Amadeus!"
                }
              }
            }
          }

  - do:
      watcher.put_watch:
        id: "watch_with_seq_no"
        if_seq_no: $seqNo
        if_primary_term: $primaryTerm
        body:  >
          {
            "trigger": {
              "schedule" : { "cron" : "0 0 0 1 * ? 2099" }
            },
            "input": {
              "http" : {
                "request" : {
                  "host" : "host.domain",
                  "port" : 9200,
                  "path" : "/myservice",
                  "auth" : {
                    "basic" : {
                      "username" : "new_user",
                      "password" : "::es_redacted::"
                    }
                  }
                }
              }
            },
            "actions": {
              "logging": {
                "logging": {
                  "text": "Log me Amadeus!"
                }
              }
            }
          }

  - do:
      watcher.get_watch:
        id: "watch_with_seq_no"
  - match: { found: true }
  - match: { _id: "watch_with_seq_no" }
  - match: { watch.input.http.request.auth.basic.username: "new_user" }
  - match: { watch.input.http.request.auth.basic.password: "::es_redacted::" }

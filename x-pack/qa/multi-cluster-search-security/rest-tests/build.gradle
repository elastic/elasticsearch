import org.elasticsearch.gradle.internal.info.BuildParams
import org.elasticsearch.gradle.internal.test.RestIntegTestTask

apply plugin: 'elasticsearch.internal-testclusters'
apply plugin: 'elasticsearch.standalone-rest-test'
apply plugin: 'elasticsearch.rest-resources'

dependencies {
  testImplementation project(':x-pack:qa')
}

restResources {
  restApi {
    include '_common', 'bulk', 'field_caps', 'security', 'search', 'clear_scroll', 'scroll', 'async_search', 'cluster',
      'indices', 'open_point_in_time', 'close_point_in_time', 'terms_enum'
  }
}

tasks.register('remote-cluster', RestIntegTestTask) {
  mustRunAfter("precommit")
  systemProperty 'tests.rest.suite', 'remote_cluster'
}

// randomise between sniff and proxy modes
boolean proxyMode = (new Random(Long.parseUnsignedLong(BuildParams.testSeed.tokenize(':').get(0), 16))).nextBoolean()

def remoteCluster = testClusters.register('remote-cluster') {
  testDistribution = 'DEFAULT'
  numberOfNodes = 2
  setting 'node.roles', '[data,ingest,master]'
  setting 'xpack.security.enabled', 'true'
  setting 'xpack.watcher.enabled', 'false'
  setting 'xpack.ml.enabled', 'false'
  setting 'xpack.license.self_generated.type', 'trial'

  user username: "test_user", password: "x-pack-test-password"
}

def mixedCluster = testClusters.register('mixed-cluster') {
  testDistribution = 'DEFAULT'
  setting 'xpack.security.enabled', 'true'
  setting 'xpack.watcher.enabled', 'false'
  setting 'xpack.ml.enabled', 'false'
  setting 'xpack.license.self_generated.type', 'trial'
  if (proxyMode) {
    setting 'cluster.remote.my_remote_cluster.mode', 'proxy'
    setting 'cluster.remote.my_remote_cluster.proxy_address', {
      "\"${remoteCluster.get().getAllTransportPortURI().get(0)}\""
    }
  } else {
    setting 'cluster.remote.my_remote_cluster.seeds', {
      remoteCluster.get().getAllTransportPortURI().collect { "\"$it\"" }.toString()
    }
  }
  setting 'cluster.remote.connections_per_cluster', "1"

  user username: "test_user", password: "x-pack-test-password"
}

tasks.register('mixed-cluster', RestIntegTestTask) {
  dependsOn 'remote-cluster'
  useCluster remoteCluster
  systemProperty 'tests.rest.suite', 'multi_cluster'
  if (proxyMode) {
    systemProperty 'tests.rest.blacklist', [
      'multi_cluster/10_basic/Add persistent remote cluster based on the preset cluster',
      'multi_cluster/20_info/Add persistent remote cluster based on the preset cluster and check remote info',
      'multi_cluster/20_info/Fetch remote cluster info for existing cluster',
      'multi_cluster/70_connection_mode_configuration/*',
    ].join(",")
  }
}

tasks.register("integTest") {
  dependsOn 'mixed-cluster'
}

tasks.named("check").configure { dependsOn("integTest") }

apply plugin: 'elasticsearch.internal-yaml-rest-test'
import org.elasticsearch.gradle.internal.info.BuildParams
import org.elasticsearch.gradle.util.GradleUtils

dependencies {
  testImplementation project(':x-pack:qa')
  testImplementation project(':x-pack:qa:multi-project:yaml-test-framework')
  clusterModules project(':modules:mapper-extras')
  clusterModules project(':modules:rank-eval')
  clusterModules project(':modules:ingest-common')
  clusterModules project(':modules:reindex')
  clusterModules project(':modules:analysis-common')
  clusterModules project(':modules:health-shards-availability')
  clusterModules project(':modules:data-streams')
  clusterModules project(':modules:multi-project')
  clusterModules project(xpackModule('stack'))
  clusterModules project(xpackModule('ilm'))
  clusterModules project(xpackModule('mapper-constant-keyword'))
  clusterModules project(xpackModule('wildcard'))
}

// let the yamlRestTests see the classpath of test
GradleUtils.extendSourceSet(project, "test", "yamlRestTest", tasks.named("yamlRestTest"))

restResources {
  restTests {
    includeCore '*'
  }
}

tasks.named("yamlRestTest").configure {
  ArrayList<String> blacklist = [
    /* These tests don't work on multi-project yet - we need to go through each of them and make them work */
    'bulk/*/*',
    'cat.aliases/*/*',
    'cat.allocation/10_basic/*',
    'cat.fielddata/10_basic/*',
    'cat.indices/*/*',
    'cat.recovery/*/*',
    'cat.segments/*/*',
    'cat.shards/*/*',
    'cat.snapshots/*/*',
    'cat.templates/*/*',
    'cluster.desired_balance/10_basic/*',
    'cluster.desired_nodes/*/*',
    'cluster.prevalidate_node_removal/*/*',
    'cluster.reroute/11_explain/*',
    'cluster.state/20_filtering/*',
    'cluster.state/30_expand_wildcards/*',
    'cluster.stats/*/*',
    'count/*/*',
    'create/*/*',
    'delete/*/*',
    'exists/*/*',
    'explain/*/*',
    'field_caps/*/*',
    'get/100_synthetic_source/_doc_count', // requires refresh to work
    'get_source/*/*',
    'health/*/*',
    'index/*/*',
    'indices.analyze/*/*',
    'indices.blocks/*/*',
    'indices.clear_cache/*/*',
    'indices.clone/*/*',
    'indices.create/*/*',
    'indices.create/*/*/*',
    'indices.delete/*/*',
    'indices.delete_alias/*/*',
    'indices.exists_alias/*/*',
    'indices.exists_template/*/*',
    'indices.flush/*/*',
    'indices.forcemerge/*/*',
    'indices.get/*/*',
    'indices.get_alias/*/*',
    'indices.get_alias/10_basic/Get aliases via /*/_alias/',
    'indices.get_alias/10_basic/Get aliases via /*/_alias/{name}',
    'indices.get_alias/10_basic/Get aliases via /*suf/_alias/{name}',
    'indices.get_alias/10_basic/Get aliases via /_alias/*',
    'indices.get_alias/10_basic/Get aliases via /_alias/_all',
    'indices.get_alias/10_basic/Get aliases via /_alias/{name}',
    'indices.get_alias/10_basic/Get aliases via /_all/_alias/',
    'indices.get_alias/10_basic/Get aliases via /_all/_alias/{name}',
    'indices.get_alias/10_basic/Get aliases via /name,name/_alias/{name}',
    'indices.get_alias/10_basic/Get aliases via /{index}/_alias/*',
    'indices.get_alias/10_basic/Get aliases via /{index}/_alias/_all',
    'indices.get_alias/10_basic/Get aliases via /{index}/_alias/name,name',
    'indices.get_alias/10_basic/Get aliases via /{index}/_alias/prefix*',
    'indices.get_alias/10_basic/Get all aliases via /_alias',
    'indices.get_alias/10_basic/Get all aliases via /{index}/_alias/',
    'indices.get_alias/10_basic/Get and index with no aliases via /{index}/_alias/',
    'indices.get_alias/10_basic/Get specific alias via /{index}/_alias/{name}',
    'indices.get_alias/20_empty/Check empty aliases when getting all aliases via /_alias',
    'indices.get_field_mapping/*/*',
    'indices.get_index_template/*/*',
    'indices.get_mapping/*/*',
    'indices.get_mapping/*/*/*',
    'indices.get_mapping/*/*/*/*',
    'indices.get_mapping/*/*/*/*/*',
    'indices.get_settings/*/*',
    'indices.get_settings/*/*/*',
    'indices.get_settings/*/*/*/*',
    'indices.get_settings/*/*/*/*/*',
    'indices.get_template/*/*',
    'indices.open/*/*',
    'indices.open/*/*/*',
    'indices.put_alias/*/*',
    // This test is blocked on the ability to add ingest pipelines in multiple projects.
    'indices.put_index_template/15_composition/Using deprecated component templates and pipelines in index template',
    'indices.put_mapping/*/*',
    'indices.put_settings/*/*',
    'indices.put_template/*/*',
    'indices.recovery/*/*',
    'indices.refresh/*/*',
    'indices.resolve_cluster/*/*',
    'indices.rollover/*/*',
    'indices.segments/*/*',
    'indices.shard_stores/*/*',
    'indices.shrink/*/*',
    'indices.simulate_index_template/*/*',
    'indices.simulate_template/*/*',
    'indices.sort/*/*',
    'indices.split/*/*',
    'indices.stats/*/*',
    'indices.update_aliases/*/*',
    'indices.validate_query/*/*',
    'ingest/*/*',
    'logsdb/*/*',
    'mget/*/*',
    'mget/*/*/*',
    'migration/*/*',
    'mlt/*/*',
    'msearch/*/*',
    'mtermvectors/*/*',
    'nodes.info/*/*',
    'nodes.reload_secure_settings/*/*',
    'nodes.stats/*/*',
    'range/*/*',
    'scripts/*/*',
    'scroll/*/*',
    'search/*/*',
    'search/*/*/*',
    'search.highlight/*/*',
    'search.inner_hits/*/*',
    'search.retrievers/*/*',
    'search.vectors/*/*',
    'search_shards/*/*',
    'search_shards/*/*/*',
    'simulate.ingest/*/*',
    'snapshot.clone/*/*',
    'snapshot.create/*/*',
    'snapshot.delete/*/*',
    'snapshot.get/*/*',
    'snapshot.get_repository/*/*',
    'snapshot.restore/*/*',
    'snapshot.status/*/*',
    'suggest/*/*',
    'synonyms/*/*',
    'tasks.cancel/*/*',
    'tasks.get/*/*',
    'tasks.list/*/*',
    'termvectors/*/*',
    'tsdb/*/*',
    'update/*/*'
  ];
  if (BuildParams.isSnapshotBuild() == false) {
    blacklist += [];
  }
  systemProperty 'tests.rest.blacklist', blacklist.join(',')
}

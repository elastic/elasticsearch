/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import org.elasticsearch.gradle.internal.info.BuildParams

import java.nio.file.Files
import java.nio.file.Paths
import org.elasticsearch.gradle.ElasticsearchDistribution

apply plugin: 'elasticsearch.build'

versions << [
  'aws': '1.12.270'
]

dependencies {
  api project(":server")
  api project(":libs:elasticsearch-cli")
  testImplementation project(":test:framework")

  api "com.amazonaws:aws-java-sdk-s3:${versions.aws}"
  api "com.amazonaws:aws-java-sdk-core:${versions.aws}"
  api "com.amazonaws:jmespath-java:${versions.aws}"
  api "org.apache.httpcomponents:httpclient:${versions.httpclient}"
  api "org.apache.httpcomponents:httpcore:${versions.httpcore}"
  api "commons-logging:commons-logging:${versions.commonslogging}"
  api "commons-codec:commons-codec:${versions.commonscodec}"
  api "org.apache.logging.log4j:log4j-1.2-api:${versions.log4j}"
  api "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
  api "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
  api "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"

  // GCS dependencies
  api 'com.google.cloud:google-cloud-storage:2.13.1'
  api 'com.google.cloud:google-cloud-core:2.8.28'
  api 'com.google.cloud:google-cloud-core-http:2.8.28'
  runtimeOnly 'com.google.guava:guava:32.0.1-jre'
  api 'com.google.guava:failureaccess:1.0.1'
  api "commons-logging:commons-logging:${versions.commonslogging}"
  api "org.apache.logging.log4j:log4j-1.2-api:${versions.log4j}"
  api "commons-codec:commons-codec:${versions.commonscodec}"
  api 'com.google.api:api-common:2.3.1'
  api 'com.google.api:gax:2.20.1'
  api 'org.threeten:threetenbp:1.6.5'
  api "com.google.protobuf:protobuf-java-util:${versions.protobuf}"
  api "com.google.protobuf:protobuf-java:${versions.protobuf}"
  api 'com.google.code.gson:gson:2.10'
  api 'com.google.api.grpc:proto-google-common-protos:2.9.6'
  api 'com.google.api.grpc:proto-google-iam-v1:1.6.2'
  api 'com.google.auth:google-auth-library-credentials:1.11.0'
  api 'com.google.auth:google-auth-library-oauth2-http:1.11.0'
  api 'com.google.oauth-client:google-oauth-client:1.34.1'
  api 'com.google.api-client:google-api-client:2.1.1'
  api 'com.google.http-client:google-http-client:1.42.3'
  api 'com.google.http-client:google-http-client-gson:1.42.3'
  api 'com.google.http-client:google-http-client-appengine:1.42.3'
  api 'com.google.http-client:google-http-client-jackson2:1.42.3'
  api 'com.google.api:gax-httpjson:0.105.1'
  api 'io.grpc:grpc-context:1.49.2'
  api 'io.opencensus:opencensus-api:0.31.1'
  api 'io.opencensus:opencensus-contrib-http-util:0.31.1'
  api 'com.google.apis:google-api-services-storage:v1-rev20220705-2.0.0'

  // HACK: javax.xml.bind was removed from default modules in java 9, so we pull the api in here,
  // and whitelist this hack in JarHell
  api 'javax.xml.bind:jaxb-api:2.2.2'
}

tasks.named("dependencyLicenses").configure {
  mapping from: /aws-java-sdk-.*/, to: 'aws-java-sdk'
  mapping from: /jmespath-java.*/, to: 'aws-java-sdk'
  mapping from: /jackson-.*/, to: 'jackson'
  mapping from: /jaxb-.*/, to: 'jaxb'

  mapping from: /google-cloud-.*/, to: 'google-cloud'
  mapping from: /google-auth-.*/, to: 'google-auth'
  mapping from: /google-http-.*/, to: 'google-http'
  mapping from: /opencensus.*/, to: 'opencensus'
  mapping from: /http.*/, to: 'httpclient'
  mapping from: /protobuf.*/, to: 'protobuf'
  mapping from: /proto-google.*/, to: 'proto-google'
}

// TODO: Investigate using the new Gradle test-fixture plugin here after the upgrade to 5.6
// There is only AbstractCleanupTests class in test directory and it's abstract
tasks.named("test").configure {
  it.enabled = false
}
tasks.named("testingConventions").configure {
  it.enabled = false
}

tasks.register("unpackArchive", Copy) {
  dependsOn "assemble"
  from tarTree("${project.buildDir}/snapshot-tool-${project.version}.tgz")
  into "${project.buildDir}/unpackedArchive"
}

tasks.register("smokeTest", Exec) {
  dependsOn "unpackArchive"
  onlyIf { ElasticsearchDistribution.CURRENT_PLATFORM != ElasticsearchDistribution.Platform.WINDOWS }
  commandLine "${project.buildDir}/unpackedArchive/snapshot-tool-${project.version}/bin/elasticsearch-snapshot", "-h"
}

tasks.named("check").configure {
  dependsOn "smokeTest", 'qa:google-cloud-storage:check', 'qa:s3:check'
}

def vendorPath = Paths.get("${project.buildDir}/libs/vendor")

tasks.register("copyRuntimeLibs", Copy) {
  doFirst {
    Files.createDirectories(vendorPath)
  }
  into vendorPath.toString()
  from configurations.runtimeClasspath
}

tasks.register("buildTarArchive", Tar) {
  dependsOn "copyRuntimeLibs"
  compression Compression.GZIP
  archiveBaseName.set('snapshot-tool')
  destinationDirectory.set(project.buildDir)
  into "snapshot-tool-${archiveVersion.get()}", {
    into "bin", {
      from file("src/bin")
    }
    into "libs", {
      from jar.getArchiveFile()
      from file("${project.buildDir}/libs")
    }
  }
}

tasks.named("assemble").configure {
  dependsOn("buildTarArchive")
}

tasks.named("thirdPartyAudit").configure {
  ignoreMissingClasses(
          'com.google.api.client.http.apache.v2.ApacheHttpTransport',
          // classes are missing
          'javax.jms.Message',
          'javax.servlet.ServletContextEvent',
          'javax.servlet.ServletContextListener',
          'org.apache.avalon.framework.logger.Logger',
          'org.apache.log.Hierarchy',
          'org.apache.log.Logger',
          'software.amazon.ion.IonReader',
          'software.amazon.ion.IonSystem',
          'software.amazon.ion.IonType',
          'software.amazon.ion.IonWriter',
          'software.amazon.ion.Timestamp',
          'software.amazon.ion.system.IonBinaryWriterBuilder',
          'software.amazon.ion.system.IonSystemBuilder',
          'software.amazon.ion.system.IonTextWriterBuilder',
          'software.amazon.ion.system.IonWriterBuilder',
          // We don't use the kms dependency
          'com.amazonaws.services.kms.AWSKMS',
          'com.amazonaws.services.kms.AWSKMSClient',
          'com.amazonaws.services.kms.AWSKMSClientBuilder',
          'com.amazonaws.services.kms.model.DecryptRequest',
          'com.amazonaws.services.kms.model.DecryptResult',
          'com.amazonaws.services.kms.model.EncryptRequest',
          'com.amazonaws.services.kms.model.EncryptResult',
          'com.amazonaws.services.kms.model.GenerateDataKeyRequest',
          'com.amazonaws.services.kms.model.GenerateDataKeyResult',

          'com.google.appengine.api.datastore.Blob',
          'com.google.appengine.api.datastore.DatastoreService',
          'com.google.appengine.api.datastore.DatastoreServiceFactory',
          'com.google.appengine.api.datastore.Entity',
          'com.google.appengine.api.datastore.Key',
          'com.google.appengine.api.datastore.KeyFactory',
          'com.google.appengine.api.datastore.PreparedQuery',
          'com.google.appengine.api.datastore.Query',
          'com.google.appengine.api.memcache.Expiration',
          'com.google.appengine.api.memcache.MemcacheService',
          'com.google.appengine.api.memcache.MemcacheServiceFactory',
          'com.google.appengine.api.urlfetch.FetchOptions$Builder',
          'com.google.appengine.api.urlfetch.FetchOptions',
          'com.google.appengine.api.urlfetch.HTTPHeader',
          'com.google.appengine.api.urlfetch.HTTPMethod',
          'com.google.appengine.api.urlfetch.HTTPRequest',
          'com.google.appengine.api.urlfetch.HTTPResponse',
          'com.google.appengine.api.urlfetch.URLFetchService',
          'com.google.appengine.api.urlfetch.URLFetchServiceFactory',
          // commons-logging optional dependencies
          'org.apache.avalon.framework.logger.Logger',
          'org.apache.log.Hierarchy',
          'org.apache.log.Logger',
          // com.google.api.gax optional dependencies
          'org.graalvm.nativeimage.hosted.Feature',
          'org.graalvm.nativeimage.hosted.Feature$BeforeAnalysisAccess',
          'org.graalvm.nativeimage.hosted.Feature$DuringAnalysisAccess',
          'org.graalvm.nativeimage.hosted.Feature$FeatureAccess',
          'org.graalvm.nativeimage.hosted.RuntimeReflection',
          // commons-logging provided dependencies
          'javax.servlet.ServletContextEvent',
          'javax.servlet.ServletContextListener'
  )
  if (BuildParams.runtimeJavaVersion <= JavaVersion.VERSION_1_8) {
    ignoreJarHellWithJDK(
            'javax.xml.bind.Binder',
            'javax.xml.bind.ContextFinder$1',
            'javax.xml.bind.ContextFinder',
            'javax.xml.bind.DataBindingException',
            'javax.xml.bind.DatatypeConverter',
            'javax.xml.bind.DatatypeConverterImpl$CalendarFormatter',
            'javax.xml.bind.DatatypeConverterImpl',
            'javax.xml.bind.DatatypeConverterInterface',
            'javax.xml.bind.Element',
            'javax.xml.bind.GetPropertyAction',
            'javax.xml.bind.JAXB$Cache',
            'javax.xml.bind.JAXB',
            'javax.xml.bind.JAXBContext',
            'javax.xml.bind.JAXBElement$GlobalScope',
            'javax.xml.bind.JAXBElement',
            'javax.xml.bind.JAXBException',
            'javax.xml.bind.JAXBIntrospector',
            'javax.xml.bind.JAXBPermission',
            'javax.xml.bind.MarshalException',
            'javax.xml.bind.Marshaller$Listener',
            'javax.xml.bind.Marshaller',
            'javax.xml.bind.Messages',
            'javax.xml.bind.NotIdentifiableEvent',
            'javax.xml.bind.ParseConversionEvent',
            'javax.xml.bind.PrintConversionEvent',
            'javax.xml.bind.PropertyException',
            'javax.xml.bind.SchemaOutputResolver',
            'javax.xml.bind.TypeConstraintException',
            'javax.xml.bind.UnmarshalException',
            'javax.xml.bind.Unmarshaller$Listener',
            'javax.xml.bind.Unmarshaller',
            'javax.xml.bind.UnmarshallerHandler',
            'javax.xml.bind.ValidationEvent',
            'javax.xml.bind.ValidationEventHandler',
            'javax.xml.bind.ValidationEventLocator',
            'javax.xml.bind.ValidationException',
            'javax.xml.bind.Validator',
            'javax.xml.bind.WhiteSpaceProcessor',
            'javax.xml.bind.annotation.DomHandler',
            'javax.xml.bind.annotation.W3CDomHandler',
            'javax.xml.bind.annotation.XmlAccessOrder',
            'javax.xml.bind.annotation.XmlAccessType',
            'javax.xml.bind.annotation.XmlAccessorOrder',
            'javax.xml.bind.annotation.XmlAccessorType',
            'javax.xml.bind.annotation.XmlAnyAttribute',
            'javax.xml.bind.annotation.XmlAnyElement',
            'javax.xml.bind.annotation.XmlAttachmentRef',
            'javax.xml.bind.annotation.XmlAttribute',
            'javax.xml.bind.annotation.XmlElement$DEFAULT',
            'javax.xml.bind.annotation.XmlElement',
            'javax.xml.bind.annotation.XmlElementDecl$GLOBAL',
            'javax.xml.bind.annotation.XmlElementDecl',
            'javax.xml.bind.annotation.XmlElementRef$DEFAULT',
            'javax.xml.bind.annotation.XmlElementRef',
            'javax.xml.bind.annotation.XmlElementRefs',
            'javax.xml.bind.annotation.XmlElementWrapper',
            'javax.xml.bind.annotation.XmlElements',
            'javax.xml.bind.annotation.XmlEnum',
            'javax.xml.bind.annotation.XmlEnumValue',
            'javax.xml.bind.annotation.XmlID',
            'javax.xml.bind.annotation.XmlIDREF',
            'javax.xml.bind.annotation.XmlInlineBinaryData',
            'javax.xml.bind.annotation.XmlList',
            'javax.xml.bind.annotation.XmlMimeType',
            'javax.xml.bind.annotation.XmlMixed',
            'javax.xml.bind.annotation.XmlNs',
            'javax.xml.bind.annotation.XmlNsForm',
            'javax.xml.bind.annotation.XmlRegistry',
            'javax.xml.bind.annotation.XmlRootElement',
            'javax.xml.bind.annotation.XmlSchema',
            'javax.xml.bind.annotation.XmlSchemaType$DEFAULT',
            'javax.xml.bind.annotation.XmlSchemaType',
            'javax.xml.bind.annotation.XmlSchemaTypes',
            'javax.xml.bind.annotation.XmlSeeAlso',
            'javax.xml.bind.annotation.XmlTransient',
            'javax.xml.bind.annotation.XmlType$DEFAULT',
            'javax.xml.bind.annotation.XmlType',
            'javax.xml.bind.annotation.XmlValue',
            'javax.xml.bind.annotation.adapters.CollapsedStringAdapter',
            'javax.xml.bind.annotation.adapters.HexBinaryAdapter',
            'javax.xml.bind.annotation.adapters.NormalizedStringAdapter',
            'javax.xml.bind.annotation.adapters.XmlAdapter',
            'javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter$DEFAULT',
            'javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter',
            'javax.xml.bind.annotation.adapters.XmlJavaTypeAdapters',
            'javax.xml.bind.attachment.AttachmentMarshaller',
            'javax.xml.bind.attachment.AttachmentUnmarshaller',
            'javax.xml.bind.helpers.AbstractMarshallerImpl',
            'javax.xml.bind.helpers.AbstractUnmarshallerImpl',
            'javax.xml.bind.helpers.DefaultValidationEventHandler',
            'javax.xml.bind.helpers.Messages',
            'javax.xml.bind.helpers.NotIdentifiableEventImpl',
            'javax.xml.bind.helpers.ParseConversionEventImpl',
            'javax.xml.bind.helpers.PrintConversionEventImpl',
            'javax.xml.bind.helpers.ValidationEventImpl',
            'javax.xml.bind.helpers.ValidationEventLocatorImpl',
            'javax.xml.bind.util.JAXBResult',
            'javax.xml.bind.util.JAXBSource$1',
            'javax.xml.bind.util.JAXBSource',
            'javax.xml.bind.util.Messages',
            'javax.xml.bind.util.ValidationEventCollector'
    )
  } else {
    ignoreMissingClasses 'javax.activation.DataHandler'
  }

  ignoreViolations(
          // uses internal java api: sun.misc.Unsafe
          'com.google.protobuf.UnsafeUtil',
          'com.google.protobuf.UnsafeUtil$1',
          'com.google.protobuf.UnsafeUtil$JvmMemoryAccessor',
          'com.google.protobuf.UnsafeUtil$MemoryAccessor',
          'com.google.protobuf.MessageSchema',
          'com.google.protobuf.UnsafeUtil$Android32MemoryAccessor',
          'com.google.protobuf.UnsafeUtil$Android64MemoryAccessor',
          'com.google.common.cache.Striped64',
          'com.google.common.cache.Striped64$1',
          'com.google.common.cache.Striped64$Cell',
          'com.google.common.hash.Striped64',
          'com.google.common.hash.Striped64$1',
          'com.google.common.hash.Striped64$Cell',
          'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray',
          'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1',
          'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2',
          'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper',
          'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1',
          'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray',
          'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator',
          'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1',
  )
}

tasks.named('splitPackagesAudit').configure {
  // snapshots package is owned by server, these should be moved to snapshots.tool
  ignoreClasses 'org.elasticsearch.snapshots.AbstractCleanupCommand',
    'org.elasticsearch.snapshots.AbstractRepository',
    'org.elasticsearch.snapshots.CleanupGCSRepositoryCommand',
    'org.elasticsearch.snapshots.CleanupS3RepositoryCommand',
    'org.elasticsearch.snapshots.GCSRepository',
    'org.elasticsearch.snapshots.S3Repository',
    'org.elasticsearch.snapshots.SnapshotToolCli'
}
